;; Object haskell-mode/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "haskell-mode/"
  :tables
  (list
    (semanticdb-table "haskell-decl-scan.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [3351 3368])
            ("haskell-mode" include nil nil [3369 3392])
            ("syntax" include nil nil [3393 3410])
            ("imenu" include nil nil [3411 3427])
            ("haskell-decl-scan" customgroup (:user-visible-flag t) nil [3429 3626])
            ("haskell-decl-scan-bindings-as-variables" variable nil nil [3628 3803])
            ("haskell-decl-scan-add-to-menubar" variable (:default-value t) nil [3805 3958])
            ("haskell-ds-start-keywords-re" variable (:default-value (concat "\\(\\<" "class\\|data\\|i\\(mport\\|n\\(fix\\(\\|[lr]\\)\\|stance\\)\\)\\|" "module\\|primitive\\|type\\|newtype" "\\)\\>")) nil [4047 4292])
            ("haskell-ds-syntax-table" variable (:default-value (let ((table (copy-syntax-table haskell-mode-syntax-table))) (modify-syntax-entry 39 "w" table) (modify-syntax-entry 95 "w" table) (modify-syntax-entry 92 "_" table) table)) nil [4294 4576])
            ("haskell-ds-get-variable" function (:arguments ("prefix")) nil [4579 6435])
            ("haskell-ds-move-to-start-regexp" function (:arguments ("inc" "regexp")) nil [6437 6969])
            ("haskell-ds-move-to-start-regexp-skipping-comments" function (:arguments ("inc" "regexp")) nil [6971 7294])
            ("literate-haskell-ds-line-prefix" variable (:default-value "> ?") nil [7296 7631])
            ("haskell-ds-start-decl-re" variable (:default-value "\\(\\sw\\|(\\)") nil [7633 7733])
            ("literate-haskell-ds-start-decl-re" variable (:default-value (concat literate-haskell-ds-line-prefix haskell-ds-start-decl-re)) nil [7735 7915])
            ("haskell-ds-move-to-decl" function (:arguments ("direction" "bird-literate" "fix")) nil [7917 14354])
            ("haskell-ds-bird-p" function nil nil [14356 14447])
            ("haskell-ds-backward-decl" function (:user-visible-flag t) nil [14449 15111])
            ("haskell-ds-forward-decl" function (:user-visible-flag t) nil [15113 15264])
            ("haskell-ds-generic-find-next-decl" function (:arguments ("bird-literate")) nil [15266 19856])
            ("haskell-ds-create-imenu-index" function nil nil [19948 23184])
            ("haskell-ds-imenu-label-cmp" function (:arguments ("el1" "el2")) nil [23186 23341])
            ("haskell-ds-imenu" function nil nil [23343 23563])
            ("turn-on-haskell-decl-scan" function (:user-visible-flag t) nil [23635 23769])
            ("define-minor-mode" code nil nil [23786 25946])
            ("haskell-decl-scan" package nil nil [25972 26000]))          
      :file "haskell-decl-scan.el"
      :pointmax 26037
      :fsize 26040
      :lastmodtime '(21542 62199 291758 854000)
      :unmatched-syntax nil)
    (semanticdb-table "haskell-mode.el"
      :file "haskell-mode.el"
      :fsize 44537
      :lastmodtime '(21542 62199 303758 854000))
    (semanticdb-table "haskell-doc.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("haskell-mode" include nil nil [13916 13939])
            ("inf-haskell" include nil nil [13940 13962])
            ("imenu" include nil nil [13963 13979])
            ("haskell-doc" customgroup (:user-visible-flag t) nil [13981 14096])
            ("haskell-doc-mode" variable (:user-visible-flag t) nil [14204 15487])
            ("make-variable-buffer-local" code nil nil [15488 15534])
            ("haskell-doc-mode-hook" variable nil nil [15536 15621])
            ("haskell-doc-index" variable nil nil [15623 15861])
            ("make-variable-buffer-local" code nil nil [15862 15909])
            ("haskell-doc-show-global-types" variable nil nil [15911 16105])
            ("make-variable-buffer-local" code nil nil [16106 16165])
            ("haskell-doc-show-reserved" variable (:default-value t) nil [16167 16338])
            ("make-variable-buffer-local" code nil nil [16339 16394])
            ("haskell-doc-show-prelude" variable (:default-value t) nil [16396 16571])
            ("make-variable-buffer-local" code nil nil [16572 16626])
            ("haskell-doc-show-strategy" variable (:default-value t) nil [16628 16797])
            ("make-variable-buffer-local" code nil nil [16798 16853])
            ("haskell-doc-show-user-defined" variable (:default-value t) nil [16855 17034])
            ("make-variable-buffer-local" code nil nil [17035 17094])
            ("haskell-doc-chop-off-context" variable (:default-value t) nil [17096 17238])
            ("haskell-doc-chop-off-fctname" variable nil nil [17240 17385])
            ("haskell-doc-use-inf-haskell" variable nil nil [17387 17537])
            ("haskell-doc-search-distance" variable
               (:user-visible-flag t
                :default-value 40)
                nil [17539 17686])
            ("haskell-doc-idle-delay" variable
               (:user-visible-flag t
                :default-value 0.5)
                nil [17786 18059])
            ("haskell-doc-argument-case" variable (:default-value (quote identity)) nil [18061 18343])
            ("haskell-doc-mode-message-commands" variable (:user-visible-flag t) nil [18345 18826])
            ("haskell-doc-last-data" variable (:default-value (quote (nil))) nil [19818 19861])
            ("haskell-doc-minor-mode-string" variable
               (:user-visible-flag t
                :default-value (quote (haskell-doc-show-global-types " DOC" " Doc")))
                nil [19863 20020])
            ("haskell-doc-reserved-ids" variable (:default-value (quote (("case" . "case exp of { alts [;] }") ("class" . "class [context =>] simpleclass [where { cbody [;] }]") ("data" . "data [context =>] simpletype = constrs [deriving]") ("default" . "default (type1 , ... , typen)") ("deriving" . "deriving (dclass | (dclass1, ... , dclassn))") ("do" . "do { stmts [;] }  stmts -> exp [; stmts] | pat <- exp ; stmts | let decllist ; stmts") ("else" . "if exp then exp else exp") ("if" . "if exp then exp else exp") ("import" . "import [qualified] modid [as modid] [impspec]") ("in" . "let decllist in exp") ("infix" . "infix [digit] ops") ("infixl" . "infixl [digit] ops") ("infixr" . "infixr [digit] ops") ("instance" . "instance [context =>] qtycls inst [where { valdefs [;] }]") ("let" . "let { decl; ...; decl [;] } in exp") ("module" . "module modid [exports] where body") ("newtype" . "newtype [context =>] simpletype = con atype [deriving]") ("of" . "case exp of { alts [;] }") ("then" . "if exp then exp else exp") ("type" . "type simpletype = type") ("where" . "exp where { decl; ...; decl [;] }") ("as" . "import [qualified] modid [as modid] [impspec]") ("qualified" . "import [qualified] modid [as modid] [impspec]") ("hiding" . "hiding ( import1 , ... , importn [ , ] )")))) nil [20163 21794])
            ("defalias" code nil nil [21816 23074])
            ("haskell-doc-extract-types" function (:arguments ("url")) nil [23114 29927])
            ("haskell-doc-fetch-lib-urls" function (:arguments ("base-url")) nil [29929 30506])
            ("haskell-doc-extract-and-insert-types" function
               (:user-visible-flag t
                :arguments ("url"))
                nil [30508 31172])
            ("haskell-doc-prelude-types" variable (:default-value (quote (("!!" . "[a] -> Int -> a") ("$" . "(a -> b) -> a -> b") ("$!" . "(a -> b) -> a -> b") ("&&" . "Bool -> Bool -> Bool") ("*" . "Num a => a -> a -> a") ("**" . "Floating a => a -> a -> a") ("+" . "Num a => a -> a -> a") ("++" . "[a] -> [a] -> [a]") ("-" . "Num a => a -> a -> a") ("." . "(b -> c) -> (a -> b) -> a -> c") ("/" . "Fractional a => a -> a -> a") ("/=" . "Eq a => a -> a -> Bool") ("<" . "Ord a => a -> a -> Bool") ("<=" . "Ord a => a -> a -> Bool") ("=<<" . "Monad m => (a -> m b) -> m a -> m b") ("==" . "Eq a => a -> a -> Bool") (">" . "Ord a => a -> a -> Bool") (">=" . "Ord a => a -> a -> Bool") (">>" . "Monad m => m a -> m b -> m b") (">>=" . "Monad m => m a -> (a -> m b) -> m b") ("^" . "(Num a, Integral b) => a -> b -> a") ("^^" . "(Fractional a, Integral b) => a -> b -> a") ("abs" . "Num a => a -> a") ("acos" . "Floating a => a -> a") ("acosh" . "Floating a => a -> a") ("all" . "(a -> Bool) -> [a] -> Bool") ("and" . "[Bool] -> Bool") ("any" . "(a -> Bool) -> [a] -> Bool") ("appendFile" . "FilePath -> String -> IO ()") ("asTypeOf" . "a -> a -> a") ("asin" . "Floating a => a -> a") ("asinh" . "Floating a => a -> a") ("atan" . "Floating a => a -> a") ("atan2" . "RealFloat a => a -> a -> a") ("atanh" . "Floating a => a -> a") ("break" . "(a -> Bool) -> [a] -> ([a],[a])") ("catch" . "IO a -> (IOError -> IO a) -> IO a") ("ceiling" . "(RealFrac a, Integral b) => a -> b") ("compare" . "Ord a => a -> a -> Ordering") ("concat" . "[[a]] -> [a]") ("concatMap" . "(a -> [b]) -> [a] -> [b]") ("const" . "a -> b -> a") ("cos" . "Floating a => a -> a") ("cosh" . "Floating a => a -> a") ("curry" . "((a, b) -> c) -> a -> b -> c") ("cycle" . "[a] -> [a]") ("decodeFloat" . "RealFloat a => a -> (Integer,Int)") ("div" . "Integral a => a -> a -> a") ("divMod" . "Integral a => a -> a -> (a,a)") ("drop" . "Int -> [a] -> [a]") ("dropWhile" . "(a -> Bool) -> [a] -> [a]") ("either" . "(a -> c) -> (b -> c) -> Either a b -> c") ("elem" . "(Eq a) => a -> [a] -> Bool") ("encodeFloat" . "RealFloat a => Integer -> Int -> a") ("enumFrom" . "Enum a => a -> [a]") ("enumFromThen" . "Enum a => a -> a -> [a]") ("enumFromThenTo" . "Enum a => a -> a -> a -> [a]") ("enumFromTo" . "Enum a => a -> a -> [a]") ("error" . "String -> a") ("even" . "(Integral a) => a -> Bool") ("exp" . "Floating a => a -> a") ("exponent" . "RealFloat a => a -> Int") ("fail" . "Monad m => String -> m a") ("filter" . "(a -> Bool) -> [a] -> [a]") ("flip" . "(a -> b -> c) -> b -> a -> c") ("floatDigits" . "RealFloat a => a -> Int") ("floatRadix" . "RealFloat a => a -> Integer") ("floatRange" . "RealFloat a => a -> (Int,Int)") ("floor" . "(RealFrac a, Integral b) => a -> b") ("fmap" . "Functor f => (a -> b) -> f a -> f b") ("foldl" . "(a -> b -> a) -> a -> [b] -> a") ("foldl1" . "(a -> a -> a) -> [a] -> a") ("foldr" . "(a -> b -> b) -> b -> [a] -> b") ("foldr1" . "(a -> a -> a) -> [a] -> a") ("fromEnum" . "Enum a => a -> Int") ("fromInteger" . "Num a => Integer -> a") ("fromIntegral" . "(Integral a, Num b) => a -> b") ("fromRational" . "Fractional a => Rational -> a") ("fst" . "(a,b) -> a") ("gcd" . "(Integral a) => a -> a -> a") ("getChar" . "IO Char") ("getContents" . "IO String") ("getLine" . "IO String") ("head" . "[a] -> a") ("id" . "a -> a") ("init" . "[a] -> [a]") ("interact" . "(String -> String) -> IO ()") ("ioError" . "IOError -> IO a") ("isDenormalized" . "RealFloat a => a -> Bool") ("isIEEE" . "RealFloat a => a -> Bool") ("isInfinite" . "RealFloat a => a -> Bool") ("isNaN" . "RealFloat a => a -> Bool") ("isNegativeZero" . "RealFloat a => a -> Bool") ("iterate" . "(a -> a) -> a -> [a]") ("last" . "[a] -> a") ("lcm" . "(Integral a) => a -> a -> a") ("length" . "[a] -> Int") ("lex" . "ReadS String") ("lines" . "String -> [String]") ("log" . "Floating a => a -> a") ("logBase" . "Floating a => a -> a -> a") ("lookup" . "(Eq a) => a -> [(a,b)] -> Maybe b") ("map" . "(a -> b) -> [a] -> [b]") ("mapM" . "Monad m => (a -> m b) -> [a] -> m [b]") ("mapM_" . "Monad m => (a -> m b) -> [a] -> m ()") ("max" . "Ord a => a -> a -> a") ("maxBound" . "Bounded a => a") ("maximum" . "(Ord a) => [a] -> a") ("maybe" . "b -> (a -> b) -> Maybe a -> b") ("min" . "Ord a => a -> a -> a") ("minBound" . "Bounded a => a") ("minimum" . "(Ord a) => [a] -> a") ("mod" . "Integral a => a -> a -> a") ("negate" . "Num a => a -> a") ("not" . "Bool -> Bool") ("notElem" . "(Eq a) => a -> [a] -> Bool") ("null" . "[a] -> Bool") ("numericEnumFrom" . "(Fractional a) => a -> [a]") ("numericEnumFromThen" . "(Fractional a) => a -> a -> [a]") ("numericEnumFromThenTo" . "(Fractional a, Ord a) => a -> a -> a -> [a]") ("numericEnumFromTo" . "(Fractional a, Ord a) => a -> a -> [a]") ("odd" . "(Integral a) => a -> Bool") ("or" . "[Bool] -> Bool") ("otherwise" . "Bool") ("pi" . "Floating a => a") ("pred" . "Enum a => a -> a") ("print" . "Show a => a -> IO ()") ("product" . "(Num a) => [a] -> a") ("properFraction" . "(RealFrac a, Integral b) => a -> (b,a)") ("putChar" . "Char -> IO ()") ("putStr" . "String -> IO ()") ("putStrLn" . "String -> IO ()") ("quot" . "Integral a => a -> a -> a") ("quotRem" . "Integral a => a -> a -> (a,a)") ("read" . "(Read a) => String -> a") ("readFile" . "FilePath -> IO String") ("readIO" . "Read a => String -> IO a") ("readList" . "Read a => ReadS [a]") ("readLn" . "Read a => IO a") ("readParen" . "Bool -> ReadS a -> ReadS a") ("reads" . "(Read a) => ReadS a") ("readsPrec" . "Read a => Int -> ReadS a") ("realToFrac" . "(Real a, Fractional b) => a -> b") ("recip" . "Fractional a => a -> a") ("rem" . "Integral a => a -> a -> a") ("repeat" . "a -> [a]") ("replicate" . "Int -> a -> [a]") ("return" . "Monad m => a -> m a") ("reverse" . "[a] -> [a]") ("round" . "(RealFrac a, Integral b) => a -> b") ("scaleFloat" . "RealFloat a => Int -> a -> a") ("scanl" . "(a -> b -> a) -> a -> [b] -> [a]") ("scanl1" . "(a -> a -> a) -> [a] -> [a]") ("scanr" . "(a -> b -> b) -> b -> [a] -> [b]") ("scanr1" . "(a -> a -> a) -> [a] -> [a]") ("seq" . "a -> b -> b") ("sequence" . "Monad m => [m a] -> m [a]") ("sequence_" . "Monad m => [m a] -> m ()") ("show" . "Show a => a -> String") ("showChar" . "Char -> ShowS") ("showList" . "Show a => [a] -> ShowS") ("showParen" . "Bool -> ShowS -> ShowS") ("showString" . "String -> ShowS") ("shows" . "(Show a) => a -> ShowS") ("showsPrec" . "Show a => Int -> a -> ShowS") ("significand" . "RealFloat a => a -> a") ("signum" . "Num a => a -> a") ("sin" . "Floating a => a -> a") ("sinh" . "Floating a => a -> a") ("snd" . "(a,b) -> b") ("span" . "(a -> Bool) -> [a] -> ([a],[a])") ("splitAt" . "Int -> [a] -> ([a],[a])") ("sqrt" . "Floating a => a -> a") ("subtract" . "(Num a) => a -> a -> a") ("succ" . "Enum a => a -> a") ("sum" . "(Num a) => [a] -> a") ("tail" . "[a] -> [a]") ("take" . "Int -> [a] -> [a]") ("takeWhile" . "(a -> Bool) -> [a] -> [a]") ("tan" . "Floating a => a -> a") ("tanh" . "Floating a => a -> a") ("toEnum" . "Enum a => Int -> a") ("toInteger" . "Integral a => a -> Integer") ("toRational" . "Real a => a -> Rational") ("truncate" . "(RealFrac a, Integral b) => a -> b") ("uncurry" . "(a -> b -> c) -> ((a, b) -> c)") ("undefined" . "a") ("unlines" . "[String] -> String") ("until" . "(a -> Bool) -> (a -> a) -> a -> a") ("unwords" . "[String] -> String") ("unzip" . "[(a,b)] -> ([a],[b])") ("unzip3" . "[(a,b,c)] -> ([a],[b],[c])") ("userError" . "String -> IOError") ("words" . "String -> [String]") ("writeFile" . "FilePath -> String -> IO ()") ("zip" . "[a] -> [b] -> [(a,b)]") ("zip3" . "[a] -> [b] -> [c] -> [(a,b,c)]") ("zipWith" . "(a->b->c) -> [a]->[b]->[c]") ("zipWith3" . "(a->b->c->d) -> [a]->[b]->[c]->[d]") ("||" . "Bool -> Bool -> Bool") ("%" . "(Integral a) => a -> a -> Ratio a") ("approxRational" . "(RealFrac a) => a -> a -> Rational") ("denominator" . "(Integral a) => Ratio a -> a") ("numerator" . "(Integral a) => Ratio a -> a") ("cis" . "(RealFloat a) => a -> Complex a") ("conjugate" . "(RealFloat a) => Complex a -> Complex a") ("imagPart" . "(RealFloat a) => Complex a -> a") ("magnitude" . "(RealFloat a) => Complex a -> a") ("mkPolar" . "(RealFloat a) => a -> a -> Complex a") ("phase" . "(RealFloat a) => Complex a -> a") ("polar" . "(RealFloat a) => Complex a -> (a,a)") ("realPart" . "(RealFloat a) => Complex a -> a") ("floatToDigits" . "(RealFloat a) => Integer -> a -> ([Int], Int)") ("fromRat" . "(RealFloat a) => Rational -> a") ("lexDigits" . "ReadS String") ("readDec" . "(Integral a) => ReadS a") ("readFloat" . "(RealFrac a) => ReadS a") ("readHex" . "(Integral a) => ReadS a") ("readInt" . "(Integral a) => a -> (Char -> Bool) -> (Char -> Int) -> ReadS a") ("readOct" . "(Integral a) => ReadS a") ("readSigned" . "(Real a) => ReadS a -> ReadS a") ("showEFloat" . "(RealFloat a) => Maybe Int -> a -> ShowS") ("showFFloat" . "(RealFloat a) => Maybe Int -> a -> ShowS") ("showFloat" . "(RealFloat a) => a -> ShowS") ("showGFloat" . "(RealFloat a) => Maybe Int -> a -> ShowS") ("showHex" . "Integral a => a -> ShowS") ("showInt" . "Integral a => a -> ShowS") ("showIntAtBase" . "Integral a => a -> (Int -> Char) -> a -> ShowS") ("showOct" . "Integral a => a -> ShowS") ("showSigned" . "(Real a) => (a -> ShowS) -> Int -> a -> ShowS") ("inRange" . "Ix a => (a,a) -> a -> Bool") ("index" . "Ix a => (a,a) -> a -> Int") ("range" . "Ix a => (a,a) -> [a]") ("rangeSize" . "Ix a => (a,a) -> Int") ("!" . "(Ix a) => Array a b -> a -> b") ("//" . "(Ix a) => Array a b -> [(a,b)] -> Array a b") ("accum" . "(Ix a) => (b -> c -> b) -> Array a b -> [(a,c)]") ("accumArray" . "(Ix a) => (b -> c -> b) -> b -> (a,a) -> [(a,c)]") ("array" . "(Ix a) => (a,a) -> [(a,b)] -> Array a b") ("assocs" . "(Ix a) => Array a b -> [(a,b)]") ("bounds" . "(Ix a) => Array a b -> (a,a)") ("elems" . "(Ix a) => Array a b -> [b]") ("indices" . "(Ix a) => Array a b -> [a]") ("ixmap" . "(Ix a, Ix b) => (a,a) -> (a -> b) -> Array b c") ("listArray" . "(Ix a) => (a,a) -> [b] -> Array a b") ("\\\\" . "Eq a => [a] -> [a] -> [a]") ("delete" . "Eq a => a -> [a] -> [a]") ("deleteBy" . "(a -> a -> Bool) -> a -> [a] -> [a]") ("deleteFirstsBy" . "(a -> a -> Bool) -> [a] -> [a] -> [a]") ("elemIndex" . "Eq a => a -> [a] -> Maybe Int") ("elemIndices" . "Eq a => a -> [a] -> [Int]") ("find" . "(a -> Bool) -> [a] -> Maybe a") ("findIndex" . "(a -> Bool) -> [a] -> Maybe Int") ("findIndices" . "(a -> Bool) -> [a] -> [Int]") ("genericDrop" . "Integral a => a -> [b] -> [b]") ("genericIndex" . "Integral a => [b] -> a -> b") ("genericLength" . "Integral a => [b] -> a") ("genericReplicate" . "Integral a => a -> b -> [b]") ("genericSplitAt" . "Integral a => a -> [b] -> ([b],[b])") ("genericTake" . "Integral a => a -> [b] -> [b]") ("group" . "Eq a => [a] -> [[a]]") ("groupBy" . "(a -> a -> Bool) -> [a] -> [[a]]") ("inits" . "[a] -> [[a]]") ("insert" . "Ord a => a -> [a] -> [a]") ("insertBy" . "(a -> a -> Ordering) -> a -> [a] -> [a]") ("intersect" . "Eq a => [a] -> [a] -> [a]") ("intersectBy" . "(a -> a -> Bool) -> [a] -> [a] -> [a]") ("intersperse" . "a -> [a] -> [a]") ("isPrefixOf" . "Eq a => [a] -> [a] -> Bool") ("isSuffixOf" . "Eq a => [a] -> [a] -> Bool") ("mapAccumL" . "(a -> b -> (a, c)) -> a -> [b] -> (a, [c])") ("mapAccumR" . "(a -> b -> (a, c)) -> a -> [b] -> (a, [c])") ("maximumBy" . "(a -> a -> Ordering) -> [a] -> a") ("minimumBy" . "(a -> a -> Ordering) -> [a] -> a") ("nub" . "Eq a => [a] -> [a]") ("nubBy" . "(a -> a -> Bool) -> [a] -> [a]") ("partition" . "(a -> Bool) -> [a] -> ([a],[a])") ("sort" . "Ord a => [a] -> [a]") ("sortBy" . "(a -> a -> Ordering) -> [a] -> [a]") ("tails" . "[a] -> [[a]]") ("transpose" . "[[a]] -> [[a]]") ("unfoldr" . "(b -> Maybe (a,b)) -> b -> [a]") ("union" . "Eq a => [a] -> [a] -> [a]") ("unionBy" . "(a -> a -> Bool) -> [a] -> [a] -> [a]") ("unzip4" . "[(a,b,c,d)] -> ([a],[b],[c],[d])") ("unzip5" . "[(a,b,c,d,e)] -> ([a],[b],[c],[d],[e])") ("unzip6" . "[(a,b,c,d,e,f)] -> ([a],[b],[c],[d],[e],[f])") ("unzip7" . "[(a,b,c,d,e,f,g)] -> ([a],[b],[c],[d],[e],[f],[g])") ("zip4" . "[a] -> [b] -> [c] -> [d] -> [(a,b,c,d)]") ("zip5" . "[a] -> [b] -> [c] -> [d] -> [e] -> [(a,b,c,d,e)]") ("zip6" . "[a] -> [b] -> [c] -> [d] -> [e] -> [f]") ("zip7" . "[a] -> [b] -> [c] -> [d] -> [e] -> [f] -> [g]") ("zipWith4" . "(a->b->c->d->e) -> [a]->[b]->[c]->[d]->[e]") ("zipWith5" . "(a->b->c->d->e->f) ->") ("zipWith6" . "(a->b->c->d->e->f->g) -> [a]->[b]->[c]->[d]->[e]->[f]->[g]") ("zipWith7" . "(a->b->c->d->e->f->g->h) -> [a]->[b]->[c]->[d]->[e]->[f]->[g]->[h]") ("catMaybes" . "[Maybe a] -> [a]") ("fromJust" . "Maybe a -> a") ("fromMaybe" . "a -> Maybe a -> a") ("isJust" . "Maybe a -> Bool") ("isNothing" . "Maybe a -> Bool") ("listToMaybe" . "[a] -> Maybe a") ("mapMaybe" . "(a -> Maybe b) -> [a] -> [b]") ("maybeToList" . "Maybe a -> [a]") ("chr" . "Int -> Char") ("digitToInt" . "Char -> Int") ("intToDigit" . "Int -> Char") ("isAlpha" . "Char -> Bool") ("isAlphaNum" . "Char -> Bool") ("isAscii" . "Char -> Bool") ("isControl" . "Char -> Bool") ("isDigit" . "Char -> Bool") ("isHexDigit" . "Char -> Bool") ("isLatin1" . "Char -> Bool") ("isLower" . "Char -> Bool") ("isOctDigit" . "Char -> Bool") ("isPrint" . "Char -> Bool") ("isSpace" . "Char -> Bool") ("isUpper" . "Char -> Bool") ("lexLitChar" . "ReadS String") ("ord" . "Char -> Int") ("readLitChar" . "ReadS Char") ("showLitChar" . "Char -> ShowS") ("toLower" . "Char -> Char") ("toUpper" . "Char -> Char") ("ap" . "Monad m => m (a -> b) -> m a -> m b") ("filterM" . "Monad m => (a -> m Bool) -> [a] -> m [a]") ("foldM" . "Monad m => (a -> b -> m a) -> a -> [b] -> m a") ("guard" . "MonadPlus m => Bool -> m ()") ("join" . "Monad m => m (m a) -> m a") ("liftM" . "Monad m => (a -> b) -> (m a -> m b)") ("liftM2" . "Monad m => (a -> b -> c) -> (m a -> m b -> m c)") ("liftM3" . "Monad m => (a -> b -> c -> d) -> (m a -> m b -> m c -> m d)") ("liftM4" . "Monad m => (a -> b -> c -> d -> e) -> (m a -> m b -> m c -> m d -> m e)") ("liftM5" . "Monad m => (a -> b -> c -> d -> e -> f) -> (m a -> m b -> m c -> m d -> m e -> m f)") ("mapAndUnzipM" . "Monad m => (a -> m (b,c)) -> [a] -> m ([b], [c])") ("mplus" . "MonadPlus m => m a -> m a -> m a") ("msum" . "MonadPlus m => [m a] -> m a") ("mzero" . "MonadPlus m => m a") ("unless" . "Monad m => Bool -> m () -> m ()") ("when" . "Monad m => Bool -> m () -> m ()") ("zipWithM" . "Monad m => (a -> b -> m c) -> [a] -> [b] -> m [c]") ("zipWithM_" . "Monad m => (a -> b -> m c) -> [a] -> [b] -> m ()") ("bracket" . "IO a -> (a -> IO b) -> (a -> IO c) -> IO c") ("bracket_" . "IO a -> (a -> IO b) -> IO c -> IO c") ("hClose" . "Handle -> IO ()") ("hFileSize" . "Handle -> IO Integer") ("hFlush" . "Handle -> IO ()") ("hGetBuffering" . "Handle -> IO BufferMode") ("hGetChar" . "Handle -> IO Char") ("hGetContents" . "Handle -> IO String") ("hGetLine" . "Handle -> IO String") ("hGetPosn" . "Handle -> IO HandlePosn") ("hIsClosed" . "Handle -> IO Bool") ("hIsEOF" . "Handle -> IO Bool") ("hIsOpen" . "Handle -> IO Bool") ("hIsReadable" . "Handle -> IO Bool") ("hIsSeekable" . "Handle -> IO Bool") ("hIsWritable" . "Handle -> IO Bool") ("hLookAhead" . "Handle -> IO Char") ("hPrint" . "Show a => Handle -> a -> IO ()") ("hPutChar" . "Handle -> Char -> IO ()") ("hPutStr" . "Handle -> String -> IO ()") ("hPutStrLn" . "Handle -> String -> IO ()") ("hReady" . "Handle -> IO Bool") ("hSeek" . "Handle -> SeekMode -> Integer -> IO ()") ("hSetBuffering" . "Handle -> BufferMode -> IO ()") ("hSetPosn" . "HandlePosn -> IO ()") ("hWaitForInput" . "Handle -> Int -> IO Bool") ("ioeGetErrorString" . "IOError -> String") ("ioeGetFileName" . "IOError -> Maybe FilePath") ("ioeGetHandle" . "IOError -> Maybe Handle") ("isAlreadyExistsError" . "IOError -> Bool") ("isAlreadyInUseError" . "IOError -> Bool") ("isDoesNotExistError" . "IOError -> Bool") ("isEOF" . "IO Bool") ("isEOFError" . "IOError -> Bool") ("isFullError" . "IOError -> Bool") ("isIllegalOperation" . "IOError -> Bool") ("isPermissionError" . "IOError -> Bool") ("isUserError" . "IOError -> Bool") ("openFile" . "FilePath -> IOMode -> IO Handle") ("stderr" . "Handle") ("stdin" . "Handle") ("stdout" . "Handle") ("try" . "IO a -> IO (Either IOError a)") ("createDirectory" . "FilePath -> IO ()") ("doesDirectoryExist" . "FilePath -> IO Bool") ("doesFileExist" . "FilePath -> IO Bool") ("executable" . "Permissions -> Bool") ("getCurrentDirectory" . "IO FilePath") ("getDirectoryContents" . "FilePath -> IO [FilePath]") ("getModificationTime" . "FilePath -> IO ClockTime") ("getPermissions" . "FilePath -> IO Permissions") ("readable" . "Permissions -> Bool") ("removeDirectory" . "FilePath -> IO ()") ("removeFile" . "FilePath -> IO ()") ("renameDirectory" . "FilePath -> FilePath -> IO ()") ("renameFile" . "FilePath -> FilePath -> IO ()") ("searchable" . "Permissions -> Bool") ("setCurrentDirectory" . "FilePath -> IO ()") ("setPermissions" . "FilePath -> Permissions -> IO ()") ("writable" . "Permissions -> Bool") ("exitFailure" . "IO a") ("exitWith" . "ExitCode -> IO a") ("getArgs" . "IO [String]") ("getEnv" . "String -> IO String") ("getProgName" . "IO String") ("system" . "String -> IO ExitCode") ("addToClockTime" . "TimeDiff -> ClockTime -> ClockTime") ("calendarTimeToString" . "CalendarTime -> String") ("ctDay" . "CalendarTime -> Int") ("ctHour" . "CalendarTime -> Int") ("ctIsDST" . "CalendarTime -> Bool") ("ctMin" . "CalendarTime -> Int") ("ctMonth" . "CalendarTime -> Month") ("ctPicosec" . "CalendarTime -> Integer") ("ctSec" . "CalendarTime -> Int") ("ctTZ" . "CalendarTime -> Int") ("ctTZName" . "CalendarTime -> String") ("ctWDay" . "CalendarTime -> Day") ("ctYDay" . "CalendarTime -> Int") ("ctYear" . "CalendarTime -> Int") ("diffClockTimes" . "ClockTime -> ClockTime -> TimeDiff") ("formatCalendarTime" . "TimeLocale -> String -> CalendarTime -> String") ("getClockTime" . "IO ClockTime") ("tdDay" . "TimeDiff -> Int") ("tdHour" . "TimeDiff -> Int") ("tdMin" . "TimeDiff -> Int") ("tdMonth" . "TimeDiff -> Int") ("tdPicosec" . "TimeDiff -> Integer") ("tdSec" . "TimeDiff -> Int") ("tdYear" . "TimeDiff -> Int") ("toCalendarTime" . "ClockTime -> IO CalendarTime") ("toClockTime" . "CalendarTime -> ClockTime") ("toUTCTime" . "ClockTime -> CalendarTime") ("amPm" . "TimeLocale -> (String, String)") ("dateFmt" . "TimeLocale -> String") ("dateTimeFmt" . "TimeLocale -> String") ("defaultTimeLocale" . "TimeLocale") ("months" . "TimeLocale -> [(String, String)]") ("time12Fmt" . "TimeLocale -> String") ("timeFmt" . "TimeLocale -> String") ("wDays" . "TimeLocale -> [(String, String)]") ("cpuTimePrecision" . "Integer") ("getCPUTime" . "IO Integer") ("genRange" . "RandomGen g => g -> (Int, Int)") ("getStdGen" . "IO StdGen") ("getStdRandom" . "(StdGen -> (a, StdGen)) -> IO a") ("mkStdGen" . "Int -> StdGen") ("newStdGen" . "IO StdGen") ("next" . "RandomGen g => g -> (Int, g)") ("random" . "(Random a, RandomGen g) => g -> (a, g)") ("randomIO" . "Random a => IO a") ("randomR" . "(Random a, RandomGen g) => (a, a) -> g -> (a, g)") ("randomRIO" . "Random a => (a,a) -> IO a") ("randomRs" . "(Random a, RandomGen g) => (a, a) -> g -> [a]") ("randoms" . "(Random a, RandomGen g) => g -> [a]") ("setStdGen" . "StdGen -> IO ()") ("split" . "RandomGen g => g -> (g, g)")))) nil [31174 52487])
            ("haskell-doc-strategy-ids" variable (:default-value (list (quote ("par" . "Done -> Done -> Done ; [infixr 0]")) (quote ("seq" . "Done -> Done -> Done ; [infixr 1]")) (quote ("using" . "a -> Strategy a -> a ; [infixl 0]")) (quote ("demanding" . "a -> Done -> a ; [infixl 0]")) (quote ("sparking" . "a -> Done -> a ; [infixl 0]")) (quote (">||" . "Done -> Done -> Done ; [infixr 2]")) (quote (">|" . "Done -> Done -> Done ; [infixr 3]")) (quote ("$||" . "(a -> b) -> Strategy a -> a -> b ; [infixl 6]")) (quote ("$|" . "(a -> b) -> Strategy a -> a -> b ; [infixl 6]")) (quote (".|" . "(b -> c) -> Strategy b -> (a -> b) -> (a -> c) ; [infixl 9]")) (quote (".||" . "(b -> c) -> Strategy b -> (a -> b) -> (a -> c) ; [infixl 9]")) (quote ("-|" . "(a -> b) -> Strategy b -> (b -> c) -> (a -> c) ; [infixl 9]")) (quote ("-||" . "(a -> b) -> Strategy b -> (b -> c) -> (a -> c) ; [infixl 9]")) (quote ("Done" . "type Done = ()")) (quote ("Strategy" . "type Strategy a = a -> Done")) (quote ("r0" . "Strategy a")) (quote ("rwhnf" . "Eval a => Strategy a")) (quote ("rnf" . "Strategy a")) (quote ("NFData" . "class Eval a => NFData a where rnf :: Strategy a")) (quote ("NFDataIntegral" . "class (NFData a, Integral a) => NFDataIntegral a")) (quote ("NFDataOrd" . "class (NFData a, Ord a) => NFDataOrd a")) (quote ("markStrat" . "Int -> Strategy a -> Strategy a")) (quote ("seqPair" . "Strategy a -> Strategy b -> Strategy (a,b)")) (quote ("parPair" . "Strategy a -> Strategy b -> Strategy (a,b)")) (quote ("seqTriple" . "Strategy a -> Strategy b -> Strategy c -> Strategy (a,b,c)")) (quote ("parTriple" . "Strategy a -> Strategy b -> Strategy c -> Strategy (a,b,c)")) (quote ("parList" . "Strategy a -> Strategy [a]")) (quote ("parListN" . "(Integral b) => b -> Strategy a -> Strategy [a]")) (quote ("parListNth" . "Int -> Strategy a -> Strategy [a]")) (quote ("parListChunk" . "Int -> Strategy a -> Strategy [a]")) (quote ("parMap" . "Strategy b -> (a -> b) -> [a] -> [b]")) (quote ("parFlatMap" . "Strategy [b] -> (a -> [b]) -> [a] -> [b]")) (quote ("parZipWith" . "Strategy c -> (a -> b -> c) -> [a] -> [b] -> [c]")) (quote ("seqList" . "Strategy a -> Strategy [a]")) (quote ("seqListN" . "(Integral a) => a -> Strategy b -> Strategy [b]")) (quote ("seqListNth" . "Int -> Strategy b -> Strategy [b]")) (quote ("parBuffer" . "Int -> Strategy a -> [a] -> [a]")) (quote ("seqArr" . "(Ix b) => Strategy a -> Strategy (Array b a)")) (quote ("parArr" . "(Ix b) => Strategy a -> Strategy (Array b a)")) (quote ("fstPairFstList" . "(NFData a) => Strategy [(a,b)]")) (quote ("force" . "(NFData a) => a -> a ")) (quote ("sforce" . "(NFData a) => a -> b -> b")))) nil [52525 55108])
            ("haskell-doc-user-defined-ids" variable nil nil [55110 55207])
            ("haskell-doc-is-of" function (:arguments ("fn" "types")) nil [55335 55479])
            ("or" code nil nil [55647 55885])
            ("haskell-doc-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [visit] (quote ("Visit FTP home site" . haskell-doc-visit-home))) (define-key map [submit] (quote ("Submit bug report" . haskell-doc-submit-bug-report))) (define-key map [dummy] (quote ("---"))) (define-key map [make-index] (quote ("Make global fct index" . haskell-doc-make-global-fct-index))) (define-key map [global-types-on] (quote ("Toggle display of global types" . haskell-doc-show-global-types))) (define-key map [strategy-on] (quote ("Toggle display of strategy ids" . haskell-doc-show-strategy))) (define-key map [user-defined-on] (quote ("Toggle display of user defined ids" . haskell-doc-show-user-defined))) (define-key map [prelude-on] (quote ("Toggle display of prelude functions" . haskell-doc-show-prelude))) (define-key map [reserved-ids-on] (quote ("Toggle display of reserved ids" . haskell-doc-show-reserved))) (define-key map [haskell-doc-on] (quote ("Toggle haskell-doc mode" . haskell-doc-mode))) map)) nil [56093 57132])
            ("haskell-doc-install-keymap" function (:user-visible-flag t) nil [57134 58018])
            ("haskell-doc-timer" variable nil nil [58147 58177])
            ("haskell-doc-buffers" variable nil nil [58178 58210])
            ("haskell-doc-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [58227 60026])
            ("haskell-doc-toggle-var" function (:arguments ("id" "prefix")) nil [60028 60235])
            ("haskell-doc-show-global-types" function
               (:user-visible-flag t
                :arguments ("prefix"))
                nil [60277 60556])
            ("haskell-doc-show-reserved" function
               (:user-visible-flag t
                :arguments ("prefix"))
                nil [60594 60793])
            ("haskell-doc-show-prelude" function
               (:user-visible-flag t
                :arguments ("prefix"))
                nil [60830 61027])
            ("haskell-doc-show-strategy" function
               (:user-visible-flag t
                :arguments ("prefix"))
                nil [61065 61264])
            ("haskell-doc-show-user-defined" function
               (:user-visible-flag t
                :arguments ("prefix"))
                nil [61306 61517])
            ("defalias" code nil nil [61660 61714])
            ("defalias" code nil nil [61731 61780])
            ("defalias" code nil nil [61819 61878])
            ("turn-off-haskell-doc" function nil nil [61880 61993])
            ("haskell-doc-check-active" function (:user-visible-flag t) nil [62109 62650])
            ("haskell-doc-mode-print-current-symbol-info" function nil nil [62853 63557])
            ("haskell-doc-current-info" function nil nil [63839 64008])
            ("haskell-doc-ask-mouse-for-type" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [64166 64563])
            ("haskell-doc-in-code-p" function nil nil [64843 65111])
            ("haskell-doc-show-type" function
               (:user-visible-flag t
                :arguments ("sym"))
                nil [65128 66251])
            ("haskell-doc-sym-doc" function (:arguments ("sym")) nil [66254 69662])
            ("haskell-doc-grab-line" function (:arguments ("fct-and-pos")) nil [70896 71767])
            ("haskell-doc-wrapped-type-p" function nil nil [71875 73818])
            ("haskell-doc-grab" function nil nil [73847 74171])
            ("haskell-doc-string-nub-ws" function (:arguments ("str")) nil [74209 74507])
            ("haskell-doc-chop-off-context" function (:arguments ("str")) nil [75085 75293])
            ("haskell-doc-get-imenu-info" function (:arguments ("obj" "kind")) nil [75332 75787])
            ("haskell-doc-imported-list" function (:user-visible-flag t) nil [76054 76838])
            ("haskell-doc-rescan-files" function (:arguments ("filelist")) nil [76940 77493])
            ("haskell-doc-make-global-fct-index" function (:user-visible-flag t) nil [77540 77771])
            ("haskell-doc-get-global-fct-type" function
               (:user-visible-flag t
                :arguments ("sym"))
                nil [77886 78935])
            ("haskell-doc-get-and-format-fct-type" function (:arguments ("fn")) nil [79090 80195])
            ("haskell-doc" package nil nil [81324 81346]))          
      :file "haskell-doc.el"
      :pointmax 81377
      :fsize 81378
      :lastmodtime '(21542 62199 291758 854000)
      :unmatched-syntax '((close-paren 23074 . 23075) (symbol 21797 . 21813) (open-paren 21796 . 21797)))
    (semanticdb-table "inf-haskell.el"
      :file "inf-haskell.el"
      :fsize 36495
      :lastmodtime '(21542 62199 303758 854000)))
  :file "!home!edgar!.emacs.d!el-get!haskell-mode!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
