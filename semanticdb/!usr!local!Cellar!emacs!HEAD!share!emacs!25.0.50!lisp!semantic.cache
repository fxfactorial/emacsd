;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables
  (list
    (semanticdb-table "subr.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("declare-function" function (:arguments ("_fn" "_file" "_arglist" "_fileonly")) nil [1111 2631])
            ("defalias" code nil nil [2660 2681])
            ("noreturn" function (:arguments ("form")) nil [2683 2887])
            ("1value" function (:arguments ("form")) nil [2889 3127])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3129 3589])
            ("lambda" function (:arguments ("cdr")) nil [3591 4749])
            ("setq-local" function (:arguments ("var" "val")) nil [4751 4963])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [4965 5406])
            ("apply-partially" function (:arguments ("fun" "args")) nil [5408 5823])
            ("push" function (:arguments ("newelt" "place")) nil [5825 6419])
            ("pop" function (:arguments ("place")) nil [6421 7232])
            ("when" function (:arguments ("cond" "body")) nil [7234 7522])
            ("unless" function (:arguments ("cond" "body")) nil [7524 7810])
            ("dolist" function (:arguments ("spec" "body")) nil [7812 9091])
            ("dotimes" function (:arguments ("spec" "body")) nil [9093 10558])
            ("declare" function (:arguments ("_specs")) nil [10560 11135])
            ("ignore-errors" function (:arguments ("body")) nil [11137 11444])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [11475 11623])
            ("error" function (:arguments ("args")) nil [11680 12066])
            ("user-error" function (:arguments ("format" "args")) nil [12068 12594])
            ("define-error" function (:arguments ("name" "message" "parent")) nil [12596 13508])
            ("frame-configuration-p" function (:arguments ("object")) nil [13622 13877])
            ("caar" function (:arguments ("x")) nil [13903 13974])
            ("cadr" function (:arguments ("x")) nil [13976 14047])
            ("cdar" function (:arguments ("x")) nil [14049 14120])
            ("cddr" function (:arguments ("x")) nil [14122 14193])
            ("last" function (:arguments ("list" "n")) nil [14195 14612])
            ("butlast" function (:arguments ("list" "n")) nil [14614 14842])
            ("nbutlast" function (:arguments ("list" "n")) nil [14844 15121])
            ("zerop" function (:arguments ("number")) nil [15123 15353])
            ("delete-dups" function (:arguments ("list")) nil [15355 15708])
            ("delete-consecutive-dups" function (:arguments ("list" "circular")) nil [15785 16253])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [16255 18072])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [18074 18823])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [18863 19663])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [19665 19987])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [19989 20257])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [20259 20694])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [20696 21180])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [21182 21675])
            ("alist-get" function (:arguments ("key" "alist" "default" "remove")) nil [21677 22062])
            ("remove" function (:arguments ("elt" "seq")) nil [22064 22417])
            ("remq" function (:arguments ("elt" "list")) nil [22419 22750])
            ("kbd" function (:arguments ("keys")) nil [22775 23085])
            ("put" code nil nil [23086 23104])
            ("undefined" function (:user-visible-flag t) nil [23106 23561])
            ("put" code nil nil [23656 23691])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [23693 24257])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [24259 24911])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [24913 26974])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [26976 27656])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [27658 28128])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [28182 28782])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [28784 29250])
            ("keymap-canonicalize" function (:arguments ("map")) nil [29252 31121])
            ("put" code nil nil [31123 31180])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [31182 31557])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [31588 32334])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [32336 33140])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [33142 33338])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [33340 33569])
            ("key-substitution-in-progress" variable nil nil [33625 33718])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [33720 35104])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [35106 36771])
            ("global-map" variable nil nil [36920 37094])
            ("esc-map" variable nil nil [37096 37236])
            ("ctl-x-map" variable nil nil [37238 37373])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [37375 37453])
            ("defalias" code nil nil [37454 37492])
            ("define-key" code nil nil [37493 37535])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [37537 37609])
            ("defalias" code nil nil [37610 37648])
            ("define-key" code nil nil [37649 37691])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [37731 37786])
            ("listify-key-sequence" function (:arguments ("key")) nil [37788 38026])
            ("eventp" function (:arguments ("obj")) nil [38028 38229])
            ("event-modifiers" function (:arguments ("event")) nil [38231 39525])
            ("event-basic-type" function (:arguments ("event")) nil [39527 40295])
            ("mouse-movement-p" function (:arguments ("object")) nil [40297 40430])
            ("mouse-event-p" function (:arguments ("object")) nil [40432 40650])
            ("event-start" function (:arguments ("event")) nil [40652 41812])
            ("event-end" function (:arguments ("event")) nil [41814 42132])
            ("event-click-count" function (:arguments ("event")) nil [42134 42344])
            ("posnp" function (:arguments ("obj")) nil [42401 42701])
            ("posn-window" function (:arguments ("position")) nil [42735 42917])
            ("posn-area" function (:arguments ("position")) nil [42919 43243])
            ("posn-point" function (:arguments ("position")) nil [43245 43711])
            ("posn-set-point" function (:arguments ("position")) nil [43713 44033])
            ("posn-x-y" function (:arguments ("position")) nil [44035 44288])
            ("declare-function" code nil nil [44290 44356])
            ("posn-col-row" function (:arguments ("position")) nil [44358 45834])
            ("posn-actual-col-row" function (:arguments ("position")) nil [45836 46426])
            ("posn-timestamp" function (:arguments ("position")) nil [46428 46616])
            ("posn-string" function (:arguments ("position")) nil [46618 46977])
            ("posn-image" function (:arguments ("position")) nil [46979 47219])
            ("posn-object" function (:arguments ("position")) nil [47221 47590])
            ("posn-object-x-y" function (:arguments ("position")) nil [47592 47879])
            ("posn-object-width-height" function (:arguments ("position")) nil [47881 48141])
            ("define-obsolete-function-alias" code nil nil [48184 48249])
            ("define-obsolete-function-alias" code nil nil [48250 48323])
            ("define-obsolete-function-alias" code nil nil [48324 48388])
            ("define-obsolete-function-alias" code nil nil [48389 48460])
            ("define-obsolete-function-alias" code nil nil [48461 48534])
            ("define-obsolete-function-alias" code nil nil [48535 48607])
            ("make-obsolete" code nil nil [48609 48675])
            ("make-obsolete" code nil nil [48676 48725])
            ("insert-string" function (:arguments ("args")) nil [48727 49045])
            ("makehash" function (:arguments ("test")) nil [49047 49167])
            ("log10" function (:arguments ("x")) nil [49169 49278])
            ("defalias" code nil nil [49326 49360])
            ("make-obsolete" code nil nil [49361 49415])
            ("defalias" code nil nil [49416 49452])
            ("make-obsolete" code nil nil [49453 49509])
            ("make-obsolete" code nil nil [49510 49617])
            ("set-advertised-calling-convention" code nil nil [49618 49719])
            ("set-advertised-calling-convention" code nil nil [49720 49788])
            ("set-advertised-calling-convention" code nil nil [49789 49874])
            ("set-advertised-calling-convention" code nil nil [49875 49944])
            ("set-advertised-calling-convention" code nil nil [49945 50014])
            ("make-obsolete-variable" code nil nil [50419 50494])
            ("make-obsolete-variable" code nil nil [50495 50574])
            ("make-obsolete-variable" code nil nil [50575 50642])
            ("make-obsolete-variable" code nil nil [50643 50708])
            ("make-obsolete-variable" code nil nil [50709 50770])
            ("make-obsolete-variable" code nil nil [50771 50842])
            ("make-obsolete-variable" code nil nil [50843 50908])
            ("make-obsolete-variable" code nil nil [50909 50970])
            ("make-obsolete-variable" code nil nil [50971 51046])
            ("make-obsolete-variable" code nil nil [51047 51124])
            ("make-obsolete-variable" code nil nil [51125 51204])
            ("make-obsolete-variable" code nil nil [51205 51282])
            ("make-obsolete-variable" code nil nil [51283 51362])
            ("make-obsolete-variable" code nil nil [51363 51452])
            ("make-obsolete-variable" code nil nil [51453 51528])
            ("make-obsolete-variable" code nil nil [51529 51610])
            ("make-obsolete-variable" code nil nil [51611 51694])
            ("make-obsolete-variable" code nil nil [51695 51790])
            ("make-obsolete-variable" code nil nil [51791 51878])
            ("make-obsolete-variable" code nil nil [51879 51960])
            ("make-obsolete-variable" code nil nil [51961 52048])
            ("make-obsolete-variable" code nil nil [52049 52140])
            ("make-obsolete-variable" code nil nil [52141 52206])
            ("make-obsolete-variable" code nil nil [52207 52272])
            ("make-obsolete-variable" code nil nil [52273 52376])
            ("make-obsolete-variable" code nil nil [52377 52470])
            ("make-obsolete-variable" code nil nil [52471 52534])
            ("make-obsolete-variable" code nil nil [52535 52675])
            ("make-obsolete-variable" code nil nil [52677 52741])
            ("make-obsolete-variable" code nil nil [52742 52825])
            ("make-obsolete-variable" code nil nil [52826 52898])
            ("make-obsolete-variable" code nil nil [52899 52975])
            ("make-obsolete" code nil nil [52976 53032])
            ("make-obsolete" code nil nil [53033 53093])
            ("make-obsolete" code nil nil [53095 53149])
            ("make-obsolete" code nil nil [53150 53206])
            ("define-obsolete-variable-alias" code nil nil [53245 53332])
            ("define-obsolete-variable-alias" code nil nil [53334 53427])
            ("define-obsolete-variable-alias" code nil nil [53428 53521])
            ("make-obsolete-variable" code nil nil [53767 53831])
            ("defvaralias" code nil nil [53833 53890])
            ("defalias" code nil nil [53963 54007])
            ("defalias" code nil nil [54008 54052])
            ("defalias" code nil nil [54053 54086])
            ("defalias" code nil nil [54087 54120])
            ("defalias" code nil nil [54121 54156])
            ("defalias" code nil nil [54157 54183])
            ("defalias" code nil nil [54184 54210])
            ("defalias" code nil nil [54211 54233])
            ("defalias" code nil nil [54259 54298])
            ("defalias" code nil nil [54299 54353])
            ("defalias" code nil nil [54354 54424])
            ("defalias" code nil nil [54425 54497])
            ("defalias" code nil nil [54498 54541])
            ("defalias" code nil nil [54542 54586])
            ("defalias" code nil nil [54587 54620])
            ("defalias" code nil nil [54621 54654])
            ("defalias" code nil nil [54686 54729])
            ("defalias" code nil nil [54730 54779])
            ("defalias" code nil nil [54781 54834])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [54873 57002])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [57004 58672])
            ("letrec" function (:arguments ("binders" "body")) nil [58674 59303])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [59305 62358])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [62360 65707])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [65710 67029])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [67031 68243])
            ("delay-mode-hooks" variable nil nil [68265 68359])
            ("delayed-mode-hooks" variable nil nil [68360 68441])
            ("make-variable-buffer-local" code nil nil [68442 68490])
            ("put" code nil nil [68491 68533])
            ("change-major-mode-after-body-hook" variable nil nil [68535 68649])
            ("after-change-major-mode-hook" variable nil nil [68651 68753])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [68755 69638])
            ("delay-mode-hooks" function (:arguments ("body")) nil [69640 70041])
            ("derived-mode-p" function (:arguments ("modes")) nil [70102 70415])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [70606 70799])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [70801 73486])
            ("autoloadp" function (:arguments ("object")) nil [73508 73610])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [74094 75301])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [75303 76709])
            ("process-lines" function (:arguments ("program" "args")) nil [76734 77339])
            ("process-live-p" function (:arguments ("process")) nil [77341 77654])
            ("make-obsolete" code nil nil [77674 77799])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [77800 78144])
            ("process-kill-buffer-query-function" function nil nil [78146 78565])
            ("add-hook" code nil nil [78567 78642])
            ("process-get" function (:arguments ("process" "propname")) nil [78673 78885])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [78887 79126])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [79166 79216])
            ("read-key-delay" variable (:default-value 0.01) nil [79218 79246])
            ("read-key" function (:arguments ("prompt")) nil [79295 82001])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (function delete-minibuffer-contents)) map)) nil [82003 82340])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [82342 85054])
            ("read-number" function (:arguments ("prompt" "default")) nil [85056 86126])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [86128 87867])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [87869 90512])
            ("declare-function" code nil nil [90552 90631])
            ("y-or-n-p" function (:arguments ("prompt")) nil [90633 94111])
            ("atomic-change-group" function (:arguments ("body")) nil [94142 95348])
            ("prepare-change-group" function (:arguments ("buffer")) nil [95350 96826])
            ("activate-change-group" function (:arguments ("handle")) nil [96828 97066])
            ("accept-change-group" function (:arguments ("handle")) nil [97068 97359])
            ("cancel-change-group" function (:arguments ("handle")) nil [97361 98532])
            ("define-obsolete-function-alias" code nil nil [98590 98672])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [98674 100174])
            ("copy-overlay" function (:arguments ("o")) nil [100203 100777])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [100779 101787])
            ("suspend-hook" variable nil nil [101809 101893])
            ("suspend-resume-hook" variable nil nil [101895 101993])
            ("temp-buffer-show-hook" variable nil nil [101995 102211])
            ("temp-buffer-setup-hook" variable nil nil [102213 102444])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [102446 102821])
            ("buffer-narrowed-p" function nil nil [102854 102988])
            ("find-tag-default-bounds" function nil nil [102990 103993])
            ("find-tag-default" function nil nil [103995 104261])
            ("find-tag-default-as-regexp" function nil nil [104263 104698])
            ("find-tag-default-as-symbol-regexp" function nil nil [104700 105259])
            ("play-sound" function (:arguments ("sound")) nil [105261 106080])
            ("declare-function" code nil nil [106082 106138])
            ("shell-quote-argument" function (:arguments ("argument")) nil [106140 108285])
            ("string-or-null-p" function (:arguments ("object")) nil [108287 108424])
            ("booleanp" function (:arguments ("object")) nil [108426 108584])
            ("special-form-p" function (:arguments ("object")) nil [108586 108831])
            ("macrop" function (:arguments ("object")) nil [108833 109065])
            ("field-at-pos" function (:arguments ("pos")) nil [109067 109337])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [109339 109702])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [109704 110514])
            ("yank-handled-properties" variable nil nil [110621 110653])
            ("yank-excluded-properties" variable nil nil [110654 110687])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [110689 111478])
            ("yank-undo-function" variable nil nil [111480 111507])
            ("insert-for-yank" function (:arguments ("string")) nil [111509 111868])
            ("insert-for-yank-1" function (:arguments ("string")) nil [111870 114220])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [114222 114707])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [114709 115395])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [115397 115709])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [115848 116286])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [116324 117308])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [117310 117802])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [117804 119445])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [119447 119996])
            ("track-mouse" function (:arguments ("body")) nil [120051 120357])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [120359 120747])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [120749 121269])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [121271 121831])
            ("with-selected-window" function (:arguments ("window" "body")) nil [121833 122971])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [122973 123714])
            ("save-window-excursion" function (:arguments ("body")) nil [123716 124535])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [124537 125932])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [125985 128438])
            ("with-temp-file" function (:arguments ("file" "body")) nil [128440 129135])
            ("with-temp-message" function (:arguments ("message" "body")) nil [129137 130064])
            ("with-temp-buffer" function (:arguments ("body")) nil [130066 130625])
            ("with-silent-modifications" function (:arguments ("body")) nil [130627 131604])
            ("with-output-to-string" function (:arguments ("body")) nil [131606 132051])
            ("with-local-quit" function (:arguments ("body")) nil [132053 132808])
            ("while-no-input" function (:arguments ("body")) nil [132810 133310])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [133312 133865])
            ("define-obsolete-function-alias" code nil nil [133867 133962])
            ("with-demoted-errors" function (:arguments ("format" "body")) nil [133964 134901])
            ("combine-after-change-calls" function (:arguments ("body")) nil [134903 135598])
            ("with-case-table" function (:arguments ("table" "body")) nil [135600 136121])
            ("with-file-modes" function (:arguments ("modes" "body")) nil [136123 136548])
            ("save-match-data-internal" variable nil nil [136582 136615])
            ("save-match-data" function (:arguments ("body")) nil [136873 137553])
            ("match-string" function (:arguments ("num" "string")) nil [137555 138200])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [138202 138926])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [138929 139578])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [139581 140766])
            ("looking-at-p" function (:arguments ("regexp")) nil [140768 140946])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [140948 141168])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [141170 143080])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [143102 143455])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls" "trim")) nil [143717 146833])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [146835 147396])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [147398 148034])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [148068 148472])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [148474 151053])
            ("string-prefix-p" function (:arguments ("prefix" "string" "ignore-case")) nil [151056 151451])
            ("string-suffix-p" function (:arguments ("suffix" "string" "ignore-case")) nil [151453 151862])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [151864 152647])
            ("load-history-regexp" function (:arguments ("file")) nil [152687 153323])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [153325 153761])
            ("put" code nil nil [153763 153809])
            ("eval-after-load" function (:arguments ("file" "form")) nil [153810 157691])
            ("with-eval-after-load" function (:arguments ("file" "body")) nil [157693 157973])
            ("after-load-functions" variable nil nil [157975 158148])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [158150 159820])
            ("eval-next-after-load" function (:arguments ("file")) nil [159822 160122])
            ("display-delayed-warnings" function nil nil [160126 160393])
            ("collapse-delayed-warnings" function nil nil [160395 161074])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [161204 161544])
            ("delay-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [161546 161801])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [161830 162173])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [162175 162399])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [162423 163059])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [163061 163381])
            ("syntax-after" function (:arguments ("pos")) nil [163383 163756])
            ("syntax-class" function (:arguments ("syntax")) nil [163758 164110])
            ("forward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [164157 164740])
            ("forward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [164755 165304])
            ("forward-same-syntax" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [165325 165807])
            ("text-clone--maintaining" variable nil nil [165829 165865])
            ("text-clone--maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [165867 167933])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [167935 170183])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [170291 171869])
            ("called-interactively-p-functions" variable nil nil [171872 172289])
            ("internal--funcall-interactively" variable
               (:constant-flag t
                :default-value (symbol-function (quote funcall-interactively)))
                nil [172291 172376])
            ("called-interactively-p" function (:arguments ("kind")) nil [172378 176559])
            ("interactive-p" function nil nil [176561 177571])
            ("internal-push-keymap" function (:arguments ("keymap" "symbol")) nil [177573 177918])
            ("internal-pop-keymap" function (:arguments ("keymap" "symbol")) nil [177920 178228])
            ("define-obsolete-function-alias" code nil nil [178230 178317])
            ("set-transient-map" function (:arguments ("map" "keep-pred" "on-exit")) nil [178319 180805])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [181388 182155])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [182157 184002])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [184004 184503])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [184505 184622])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [184624 186330])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [186332 186487])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [186489 187593])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [187630 187789])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-_+ ]?snapshot$" . -4) ("^[-_+]$" . -4) ("^[-_+ ]?\\(cvs\\|git\\|bzr\\|svn\\|hg\\|darcs\\)$" . -4) ("^[-_+ ]?alpha$" . -3) ("^[-_+ ]?beta$" . -2) ("^[-_+ ]?\\(pre\\|rc\\)$" . -1))))
                nil [187792 189287])
            ("version-to-list" function (:arguments ("ver")) nil [189290 191694])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [191697 192528])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [192531 193330])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [193333 194118])
            ("version-list-not-zero" function (:arguments ("lst")) nil [194120 194430])
            ("version<" function (:arguments ("v1" "v2")) nil [194433 194937])
            ("version<=" function (:arguments ("v1" "v2")) nil [194939 195457])
            ("version=" function (:arguments ("v1" "v2")) nil [195459 195953])
            ("package--builtin-versions" variable (:default-value (purecopy (\` ((emacs \, (version-to-list emacs-version)))))) nil [195955 196332])
            ("package--description-file" function (:arguments ("dir")) nil [196334 196665])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [196679 196741])
            ("when" code nil nil [196903 197028])
            ("unmsys--file-name" function (:arguments ("file")) nil [197161 197648]))          
      :file "subr.el.gz"
      :pointmax 197673
      :fsize 58974
      :lastmodtime '(21573 41944 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "custom.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("widget" include nil nil [1248 1265])
            ("custom-define-hook" variable nil nil [1267 1416])
            ("custom-dont-initialize" variable nil nil [1418 1601])
            ("custom-current-group-alist" variable nil nil [1603 1716])
            ("custom-initialize-default" function (:arguments ("symbol" "exp")) nil [1746 2209])
            ("custom-initialize-set" function (:arguments ("symbol" "exp")) nil [2211 2786])
            ("custom-initialize-reset" function (:arguments ("symbol" "exp")) nil [2788 3555])
            ("custom-initialize-changed" function (:arguments ("symbol" "exp")) nil [3557 4335])
            ("custom-delayed-init-variables" variable nil nil [4337 4434])
            ("custom-initialize-delay" function (:arguments ("symbol" "_value")) nil [4436 5560])
            ("custom-declare-variable" function (:arguments ("symbol" "default" "doc" "args")) nil [5562 8161])
            ("defcustom" function (:arguments ("symbol" "standard" "doc" "args")) nil [8163 14297])
            ("defface" function (:arguments ("face" "spec" "doc" "args")) nil [14325 17265])
            ("custom-current-group" function nil nil [17294 17383])
            ("custom-declare-group" function (:arguments ("symbol" "members" "doc" "args")) nil [17385 18446])
            ("defgroup" function (:arguments ("symbol" "members" "doc" "args")) nil [18448 19608])
            ("custom-add-to-group" function (:arguments ("group" "option" "widget")) nil [19610 19956])
            ("custom-group-of-mode" function (:arguments ("mode")) nil [19958 20360])
            ("custom-handle-all-keywords" function (:arguments ("symbol" "args" "type")) nil [20379 20969])
            ("custom-handle-keyword" function (:arguments ("symbol" "keyword" "value" "type")) nil [20971 21682])
            ("custom-add-dependencies" function (:arguments ("symbol" "value")) nil [21684 22437])
            ("custom-add-option" function (:arguments ("symbol" "option")) nil [22439 22890])
            ("defalias" code nil nil [22891 22947])
            ("custom-add-link" function (:arguments ("symbol" "widget")) nil [22949 23185])
            ("custom-add-version" function (:arguments ("symbol" "version")) nil [23187 23337])
            ("custom-add-package-version" function (:arguments ("symbol" "version")) nil [23339 23513])
            ("custom-add-load" function (:arguments ("symbol" "load")) nil [23515 23811])
            ("custom-autoload" function (:arguments ("symbol" "load" "noset")) nil [23813 24099])
            ("custom-variable-p" function (:arguments ("variable")) nil [24101 24534])
            ("define-obsolete-function-alias" code nil nil [24536 24611])
            ("custom-note-var-changed" function (:arguments ("variable")) nil [24613 24908])
            ("custom-load-recursion" variable nil nil [25051 25127])
            ("custom-load-symbol" function (:arguments ("symbol")) nil [25129 26388])
            ("custom-local-buffer" variable nil nil [26391 26711])
            ("put" code nil nil [26712 26757])
            ("custom-set-default" function (:arguments ("variable" "value")) nil [26759 27140])
            ("custom-set-minor-mode" function (:arguments ("variable" "value")) nil [27142 27566])
            ("custom-quote" function (:arguments ("sexp")) nil [27568 27906])
            ("customize-mark-to-save" function (:arguments ("symbol")) nil [27908 29071])
            ("customize-mark-as-set" function (:arguments ("symbol")) nil [29073 30228])
            ("custom-reevaluate-setting" function (:arguments ("symbol")) nil [30230 30702])
            ("custom-known-themes" variable (:default-value (quote (user changed))) nil [32529 32917])
            ("custom-theme-p" function (:arguments ("theme")) nil [32919 33028])
            ("custom-check-theme" function (:arguments ("theme")) nil [33030 33208])
            ("custom-push-theme" function (:arguments ("prop" "symbol" "theme" "mode" "value")) nil [33210 35406])
            ("custom-fix-face-spec" function (:arguments ("spec")) nil [35408 36178])
            ("custom-set-variables" function (:arguments ("args")) nil [36181 36792])
            ("custom-theme-set-variables" function (:arguments ("theme" "args")) nil [36794 39469])
            ("custom--sort-vars-table" variable nil nil [39471 39503])
            ("custom--sort-vars-result" variable nil nil [39504 39537])
            ("custom--sort-vars" function (:arguments ("vars")) nil [39539 41071])
            ("custom--sort-vars-1" function (:arguments ("sym" "_ignored")) nil [41073 41657])
            ("deftheme" function (:arguments ("theme" "doc" "ignored")) nil [42253 42874])
            ("custom-declare-theme" function (:arguments ("theme" "feature" "doc" "ignored")) nil [42876 43364])
            ("custom-make-theme-feature" function (:arguments ("theme")) nil [43366 43871])
            ("custom-theme-directory" variable (:default-value user-emacs-directory) nil [43895 44242])
            ("custom-theme-load-path" variable (:default-value (list (quote custom-theme-directory) t)) nil [44244 45045])
            ("custom--inhibit-theme-enable" variable nil nil [45047 45333])
            ("provide-theme" function (:arguments ("theme")) nil [45335 45733])
            ("custom-safe-themes" variable (:default-value (quote (default))) nil [45735 46355])
            ("load-theme" function
               (:user-visible-flag t
                :arguments ("theme" "no-confirm" "no-enable"))
                nil [46357 49233])
            ("custom-theme-load-confirm" function (:arguments ("hash")) nil [49235 49985])
            ("custom-theme-name-valid-p" function (:arguments ("name")) nil [49987 50252])
            ("custom-available-themes" function nil nil [50254 51134])
            ("custom-theme--load-path" function nil nil [51136 51455])
            ("enable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [51502 52738])
            ("custom-enabled-themes" variable nil nil [52740 54050])
            ("custom-theme-enabled-p" function (:arguments ("theme")) nil [54052 54170])
            ("disable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [54172 55771])
            ("declare-function" code nil nil [55813 55907])
            ("custom--frame-color-default" function (:arguments ("frame" "attribute" "resource-attr" "resource-class" "tty-default" "x-default")) nil [55909 56269])
            ("custom-variable-theme-value" function (:arguments ("variable")) nil [56271 56664])
            ("custom-theme-recalc-variable" function (:arguments ("variable")) nil [56666 57121])
            ("custom-theme-recalc-face" function (:arguments ("face")) nil [57123 57543])
            ("custom-theme-reset-variables" function (:arguments ("theme" "args")) nil [57760 58131])
            ("custom-reset-variables" function (:arguments ("args")) nil [58133 58474])
            ("custom" package nil nil [58490 58507]))          
      :file "custom.el.gz"
      :pointmax 58533
      :fsize 17111
      :lastmodtime '(21573 41943 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "cus-face.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [941 972])
            ("custom-declare-face" function (:arguments ("face" "spec" "doc" "args")) nil [997 1433])
            ("custom-face-attributes" variable
               (:constant-flag t
                :default-value (quote ((:family (string :tag "Font Family" :help-echo "Font family or fontset alias name.")) (:foundry (string :tag "Font Foundry" :help-echo "Font foundry name.")) (:width (choice :tag "Width" :help-echo "Font width." :value normal (const :tag "compressed" condensed) (const :tag "condensed" condensed) (const :tag "demiexpanded" semi-expanded) (const :tag "expanded" expanded) (const :tag "extracondensed" extra-condensed) (const :tag "extraexpanded" extra-expanded) (const :tag "medium" normal) (const :tag "narrow" condensed) (const :tag "normal" normal) (const :tag "regular" normal) (const :tag "semicondensed" semi-condensed) (const :tag "semiexpanded" semi-expanded) (const :tag "ultracondensed" ultra-condensed) (const :tag "ultraexpanded" ultra-expanded) (const :tag "wide" extra-expanded))) (:height (choice :tag "Height" :help-echo "Face's font height." :value 1.0 (integer :tag "Height in 1/10 pt") (number :tag "Scale" 1.0))) (:weight (choice :tag "Weight" :help-echo "Font weight." :value normal (const :tag "black" ultra-bold) (const :tag "bold" bold) (const :tag "book" semi-light) (const :tag "demibold" semi-bold) (const :tag "extralight" extra-light) (const :tag "extrabold" extra-bold) (const :tag "heavy" extra-bold) (const :tag "light" light) (const :tag "medium" normal) (const :tag "normal" normal) (const :tag "regular" normal) (const :tag "semibold" semi-bold) (const :tag "semilight" semi-light) (const :tag "ultralight" ultra-light) (const :tag "ultrabold" ultra-bold) (const :tag "thin" thin))) (:slant (choice :tag "Slant" :help-echo "Font slant." :value normal (const :tag "italic" italic) (const :tag "oblique" oblique) (const :tag "normal" normal) (const :tag "roman" roman))) (:underline (choice :tag "Underline" :help-echo "Control text underlining." (const :tag "Off" nil) (list :tag "On" :value (:color foreground-color :style line) (const :format "" :value :color) (choice :tag "Color" (const :tag "Foreground Color" foreground-color) color) (const :format "" :value :style) (choice :tag "Style" (const :tag "Line" line) (const :tag "Wave" wave)))) (lambda (real-value) (and real-value (let ((color (or (and (consp real-value) (plist-get real-value :color)) (and (stringp real-value) real-value) (quote foreground-color))) (style (or (and (consp real-value) (plist-get real-value :style)) (quote line)))) (list :color color :style style)))) (lambda (cus-value) (and cus-value (let ((color (plist-get cus-value :color)) (style (plist-get cus-value :style))) (cond ((eq style (quote line)) (if (eq color (quote foreground-color)) t color)) (t (\` (:color (\, color) :style (\, style))))))))) (:overline (choice :tag "Overline" :help-echo "Control text overlining." (const :tag "Off" nil) (const :tag "On" t) (color :tag "Colored"))) (:strike-through (choice :tag "Strike-through" :help-echo "Control text strike-through." (const :tag "Off" nil) (const :tag "On" t) (color :tag "Colored"))) (:box (choice :tag "Box around text" :help-echo "Control box around text." (const :tag "Off" nil) (list :tag "Box" :value (:line-width 2 :color "grey75" :style released-button) (const :format "" :value :line-width) (integer :tag "Width") (const :format "" :value :color) (choice :tag "Color" (const :tag "*" nil) color) (const :format "" :value :style) (choice :tag "Style" (const :tag "Raised" released-button) (const :tag "Sunken" pressed-button) (const :tag "None" nil)))) (lambda (real-value) (and real-value (let ((lwidth (or (and (consp real-value) (plist-get real-value :line-width)) (and (integerp real-value) real-value) 1)) (color (or (and (consp real-value) (plist-get real-value :color)) (and (stringp real-value) real-value) nil)) (style (and (consp real-value) (plist-get real-value :style)))) (list :line-width lwidth :color color :style style)))) (lambda (cus-value) (and cus-value (let ((lwidth (plist-get cus-value :line-width)) (color (plist-get cus-value :color)) (style (plist-get cus-value :style))) (cond ((and (null color) (null style)) lwidth) ((and (null lwidth) (null style)) color) (t (nconc (and lwidth (\` (:line-width (\, lwidth)))) (and color (\` (:color (\, color)))) (and style (\` (:style (\, style))))))))))) (:inverse-video (choice :tag "Inverse-video" :help-echo "Control whether text should be in inverse-video." (const :tag "Off" nil) (const :tag "On" t))) (:foreground (color :tag "Foreground" :help-echo "Set foreground color (name or #RRGGBB hex spec).")) (:distant-foreground (color :tag "Distant Foreground" :help-echo "Set distant foreground color (name or #RRGGBB hex spec).")) (:background (color :tag "Background" :help-echo "Set background color (name or #RRGGBB hex spec).")) (:stipple (choice :tag "Stipple" :help-echo "Background bit-mask" (const :tag "None" nil) (file :tag "File" :help-echo "Name of bitmap file." :must-match t))) (:inherit (repeat :tag "Inherit" :help-echo "List of faces to inherit attributes from." (face :Tag "Face" default)) (lambda (real-value) (cond ((or (null real-value) (eq real-value (quote unspecified))) nil) ((symbolp real-value) (list real-value)) (t real-value))) (lambda (cus-value) (if (and (consp cus-value) (null (cdr cus-value))) (car cus-value) cus-value))))))
                nil [1457 8954])
            ("custom-face-attributes-get" function (:arguments ("face" "frame")) nil [8956 9591])
            ("custom-set-faces" function (:arguments ("args")) nil [9612 10034])
            ("custom-theme-set-faces" function (:arguments ("theme" "args")) nil [10036 12339])
            ("custom-theme-reset-faces" function (:arguments ("theme" "args")) nil [12501 12857])
            ("custom-reset-faces" function (:arguments ("args")) nil [12859 13175])
            ("cus-face" package nil nil [13191 13210]))          
      :file "cus-face.el.gz"
      :pointmax 13238
      :fsize 3966
      :lastmodtime '(21573 41943 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!Cellar!emacs!HEAD!share!emacs!25.0.50!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
