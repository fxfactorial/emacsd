;; Object symref/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "symref/"
  :tables
  (list
    (semanticdb-table "list.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/symref" include nil nil [1256 1282])
            ("semantic/complete" include nil nil [1283 1311])
            ("semantic/senator" include nil nil [1312 1339])
            ("pulse" include nil nil [1340 1356])
            ("semantic-symref" function (:user-visible-flag t) nil [1384 2262])
            ("semantic-symref-symbol" function
               (:user-visible-flag t
                :arguments ("sym"))
                nil [2279 2954])
            ("semantic-symref-regexp" function
               (:user-visible-flag t
                :arguments ("sym"))
                nil [2971 3648])
            ("semantic-symref-produce-list-on-results" function (:arguments ("res" "str")) nil [3651 4124])
            ("semantic-symref-results-mode" customgroup (:user-visible-flag t) nil [4146 4234])
            ("semantic-symref-results-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (suppress-keymap km) (define-key km "	" (quote forward-button)) (define-key km "\303-i" (quote backward-button)) (define-key km " " (quote push-button)) (define-key km "-" (quote semantic-symref-list-toggle-showing)) (define-key km "=" (quote semantic-symref-list-toggle-showing)) (define-key km "+" (quote semantic-symref-list-toggle-showing)) (define-key km "n" (quote semantic-symref-list-next-line)) (define-key km "p" (quote semantic-symref-list-prev-line)) (define-key km "q" (quote semantic-symref-hide-buffer)) (define-key km "" (quote semantic-symref-list-expand-all)) (define-key km "" (quote semantic-symref-list-contract-all)) (define-key km "R" (quote semantic-symref-list-rename-open-hits)) (define-key km "(" (quote semantic-symref-list-create-macro-on-open-hit)) (define-key km "E" (quote semantic-symref-list-call-macro-on-open-hits)) km)) nil [4236 5204])
            ("semantic-symref-list-menu-entries" variable (:default-value (list "Symref" (semantic-menu-item ["Toggle Line Open" semantic-symref-list-toggle-showing :active t :help "Toggle the current line open or closed."]) (semantic-menu-item ["Expand All Entries" semantic-symref-list-expand-all :active t :help "Expand every expandable entry."]) (semantic-menu-item ["Contract All Entries" semantic-symref-list-contract-all :active t :help "Close every expandable entry."]) (semantic-menu-item ["Rename Symbol in Open hits" semantic-symref-list-rename-open-hits :active t :help "Rename the searched for symbol in all hits that are currently open."]))) nil [5206 6002])
            ("semantic-symref-list-menu" variable nil nil [6004 6101])
            ("easy-menu-define" code nil nil [6103 6239])
            ("semantic-symref-auto-expand-results" variable nil nil [6241 6405])
            ("semantic-symref-results-mode-hook" variable nil nil [6407 6566])
            ("semantic-symref-current-results" variable nil nil [6568 6662])
            ("semantic-symref-results-mode" function
               (:user-visible-flag t
                :arguments ("results"))
                nil [6664 7350])
            ("semantic-symref-hide-buffer" function (:user-visible-flag t) nil [7352 7468])
            ("semantic-symref-results-summary-function" variable
               (:user-visible-flag t
                :default-value (quote semantic-format-tag-prototype))
                nil [7470 7751])
            ("semantic-symref-results-dump" function (:arguments ("results")) nil [7753 8852])
            ("semantic-symref-list-toggle-showing" function (:user-visible-flag t) nil [8898 9137])
            ("semantic-symref-rb-toggle-expand-tag" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [9139 10624])
            ("semantic-symref-rb-goto-file" function (:arguments ("button")) nil [10626 11039])
            ("semantic-symref-rb-goto-tag" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [11042 11502])
            ("semantic-symref-rb-goto-match" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [11504 12029])
            ("semantic-symref-list-next-line" function (:user-visible-flag t) nil [12031 12180])
            ("semantic-symref-list-prev-line" function (:user-visible-flag t) nil [12182 12332])
            ("semantic-symref-list-expand-all" function (:user-visible-flag t) nil [12334 12672])
            ("semantic-symref-list-contract-all" function (:user-visible-flag t) nil [12674 13014])
            ("semantic-symref-list-on-hit-p" function nil nil [13084 13441])
            ("semantic-symref-list-create-macro-on-open-hit" function (:user-visible-flag t) nil [13552 14869])
            ("semantic-symref-list-call-macro-on-open-hits" function (:user-visible-flag t) nil [14871 15434])
            ("semantic-symref-list-rename-open-hits" function
               (:user-visible-flag t
                :arguments ("newname"))
                nil [15529 16064])
            ("semantic-symref-list-map-open-hits" function (:arguments ("function")) nil [16179 17524])
            ("semantic-symref-list-update-open-hits" function nil nil [17526 18025])
            ("semantic/symref/list" package nil nil [18027 18058]))          
      :file "list.el"
      :pointmax 18228
      :fsize 18227
      :lastmodtime '(21573 25737 0 0)
      :unmatched-syntax nil))
  :file "!Users!Edgar!.emacs.d!cedet!lisp!cedet!semantic!symref!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
