;; Object company-mode/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "company-mode/"
  :tables
  (list
    (semanticdb-table "company.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2611 2628])
            ("newcomment" include nil nil [2629 2650])
            ("add-to-list" code nil nil [2680 2752])
            ("add-to-list" code nil nil [2753 2823])
            ("add-to-list" code nil nil [2824 2902])
            ("add-to-list" code nil nil [2903 2954])
            ("add-to-list" code nil nil [2955 3014])
            ("add-to-list" code nil nil [3015 3079])
            ("add-to-list" code nil nil [3080 3137])
            ("unless" code nil nil [3222 3632])
            ("company" customgroup (:user-visible-flag t) nil [3635 3763])
            ("company-tooltip" variable
               (:default-value (quote ((default :foreground "black") (((class color) (min-colors 88) (background light)) (:background "cornsilk")) (((class color) (min-colors 88) (background dark)) (:background "yellow"))))
                :type "face")
                nil [3765 4027])
            ("company-tooltip-selection" variable
               (:default-value (quote ((default :inherit company-tooltip) (((class color) (min-colors 88) (background light)) (:background "light blue")) (((class color) (min-colors 88) (background dark)) (:background "orange1")) (t (:background "green"))))
                :type "face")
                nil [4029 4356])
            ("company-tooltip-search" variable
               (:default-value (quote ((default :inherit company-tooltip-selection)))
                :type "face")
                nil [4358 4492])
            ("company-tooltip-mouse" variable
               (:default-value (quote ((default :inherit highlight)))
                :type "face")
                nil [4494 4611])
            ("company-tooltip-common" variable
               (:default-value (quote ((default :inherit company-tooltip) (((background light)) :foreground "darkred") (((background dark)) :foreground "red")))
                :type "face")
                nil [4613 4844])
            ("company-tooltip-common-selection" variable
               (:default-value (quote ((default :inherit company-tooltip-selection) (((background light)) :foreground "darkred") (((background dark)) :foreground "red")))
                :type "face")
                nil [4846 5106])
            ("company-tooltip-annotation" variable
               (:default-value (quote ((default :inherit company-tooltip) (((background light)) :foreground "firebrick4") (((background dark)) :foreground "red4")))
                :type "face")
                nil [5108 5340])
            ("company-scrollbar-fg" variable
               (:default-value (quote ((((background light)) :background "darkred") (((background dark)) :background "red")))
                :type "face")
                nil [5342 5523])
            ("company-scrollbar-bg" variable
               (:default-value (quote ((default :inherit company-tooltip) (((background light)) :background "wheat") (((background dark)) :background "gold")))
                :type "face")
                nil [5525 5749])
            ("company-preview" variable
               (:default-value (quote ((((background light)) :inherit company-tooltip-selection) (((background dark)) :background "blue4" :foreground "wheat")))
                :type "face")
                nil [5751 5962])
            ("company-preview-common" variable
               (:default-value (quote ((((background light)) :inherit company-tooltip-selection) (((background dark)) :inherit company-preview :foreground "red")))
                :type "face")
                nil [5964 6204])
            ("company-preview-search" variable
               (:default-value (quote ((((background light)) :inherit company-tooltip-common-selection) (((background dark)) :inherit company-preview :background "blue1")))
                :type "face")
                nil [6206 6457])
            ("company-echo" variable (:type "face") nil [6459 6533])
            ("company-echo-common" variable
               (:default-value (quote ((((background dark)) (:foreground "firebrick1")) (((background light)) (:background "firebrick4"))))
                :type "face")
                nil [6535 6739])
            ("company-frontends-set" function (:arguments ("variable" "value")) nil [6741 7580])
            ("company-frontends" variable (:default-value (quote (company-pseudo-tooltip-unless-just-one-frontend company-preview-if-just-one-frontend company-echo-metadata-frontend))) nil [7582 9309])
            ("company-tooltip-limit" variable (:default-value 10) nil [9311 9417])
            ("company-tooltip-minimum" variable (:default-value 6) nil [9419 9587])
            ("company-tooltip-minimum-width" variable nil nil [9589 9793])
            ("company-tooltip-margin" variable (:default-value 1) nil [9795 9903])
            ("company-tooltip-offset-display" variable (:default-value (quote scrollbar)) nil [9905 10259])
            ("company-tooltip-align-annotations" variable nil nil [10261 10432])
            ("company-tooltip-flip-when-above" variable nil nil [10434 10604])
            ("company-safe-backends" variable (:default-value (quote ((company-abbrev . "Abbrev") (company-bbdb . "BBDB") (company-capf . "completion-at-point-functions") (company-clang . "Clang") (company-cmake . "CMake") (company-css . "CSS") (company-dabbrev . "dabbrev for plain text") (company-dabbrev-code . "dabbrev for code") (company-eclim . "Eclim (an Eclipse interface)") (company-elisp . "Emacs Lisp") (company-etags . "etags") (company-files . "Files") (company-gtags . "GNU Global") (company-ispell . "Ispell") (company-keywords . "Programming language keywords") (company-nxml . "nxml") (company-oddmuse . "Oddmuse") (company-pysmell . "PySmell") (company-ropemacs . "ropemacs") (company-semantic . "Semantic") (company-tempo . "Tempo templates") (company-xcode . "Xcode")))) nil [10606 11443])
            ("put" code nil nil [11444 11496])
            ("company-safe-backends-p" function (:arguments ("backends")) nil [11498 11804])
            ("company-backends" variable (:default-value (\` ((\,@ (unless (version< "24.3.50" emacs-version) (list (quote company-elisp)))) company-bbdb company-nxml company-css company-eclim company-semantic company-clang company-xcode company-ropemacs company-cmake company-capf (company-dabbrev-code company-gtags company-etags company-keywords) company-oddmuse company-files company-dabbrev))) nil [11806 17865])
            ("put" code nil nil [17867 17936])
            ("company-transformers" variable nil nil [17938 18454])
            ("company-completion-started-hook" variable nil nil [18456 18655])
            ("company-completion-cancelled-hook" variable nil nil [18657 18859])
            ("company-completion-finished-hook" variable nil nil [18861 19168])
            ("company-minimum-prefix-length" variable (:default-value 3) nil [19170 19304])
            ("company-abort-manual-when-too-short" variable nil nil [19306 19588])
            ("company-require-match" variable (:default-value (quote company-explicit-action-p)) nil [19590 20151])
            ("company-auto-complete" variable nil nil [20153 20633])
            ("company-auto-complete-chars" variable (:default-value (quote (32 41 46))) nil [20635 22124])
            ("company-idle-delay" variable (:default-value 0.5) nil [22126 22495])
            ("company-begin-commands" variable (:default-value (quote (self-insert-command org-self-insert-command orgtbl-self-insert-command c-scope-operator c-electric-colon c-electric-lt-gt c-electric-slash))) nil [22497 23392])
            ("company-continue-commands" variable (:default-value (quote (not save-buffer save-some-buffers save-buffers-kill-terminal save-buffers-kill-emacs))) nil [23394 24246])
            ("company-show-numbers" variable nil nil [24248 24434])
            ("company-selection-wrap-around" variable nil nil [24436 24631])
            ("company-async-wait" variable (:default-value 0.03) nil [24633 24773])
            ("company-async-timeout" variable (:default-value 2) nil [24775 24877])
            ("company-mode-map" variable (:default-value (make-sparse-keymap)) nil [24961 25042])
            ("company-active-map" variable (:default-value (let ((keymap (make-sparse-keymap))) (define-key keymap "" (quote company-abort)) (define-key keymap "" (quote company-abort)) (define-key keymap (kbd "M-n") (quote company-select-next)) (define-key keymap (kbd "M-p") (quote company-select-previous)) (define-key keymap (kbd "<down>") (quote company-select-next-or-abort)) (define-key keymap (kbd "<up>") (quote company-select-previous-or-abort)) (define-key keymap [down-mouse-1] (quote ignore)) (define-key keymap [down-mouse-3] (quote ignore)) (define-key keymap [mouse-1] (quote company-complete-mouse)) (define-key keymap [mouse-3] (quote company-select-mouse)) (define-key keymap [up-mouse-1] (quote ignore)) (define-key keymap [up-mouse-3] (quote ignore)) (define-key keymap [return] (quote company-complete-selection)) (define-key keymap (kbd "RET") (quote company-complete-selection)) (define-key keymap [tab] (quote company-complete-common)) (define-key keymap (kbd "TAB") (quote company-complete-common)) (define-key keymap (kbd "<f1>") (quote company-show-doc-buffer)) (define-key keymap (kbd "C-h") (quote company-show-doc-buffer)) (define-key keymap "" (quote company-show-location)) (define-key keymap "" (quote company-search-candidates)) (define-key keymap "\223" (quote company-filter-candidates)) (dotimes (i 10) (define-key keymap (read-kbd-macro (format "M-%d" i)) (quote company-complete-number))) keymap)) nil [25044 26473])
            ("company--disabled-backends" variable nil nil [26475 26514])
            ("company-init-backend" function (:arguments ("backend")) nil [26516 27291])
            ("company-default-lighter" variable (:default-value " company") nil [27293 27336])
            ("defvar-local" code nil nil [27338 27392])
            ("define-minor-mode" code nil nil [27409 28982])
            ("company-global-modes" variable (:default-value t) nil [28984 29843])
            ("define-globalized-minor-mode" code nil nil [29860 29939])
            ("company-mode-on" function nil nil [29941 30329])
            ("company-assert-enabled" function nil nil [30331 30453])
            ("defvar-local" code nil nil [30537 30573])
            ("company-emulation-alist" variable (:default-value (quote ((t)))) nil [30575 30620])
            ("company-enable-overriding-keymap" function (:arguments ("keymap")) nil [30622 30734])
            ("company-ensure-emulation-alist" function nil nil [30736 31003])
            ("company-install-map" function nil nil [31005 31181])
            ("company-uninstall-map" function nil nil [31183 31259])
            ("company-ignore" function nil nil [31485 31561])
            ("global-set-key" code nil nil [31563 31607])
            ("company-input-noop" function nil nil [31609 31678])
            ("company--posn-col-row" function (:arguments ("posn")) nil [31680 32127])
            ("company--col-row" function (:arguments ("pos")) nil [32129 32215])
            ("company--row" function (:arguments ("pos")) nil [32217 32284])
            ("defvar-local" code nil nil [32368 32402])
            ("company-grab" function (:arguments ("regexp" "expression" "limit")) nil [32404 32556])
            ("company-grab-line" function (:arguments ("regexp" "expression")) nil [32558 32663])
            ("company-grab-symbol" function nil nil [32665 32940])
            ("company-grab-word" function nil nil [32942 33205])
            ("company-grab-symbol-cons" function (:arguments ("idle-begin-after-re" "max-len")) nil [33207 33654])
            ("company-in-string-or-comment" function nil nil [33656 33827])
            ("company-call-backend" function (:arguments ("args")) nil [33829 33942])
            ("company--force-sync" function (:arguments ("fun" "args" "backend")) nil [33944 34493])
            ("company-call-backend-raw" function (:arguments ("args")) nil [34495 34859])
            ("company--multi-backend-adapter" function (:arguments ("backends" "command" "args")) nil [34861 35968])
            ("company--multi-backend-adapter-candidates" function (:arguments ("backends" "prefix")) nil [35970 37080])
            ("company--merge-async" function (:arguments ("pairs" "merger")) nil [37082 38372])
            ("company--prefix-str" function (:arguments ("prefix")) nil [38374 38442])
            ("defvar-local" code nil nil [38526 38559])
            ("defvar-local" code nil nil [38561 38598])
            ("defvar-local" code nil nil [38600 38644])
            ("defvar-local" code nil nil [38646 38689])
            ("defvar-local" code nil nil [38691 38738])
            ("defvar-local" code nil nil [38740 38773])
            ("defvar-local" code nil nil [38775 38809])
            ("defvar-local" code nil nil [38811 38855])
            ("defvar-local" code nil nil [38857 38944])
            ("defvar-local" code nil nil [38946 38987])
            ("company--auto-completion" variable nil nil [38989 39133])
            ("defvar-local" code nil nil [39135 39172])
            ("defvar-local" code nil nil [39174 39206])
            ("company-timer" variable nil nil [39208 39234])
            ("company-strip-prefix" function (:arguments ("str")) nil [39236 39315])
            ("company--insert-candidate" function (:arguments ("candidate")) nil [39317 39672])
            ("company-with-candidate-inserted" function (:arguments ("candidate" "body")) nil [39674 40222])
            ("company-explicit-action-p" function nil nil [40224 40391])
            ("company-reformat" function (:arguments ("candidate")) nil [40393 40780])
            ("company--should-complete" function nil nil [40782 41189])
            ("company--should-continue" function nil nil [41191 41653])
            ("company-call-frontends" function (:arguments ("command")) nil [41655 41945])
            ("company-set-selection" function (:arguments ("selection" "force-update")) nil [41947 42446])
            ("company--update-group-lighter" function (:arguments ("candidate")) nil [42448 42902])
            ("company-apply-predicate" function (:arguments ("candidates" "predicate")) nil [42904 43075])
            ("company-update-candidates" function (:arguments ("candidates")) nil [43077 44627])
            ("company-calculate-candidates" function (:arguments ("prefix")) nil [44629 45758])
            ("company--fetch-candidates" function (:arguments ("prefix")) nil [45760 46912])
            ("company--process-candidates" function (:arguments ("candidates")) nil [46914 47324])
            ("company--strip-duplicates" function (:arguments ("candidates")) nil [47326 48024])
            ("company--transform-candidates" function (:arguments ("candidates")) nil [48026 48176])
            ("company-occurrence-weight-function" variable (:default-value (function company-occurrence-prefer-closest-above)) nil [48178 48670])
            ("company-occurrence-prefer-closest-above" function (:arguments ("pos" "match-beg" "match-end")) nil [48672 48897])
            ("company-occurrence-prefer-any-closest" function (:arguments ("pos" "_match-beg" "match-end")) nil [48899 49052])
            ("company-sort-by-occurrence" function (:arguments ("candidates")) nil [49054 50439])
            ("company--occurrence-predicate" function nil nil [50441 50946])
            ("company-sort-by-backend-importance" function (:arguments ("candidates")) nil [50948 51772])
            ("company-idle-begin" function (:arguments ("buf" "win" "tick" "pos")) nil [51774 52108])
            ("company-auto-begin" function nil nil [52110 52623])
            ("company-manual-begin" function nil nil [52625 52901])
            ("company-other-backend" function (:arguments ("backward")) nil [52903 53568])
            ("company-require-match-p" function nil nil [53570 53889])
            ("company-auto-complete-p" function (:arguments ("input")) nil [53891 54457])
            ("company--incremental-p" function nil nil [54459 54781])
            ("company--continue-failed" function (:arguments ("new-prefix")) nil [54783 55830])
            ("company--good-prefix-p" function (:arguments ("prefix")) nil [55832 56399])
            ("company--continue" function nil nil [56401 57478])
            ("company--begin-new" function nil nil [57480 59077])
            ("company--perform" function nil nil [59079 59452])
            ("company-cancel" function (:arguments ("result")) nil [59454 60566])
            ("company-abort" function nil nil [60568 60634])
            ("company-finish" function (:arguments ("result")) nil [60636 60730])
            ("company-keep" function (:arguments ("command")) nil [60732 60819])
            ("company-pre-command" function nil nil [60821 61348])
            ("company-post-command" function nil nil [61350 62605])
            ("company--begin-inhibit-commands" variable (:default-value (quote (company-abort company-complete-mouse company-complete company-complete-common company-complete-selection company-complete-number))) nil [62607 63094])
            ("company--should-begin" function nil nil [63096 63354])
            ("defvar-local" code nil nil [63438 63478])
            ("defvar-local" code nil nil [63480 63533])
            ("defvar-local" code nil nil [63535 63576])
            ("defvar-local" code nil nil [63578 63623])
            ("company-search" function (:arguments ("text" "lines")) nil [63625 63846])
            ("company-search-printing-char" function nil nil [63848 64290])
            ("company-search-repeat-forward" function (:user-visible-flag t) nil [64292 64723])
            ("company-search-repeat-backward" function (:user-visible-flag t) nil [64725 65228])
            ("company-create-match-predicate" function nil nil [65230 65622])
            ("company-filter-printing-char" function nil nil [65624 65816])
            ("company-search-kill-others" function (:user-visible-flag t) nil [65818 66077])
            ("company-search-abort" function (:user-visible-flag t) nil [66079 66290])
            ("company-search-other-char" function nil nil [66292 66435])
            ("company-search-map" variable (:default-value (let ((i 0) (keymap (make-keymap))) (if (fboundp (quote max-char)) (set-char-table-range (nth 1 keymap) (cons 256 (max-char)) (quote company-search-printing-char)) (with-no-warnings (let ((l (generic-character-list)) (table (nth 1 keymap))) (while l (set-char-table-default table (car l) (quote company-search-printing-char)) (setq l (cdr l)))))) (define-key keymap [t] (quote company-search-other-char)) (while (< i 32) (define-key keymap (make-string 1 i) (quote company-search-other-char)) (cl-incf i)) (while (< i 256) (define-key keymap (vector i) (quote company-search-printing-char)) (cl-incf i)) (let ((meta-map (make-sparse-keymap))) (define-key keymap (char-to-string meta-prefix-char) meta-map) (define-key keymap [escape] meta-map)) (define-key keymap (vector meta-prefix-char t) (quote company-search-other-char)) (define-key keymap "" (quote company-search-other-char)) (define-key keymap [escape escape escape] (quote company-search-other-char)) (define-key keymap (kbd "DEL") (quote company-search-other-char)) (define-key keymap "" (quote company-search-abort)) (define-key keymap "" (quote company-search-repeat-forward)) (define-key keymap "" (quote company-search-repeat-backward)) (define-key keymap "" (quote company-search-kill-others)) keymap)) nil [66437 67965])
            ("define-minor-mode" code nil nil [67967 68615])
            ("company-search-assert-enabled" function nil nil [68617 68784])
            ("company-search-candidates" function (:user-visible-flag t) nil [68786 69431])
            ("company-filter-map" variable (:default-value (let ((keymap (make-keymap))) (define-key keymap [remap company-search-printing-char] (quote company-filter-printing-char)) (set-keymap-parent keymap company-search-map) keymap)) nil [69433 69722])
            ("company-filter-candidates" function (:user-visible-flag t) nil [69724 70045])
            ("company-select-next" function (:user-visible-flag t) nil [70129 70301])
            ("company-select-previous" function (:user-visible-flag t) nil [70303 70483])
            ("company-select-next-or-abort" function (:user-visible-flag t) nil [70485 70750])
            ("company-select-previous-or-abort" function (:user-visible-flag t) nil [70752 71029])
            ("company-pseudo-tooltip-overlay" variable nil nil [71031 71070])
            ("company-tooltip-offset" variable nil nil [71072 71103])
            ("company--inside-tooltip-p" function (:arguments ("event-col-row" "row" "height")) nil [71105 71647])
            ("company--event-col-row" function (:arguments ("event")) nil [71649 71733])
            ("company-select-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [71735 72913])
            ("company-complete-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [72915 73090])
            ("company-complete-selection" function (:user-visible-flag t) nil [73092 73306])
            ("company-complete-common" function (:user-visible-flag t) nil [73308 73659])
            ("company-complete" function (:user-visible-flag t) nil [73661 74215])
            ("company-complete-number" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [74217 74800])
            ("company-space-strings-limit" variable
               (:constant-flag t
                :default-value 100)
                nil [74884 74926])
            ("company-space-strings" variable
               (:constant-flag t
                :default-value (let (lst) (dotimes (i company-space-strings-limit) (push (make-string (- company-space-strings-limit 1 i) 32) lst)) (apply (quote vector) lst)))
                nil [74928 75116])
            ("company-space-string" function (:arguments ("len")) nil [75118 75260])
            ("company-safe-substring" function (:arguments ("str" "from" "to")) nil [75262 75793])
            ("defvar-local" code nil nil [75877 75917])
            ("company-fetch-metadata" function nil nil [75919 76204])
            ("company-doc-buffer" function (:arguments ("string")) nil [76206 76426])
            ("company--electric-commands" variable (:default-value (quote (scroll-other-window scroll-other-window-down))) nil [76428 76577])
            ("company--electric-do" function (:arguments ("body")) nil [76579 77185])
            ("company--unread-last-input" function nil nil [77187 77339])
            ("company-show-doc-buffer" function (:user-visible-flag t) nil [77341 77792])
            ("put" code nil nil [77793 77839])
            ("company-show-location" function (:user-visible-flag t) nil [77841 78603])
            ("put" code nil nil [78604 78648])
            ("defvar-local" code nil nil [78732 78767])
            ("company-remove-callback" function (:arguments ("ignored")) nil [78769 79044])
            ("company-begin-backend" function
               (:user-visible-flag t
                :arguments ("backend" "callback"))
                nil [79046 79813])
            ("company-begin-with" function (:arguments ("candidates" "prefix-length" "require-match" "callback")) nil [79815 80723])
            ("company-version" function
               (:user-visible-flag t
                :arguments ("show-version"))
                nil [80725 81097])
            ("defvar-local" code nil nil [81181 81230])
            ("defvar-local" code nil nil [81232 81271])
            ("company-tooltip--lines-update-offset" function (:arguments ("selection" "num-lines" "limit")) nil [81273 81857])
            ("company-tooltip--simple-update-offset" function (:arguments ("selection" "_num-lines" "limit")) nil [81859 82114])
            ("company-round-tab" function (:arguments ("arg")) nil [82132 82214])
            ("company-plainify" function (:arguments ("str")) nil [82216 82743])
            ("company-fill-propertize" function (:arguments ("value" "annotation" "width" "selected" "left" "right")) nil [82745 85890])
            ("company--clean-string" function (:arguments ("str")) nil [85892 86429])
            ("company-buffer-lines" function (:arguments ("beg" "end")) nil [86444 87388])
            ("company-modify-line" function (:arguments ("old" "new" "offset")) nil [87390 87560])
            ("company--length-limit" function (:arguments ("lst" "limit")) nil [87562 87661])
            ("company--window-height" function nil nil [87663 87798])
            ("company--window-width" function nil nil [87800 88315])
            ("company--replacement-string" function (:arguments ("lines" "old" "column" "nl" "align-top")) nil [88317 89695])
            ("company--offset-line" function (:arguments ("line" "offset")) nil [89697 89803])
            ("company--create-lines" function (:arguments ("selection" "limit")) nil [89805 93465])
            ("company--scrollbar-bounds" function (:arguments ("offset" "limit" "length")) nil [93467 93730])
            ("company--scrollbar" function (:arguments ("i" "bounds")) nil [93732 93937])
            ("company--scrollpos-line" function (:arguments ("text" "width")) nil [93939 94218])
            ("company--pseudo-tooltip-height" function nil nil [94229 94690])
            ("company-pseudo-tooltip-show" function (:arguments ("row" "column" "selection")) nil [94692 95853])
            ("company-pseudo-tooltip-show-at-point" function (:arguments ("pos" "column-offset")) nil [95855 96119])
            ("company-pseudo-tooltip-edit" function (:arguments ("selection")) nil [96121 96704])
            ("company-pseudo-tooltip-hide" function nil nil [96706 96882])
            ("company-pseudo-tooltip-hide-temporarily" function nil nil [96884 97116])
            ("company-pseudo-tooltip-unhide" function nil nil [97118 97803])
            ("company-pseudo-tooltip-guard" function nil nil [97805 98246])
            ("company-pseudo-tooltip-frontend" function (:arguments ("command")) nil [98248 99430])
            ("company-pseudo-tooltip-unless-just-one-frontend" function (:arguments ("command")) nil [99432 99703])
            ("defvar-local" code nil nil [99787 99829])
            ("company-preview-show-at-point" function (:arguments ("pos")) nil [99831 100860])
            ("company-preview-hide" function nil nil [100862 101010])
            ("company-preview-frontend" function (:arguments ("command")) nil [101012 101288])
            ("company-preview-if-just-one-frontend" function (:arguments ("command")) nil [101290 101537])
            ("company--show-inline-p" function nil nil [101539 101758])
            ("defvar-local" code nil nil [101842 101882])
            ("company-echo-timer" variable nil nil [101884 101915])
            ("company-echo-delay" variable (:default-value 0.01) nil [101917 101948])
            ("company-echo-show" function (:arguments ("getter")) nil [101950 102187])
            ("company-echo-show-soon" function (:arguments ("getter")) nil [102189 102381])
            ("company-echo-show-when-idle" function (:arguments ("getter")) nil [102383 102509])
            ("company-echo-format" function nil nil [102511 103579])
            ("company-echo-strip-common-format" function nil nil [103581 104418])
            ("company-echo-hide" function nil nil [104420 104552])
            ("company-echo-frontend" function (:arguments ("command")) nil [104554 104779])
            ("company-echo-strip-common-frontend" function (:arguments ("command")) nil [104781 105032])
            ("company-echo-metadata-frontend" function (:arguments ("command")) nil [105034 105279])
            ("company" package nil nil [105281 105299]))          
      :file "company.el"
      :pointmax 105325
      :fsize 105324
      :lastmodtime '(21573 25738 0 0)
      :unmatched-syntax '((close-paren 3632 . 3633) (symbol 3158 . 3174) (open-paren 3157 . 3158)))
    (semanticdb-table "company-clang.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [903 921])
            ("company-template" include nil nil [922 949])
            ("cl-lib" include nil nil [950 967])
            ("company-clang" customgroup (:user-visible-flag t) nil [969 1050])
            ("company-clang-executable" variable (:default-value (executable-find "clang")) nil [1052 1164])
            ("company-clang-begin-after-member-access" variable (:default-value t) nil [1166 1534])
            ("company-clang-arguments" variable nil nil [1536 1819])
            ("company-clang-prefix-guesser" variable (:default-value (quote company-clang-guess-prefix)) nil [1821 2005])
            ("company-clang-modes" variable (:default-value (quote (c-mode c++-mode objc-mode))) nil [2007 2106])
            ("company-clang-insert-arguments" variable (:default-value t) nil [2108 2285])
            ("company-clang--prefix" variable nil nil [2369 2403])
            ("company-clang--guess-pch-file" function (:arguments ("file")) nil [2405 2682])
            ("company-clang--file-substring" function (:arguments ("file" "beg" "end")) nil [2684 2834])
            ("company-clang-guess-prefix" function nil nil [2836 3259])
            ("company-clang-set-prefix" function
               (:user-visible-flag t
                :arguments ("prefix"))
                nil [3261 3875])
            ("add-hook" code nil nil [3898 3951])
            ("company-clang--completion-pattern" variable
               (:constant-flag t
                :default-value "^COMPLETION: \\_<\\(%s[a-zA-Z0-9_:<>]*\\)\\(?: : \\(.*\\)$\\)?$")
                nil [4134 4246])
            ("company-clang--error-buffer-name" variable
               (:constant-flag t
                :default-value "*clang-error*")
                nil [4248 4307])
            ("company-clang--lang-option" function nil nil [4309 4542])
            ("company-clang--parse-output" function (:arguments ("prefix" "_objc")) nil [4544 5344])
            ("company-clang--meta" function (:arguments ("candidate")) nil [5346 5425])
            ("company-clang--annotation" function (:arguments ("candidate")) nil [5427 5720])
            ("company-clang--strip-formatting" function (:arguments ("text")) nil [5722 5871])
            ("company-clang--handle-error" function (:arguments ("res" "args")) nil [5873 6836])
            ("company-clang--start-process" function (:arguments ("prefix" "callback" "args")) nil [6838 7900])
            ("company-clang--build-location" function (:arguments ("pos")) nil [7902 8292])
            ("company-clang--build-complete-args" function (:arguments ("pos")) nil [8294 8869])
            ("company-clang--candidates" function (:arguments ("prefix" "callback")) nil [8871 9314])
            ("company-clang--prefix" function nil nil [9316 9472])
            ("company-clang-required-version" variable
               (:constant-flag t
                :default-value 1.1)
                nil [9556 9601])
            ("company-clang--version" variable nil nil [9603 9638])
            ("company-clang--auto-save-p" function nil nil [9640 9710])
            ("company-clang-version" function nil nil [9712 10142])
            ("company-clang-objc-templatify" function (:arguments ("selector")) nil [10144 10786])
            ("company-clang" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [10788 12686])
            ("company-clang" package nil nil [12688 12712]))          
      :file "company-clang.el"
      :pointmax 12744
      :fsize 12743
      :lastmodtime '(21573 25738 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "company-template.el"
      :file "company-template.el"
      :fsize 7478
      :lastmodtime '(21573 25738 0 0)))
  :file "!Users!Edgar!.emacs.d!el-get!company-mode!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
