;; Object semantic/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semantic/"
  :tables
  (list
    (semanticdb-table "util-modes.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1155 1174])
            ("semantic-modes" customgroup (:user-visible-flag t) nil [1219 1326])
            ("semantic-update-mode-line" variable (:default-value t) nil [1370 1806])
            ("semantic-mode-line-prefix" variable (:default-value (propertize "S" (quote face) (quote bold))) nil [1808 2044])
            ("semantic-minor-modes-format" variable nil nil [2046 2197])
            ("put" code nil nil [2198 2256])
            ("semantic-minor-mode-alist" variable nil nil [2258 2398])
            ("semantic-mode-line-update" function nil nil [2400 4476])
            ("semantic-desktop-ignore-this-minor-mode" function (:arguments ("buffer")) nil [4478 4665])
            ("semantic-add-minor-mode" function (:arguments ("toggle" "name")) nil [4667 5733])
            ("semantic-toggle-minor-mode-globally" function (:arguments ("mode" "arg")) nil [5735 6883])
            ("define-minor-mode" code nil nil [6966 7326])
            ("semantic-highlight-edits-mode-hook" variable nil nil [7328 7480])
            ("semantic-highlight-edits-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "gray20")) (((class color) (background light)) (:background "gray90"))))
                :type "face")
                nil [7482 7813])
            ("semantic-highlight-edits-new-change-hook-fcn" function (:arguments ("overlay")) nil [7815 8121])
            ("semantic-highlight-edits-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) km)) nil [8123 8251])
            ("define-minor-mode" code nil nil [8268 9437])
            ("semantic-add-minor-mode" code nil nil [9439 9524])
            ("define-minor-mode" code nil nil [9603 10071])
            ("semantic-show-unmatched-syntax-mode-hook" variable nil nil [10073 10237])
            ("semantic-unmatched-syntax-face" variable
               (:default-value (quote ((((class color) (background dark)) (:underline "red")) (((class color) (background light)) (:underline "red"))))
                :type "face")
                nil [10239 10536])
            ("semantic-unmatched-syntax-overlay-p" function (:arguments ("overlay")) nil [10538 10711])
            ("semantic-showing-unmatched-syntax-p" function nil nil [10713 11042])
            ("semantic-show-unmatched-lex-tokens-fetch" function nil nil [11044 11586])
            ("semantic-clean-unmatched-syntax-in-region" function (:arguments ("beg" "end")) nil [11588 11891])
            ("semantic-clean-unmatched-syntax-in-buffer" function nil nil [11893 12087])
            ("semantic-clean-token-of-unmatched-syntax" function (:arguments ("token")) nil [12089 12314])
            ("semantic-show-unmatched-syntax" function (:arguments ("syntax")) nil [12316 13255])
            ("semantic-next-unmatched-syntax" function (:arguments ("point" "bound")) nil [13257 13955])
            ("semantic-show-unmatched-syntax-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km ",`" (quote semantic-show-unmatched-syntax-next)) km)) nil [13957 14176])
            ("define-minor-mode" code nil nil [14193 16051])
            ("semantic-add-minor-mode" code nil nil [16053 16144])
            ("semantic-show-unmatched-syntax-next" function (:user-visible-flag t) nil [16146 16375])
            ("define-minor-mode" code nil nil [16466 16895])
            ("semantic-show-parser-state-mode-hook" variable nil nil [16897 17053])
            ("semantic-show-parser-state-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) km)) nil [17055 17187])
            ("define-minor-mode" code nil nil [17204 20914])
            ("semantic-add-minor-mode" code nil nil [20916 21002])
            ("semantic-show-parser-state-string" variable nil nil [21004 21156])
            ("make-variable-buffer-local" code nil nil [21157 21220])
            ("semantic-show-parser-state-marker" function (:arguments ("ignore")) nil [21222 22042])
            ("semantic-show-parser-state-auto-marker" function nil nil [22044 22362])
            ("define-minor-mode" code nil nil [22439 22860])
            ("semantic-stickyfunc-mode-hook" variable nil nil [22862 23004])
            ("semantic-stickyfunc-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km [header-line down-mouse-1] (quote semantic-stickyfunc-menu)) km)) nil [23006 23199])
            ("semantic-stickyfunc-popup-menu" variable nil nil [23201 23321])
            ("easy-menu-define" code nil nil [23323 24470])
            ("semantic-stickyfunc-indent-string" variable (:default-value (if (and window-system (not (featurep (quote xemacs)))) (concat (condition-case nil (let ((charwidth (frame-char-width)) (scrollpos (frame-parameter (selected-frame) (quote vertical-scroll-bars)))) (if (or (eq scrollpos (quote left)) (eq scrollpos t)) (let ((w (when (boundp (quote scroll-bar-width)) (symbol-value (quote scroll-bar-width))))) (if (not w) (setq w (frame-parameter (selected-frame) (quote scroll-bar-width)))) (if (not w) (setq w (+ (get (quote scroll-bar-width) (quote x-frame-parameter)) 1))) (if (not w) "  " (setq w (+ 2 w)) (make-string (/ w charwidth) 32))) "")) (error "")) (condition-case nil (let* ((f (window-fringes)) (fw (car f)) (numspace (/ fw (frame-char-width)))) (make-string numspace 32)) (error (condition-case nil (if (get (quote fringe) (quote face)) " " "") (error ""))))) "")) nil [24472 26623])
            ("semantic-stickyfunc-old-hlf" variable nil nil [26625 26725])
            ("semantic-stickyfunc-header-line-format" variable
               (:constant-flag t
                :default-value (cond ((featurep (quote xemacs)) nil) ((>= emacs-major-version 22) (quote (:eval (list (propertize " " (quote display) (quote ((space :align-to 0)))) (semantic-stickyfunc-fetch-stickyline))))) ((= emacs-major-version 21) (quote (:eval (list semantic-stickyfunc-indent-string (semantic-stickyfunc-fetch-stickyline))))) (t nil)))
                nil [26727 27187])
            ("define-minor-mode" code nil nil [27204 29199])
            ("semantic-stickyfunc-sticky-classes" variable (:default-value (quote (function type))) nil [29201 29337])
            ("make-variable-buffer-local" code nil nil [29338 29402])
            ("semantic-stickyfunc-show-only-functions-p" variable nil nil [29404 29682])
            ("semantic-stickyfunc-tag-to-stick" function nil nil [29684 30051])
            ("semantic-stickyfunc-fetch-stickyline" function nil nil [30053 31872])
            ("semantic-stickyfunc-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [31874 32344])
            ("semantic-add-minor-mode" code nil nil [32347 32426])
            ("define-minor-mode" code nil nil [32680 33120])
            ("semantic-highlight-func-mode-hook" variable nil nil [33122 33272])
            ("semantic-highlight-func-mode-map" variable (:default-value (let ((km (make-sparse-keymap)) (m3 (if (featurep (quote xemacs)) [button3] [mouse-3]))) (define-key km m3 (quote semantic-highlight-func-menu)) km)) nil [33274 33510])
            ("semantic-highlight-func-popup-menu" variable nil nil [33512 33651])
            ("easy-menu-define" code nil nil [33653 34708])
            ("semantic-highlight-func-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [34710 35226])
            ("semantic-highlight-func-ct-overlay" variable nil nil [35228 35331])
            ("make-variable-buffer-local" code nil nil [35332 35396])
            ("semantic-highlight-func-current-tag-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "gray20")) (((class color) (background light)) (:background "gray90"))))
                :type "face")
                nil [35398 35720])
            ("define-minor-mode" code nil nil [35737 37090])
            ("semantic-highlight-func-highlight-current-tag" function (:arguments ("disable")) nil [37092 38757])
            ("semantic-add-minor-mode" code nil nil [38759 38842])
            ("semantic/util-modes" package nil nil [38889 38919]))          
      :file "util-modes.el"
      :pointmax 39084
      :fsize 39083
      :lastmodtime '(21490 24437 495580 0)
      :unmatched-syntax nil)
    (semanticdb-table "idle.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1508 1527])
            ("semantic/ctxt" include nil nil [1528 1552])
            ("semantic/format" include nil nil [1553 1579])
            ("semantic/tag" include nil nil [1580 1603])
            ("timer" include nil nil [1604 1620])
            ("working" include nil nil [1621 1639])
            ("semantic/find" include nil nil [1705 1729])
            ("eldoc-last-message" variable nil nil [1732 1759])
            ("declare-function" code nil nil [1760 1800])
            ("declare-function" code nil nil [1801 1871])
            ("declare-function" code nil nil [1872 1943])
            ("declare-function" code nil nil [1944 2020])
            ("declare-function" code nil nil [2021 2092])
            ("declare-function" code nil nil [2093 2153])
            ("declare-function" code nil nil [2154 2236])
            ("declare-function" code nil nil [2237 2328])
            ("declare-function" code nil nil [2329 2388])
            ("declare-function" code nil nil [2389 2449])
            ("declare-function" code nil nil [2450 2524])
            ("semantic-idle-scheduler-timer" variable nil nil [2568 2657])
            ("semantic-idle-scheduler-work-timer" variable nil nil [2659 2775])
            ("semantic-idle-scheduler-verbose-flag" variable nil nil [2777 2981])
            ("semantic-idle-scheduler-idle-time" variable (:default-value 1) nil [2983 3490])
            ("semantic-idle-scheduler-work-idle-time" variable (:default-value 60) nil [3492 4038])
            ("semantic-idle-scheduler-setup-timers" function nil nil [4040 4650])
            ("semantic-idle-scheduler-kill-timer" function nil nil [4652 4873])
            ("semantic-idle-scheduler-mode-hook" variable nil nil [5023 5177])
            ("semantic-idle-scheduler-mode" variable nil nil [5179 5345])
            ("make-variable-buffer-local" code nil nil [5346 5404])
            ("semantic-idle-scheduler-max-buffer-size" variable (:user-visible-flag t) nil [5406 5674])
            ("semantic-idle-scheduler-enabled-p" function nil nil [5676 6514])
            ("define-minor-mode" code nil nil [6531 7524])
            ("semantic-add-minor-mode" code nil nil [7526 7612])
            ("semantic-idle-scheduler-queue" variable nil nil [7693 7975])
            ("semantic-idle-scheduler-add" function (:arguments ("function")) nil [7977 8128])
            ("semantic-idle-scheduler-remove" function (:arguments ("function")) nil [8130 8318])
            ("semantic-idle-core-handler" function nil nil [8341 11152])
            ("semantic-debug-idle-function" function (:user-visible-flag t) nil [11154 11337])
            ("semantic-idle-scheduler-function" function nil nil [11339 11700])
            ("semantic-idle-work-parse-neighboring-files-flag" variable (:user-visible-flag t) nil [11830 12061])
            ("semantic-idle-work-update-headers-flag" variable (:user-visible-flag t) nil [12063 12330])
            ("semantic-idle-work-for-one-buffer" function (:arguments ("buffer")) nil [12332 13360])
            ("semantic-idle-work-core-handler" function nil nil [13362 15448])
            ("semantic-debug-idle-work-function" function (:user-visible-flag t) nil [15450 15648])
            ("semantic-idle-scheduler-work-function" function nil nil [15650 16206])
            ("semantic-idle-scheduler-work-parse-neighboring-files" function nil nil [16208 17234])
            ("semantic-before-idle-scheduler-reparse-hook" variable nil nil [17377 17619])
            ("semantic-after-idle-scheduler-reparse-hook" variable nil nil [17621 17857])
            ("semantic-varalias-obsolete" code nil nil [17859 17992])
            ("semantic-varalias-obsolete" code nil nil [17993 18124])
            ("semantic-idle-scheduler-refresh-tags" function nil nil [18126 20974])
            ("define-semantic-idle-service" function (:arguments ("name" "doc" "forms")) nil [21353 23445])
            ("put" code nil nil [23446 23505])
            ("add-hook" code nil nil [23506 23648])
            ("semantic-idle-truncate-long-summaries" variable (:default-value t) nil [23713 23918])
            ("semantic-idle-summary-function" variable (:default-value (quote semantic-format-tag-summarize-with-file)) nil [23920 24296])
            ("semantic-idle-summary-find-current-symbol-tag" function (:arguments ("sym")) nil [24298 24749])
            ("semantic-idle-summary-current-symbol-info-brutish" function nil nil [24751 25130])
            ("semantic-idle-summary-current-symbol-keyword" function nil nil [25132 25458])
            ("semantic-idle-summary-current-symbol-info-context" function nil nil [25460 25853])
            ("semantic-idle-summary-current-symbol-info-default" function nil nil [25855 26353])
            ("semantic-idle-summary-out-of-context-faces" variable (:default-value (quote (font-lock-comment-face font-lock-string-face font-lock-doc-string-face font-lock-doc-face))) nil [26355 27189])
            ("semantic-idle-summary-useful-context-p" function nil nil [27191 27573])
            ("semantic-idle-summary-current-symbol-info" function (:overloadable t) nil [27575 27710])
            ("make-obsolete-overload" code nil nil [27712 27870])
            ("semantic-idle-summary-mode-hook" variable nil nil [27872 28004])
            ("semantic-idle-summary-idle-function" function nil nil [28006 29214])
            ("define-minor-mode" code nil nil [29216 30177])
            ("semantic-idle-summary-refresh-echo-area" function nil nil [30179 30550])
            ("semantic-add-minor-mode" code nil nil [30552 30608])
            ("define-minor-mode" code nil nil [30610 31082])
            ("semantic-idle-symbol-highlight-face" variable (:default-value (quote region)) nil [31297 31395])
            ("semantic-idle-symbol-maybe-highlight" function (:arguments ("tag")) nil [31397 33293])
            ("define-semantic-idle-service" code nil nil [33295 34606])
            ("define-minor-mode" code nil nil [34625 35373])
            ("semantic-idle-completions-end-of-symbol-p" function nil nil [35620 35856])
            ("semantic-idle-completion-list-default" function nil nil [35858 36560])
            ("define-semantic-idle-service" code nil nil [36562 37451])
            ("semantic-idle-breadcrumbs-display-function" variable (:default-value (function semantic-idle-breadcrumbs--display-in-header-line)) nil [37618 38335])
            ("semantic-idle-breadcrumbs-format-tag-list-function" variable (:default-value (function semantic-idle-breadcrumbs--format-linear)) nil [38337 39280])
            ("semantic-idle-breadcrumbs-format-tag-function" variable (:default-value (function semantic-format-tag-abbreviate)) nil [39282 39652])
            ("semantic-idle-breadcrumbs-separator" variable (:default-value (quote mode-specific)) nil [39654 40052])
            ("semantic-idle-breadcrumbs-header-line-prefix" variable (:default-value semantic-stickyfunc-indent-string) nil [40054 40324])
            ("semantic-idle-breadcrumbs-popup-menu" variable nil nil [40326 40458])
            ("semantic-idle-breadcrumbs--popup-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [40460 40880])
            ("semantic-idle-breadcrumbs--tag-function" function (:arguments ("function")) nil [40882 41425])
            ("semantic-idle-breadcrumbs-popup-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [header-line mouse-1] (semantic-idle-breadcrumbs--tag-function semantic-go-to-tag)) (define-key map [header-line mouse-3] (quote semantic-idle-breadcrumbs--popup-menu)) map)) nil [41470 41906])
            ("easy-menu-define" code nil nil [41908 43827])
            ("define-semantic-idle-service" code nil nil [43829 44371])
            ("semantic-idle-breadcrumbs--display-in-header-line" function (:arguments ("tag-list")) nil [44373 45229])
            ("semantic-idle-breadcrumbs--display-in-mode-line" function (:arguments ("tag-list")) nil [45231 45772])
            ("semantic-idle-breadcrumbs--format-tag-list" function (:arguments ("tag-list" "max-length")) nil [45774 46489])
            ("semantic-idle-breadcrumbs--format-linear" function (:arguments ("tag-list" "max-length")) nil [46491 47267])
            ("semantic-idle-breadcrumbs--format-innermost-first" function (:arguments ("tag-list" "max-length")) nil [47269 48562])
            ("semantic-idle-breadcrumbs--format-tag" function (:arguments ("tag" "format-function")) nil [48564 49292])
            ("semantic/idle" package nil nil [49295 49319]))          
      :file "idle.el"
      :pointmax 49472
      :fsize 49471
      :lastmodtime '(21490 24437 495580 0)
      :unmatched-syntax '((close-paren 1729 . 1730) (symbol 1687 . 1704) (open-paren 1686 . 1687)))
    (semanticdb-table "ctxt.el"
      :file "ctxt.el"
      :fsize 25496
      :lastmodtime '(21490 24437 495580 0))
    (semanticdb-table "format.el"
      :file "format.el"
      :fsize 27605
      :lastmodtime '(21490 24437 495580 0))
    (semanticdb-table "tag.el"
      :file "tag.el"
      :fsize 51787
      :lastmodtime '(21490 24437 495580 0))
    (semanticdb-table "find.el"
      :file "find.el"
      :fsize 27708
      :lastmodtime '(21490 24437 495580 0))
    (semanticdb-table "decorate.el"
      :file "decorate.el"
      :fsize 12175
      :lastmodtime '(21490 24437 495580 0))
    (semanticdb-table "tag-ls.el"
      :file "tag-ls.el"
      :fsize 17879
      :lastmodtime '(21490 24437 495580 0))
    (semanticdb-table "senator.el"
      :file "senator.el"
      :fsize 57863
      :lastmodtime '(21490 24437 495580 0))
    (semanticdb-table "mru-bookmark.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1577 1590])
            ("semantic" include nil nil [1592 1611])
            ("eieio-base" include nil nil [1612 1633])
            ("ring" include nil nil [1634 1649])
            ("declare-function" code nil nil [1651 1704])
            ("declare-function" code nil nil [1705 1772])
            ("declare-function" code nil nil [1773 1844])
            ("declare-function" code nil nil [1845 1904])
            ("semantic-bookmark" type
               (:superclasses "eieio-named"
                :members 
                  ( ("tag" variable
                       (:documentation "The TAG this bookmark belongs to."
                        :type "semantic-tag")
                        nil nil)
                    ("parent" variable
                       (:documentation "The tag that is the parent of :tag."
                        :type "(or semantic-tag null)")
                        nil nil)
                    ("offset" variable
                       (:documentation "The offset from `tag' start that is
somehow interesting."
                        :type "number")
                        nil nil)
                    ("filename" variable
                       (:documentation "String the tag belongs to.
Set this when the tag gets unlinked from the buffer it belongs to."
                        :type "string")
                        nil nil)
                    ("frequency" variable
                       (:documentation "Track the frequency this tag is visited."
                        :default-value "0"
                        :type "number")
                        nil nil)
                    ("reason" variable
                       (:documentation "The reason this tag is interesting.
Nice values are 'edit, 'read, 'jump, and 'mark.
 edit - created because the tag text was edited.
 read - created because point lingered in tag text.
 jump - jumped to another tag from this tag.
 mark - created a regular mark in this tag."
                        :default-value "t"
                        :type "symbol")
                        nil nil))                  
                :type "class")
                nil [1977 2937])
            ("initialize-instance" function
               (:parent "semantic-bookmark"
                :arguments ("sbm" "fields"))
                nil [2939 3316])
            ("semantic-mrub-visit" function
               (:parent "semantic-bookmark"
                :arguments ("sbm"))
                nil [3318 3995])
            ("semantic-mrub-update" function
               (:parent "semantic-bookmark"
                :arguments ("sbm" "point" "reason"))
                nil [3997 4472])
            ("semantic-mrub-preflush" function
               (:parent "semantic-bookmark"
                :arguments ("sbm"))
                nil [4474 5040])
            ("semantic-bookmark-ring" type
               (:members 
                  ( ("ring" variable
                       (:documentation "List of `semantic-bookmark' objects.
This list is maintained as a list with the first item
being the current location, and the rest being a list of
items that were recently visited."
                        :type "ring")
                        nil nil)
                    ("current-index" variable
                       (:documentation "The current index into RING for some operation.
User commands use this to move through the ring, or reset."
                        :default-value "0"
                        :type "number")
                        nil nil))                  
                :type "class")
                nil [5042 5676])
            ("semantic-mru-bookmark-ring" variable (:default-value (semantic-bookmark-ring "Ring" :ring (make-ring 20))) nil [5678 5867])
            ("semantic-mrub-find-nearby-tag" function (:arguments ("point")) nil [5869 6396])
            ("semantic-mrub-push" function
               (:parent "semantic-bookmark-ring"
                :arguments ("sbr" "point" "reason"))
                nil [6398 7220])
            ("semantic-mrub-cache-flush-fcn" function nil nil [7222 7575])
            ("add-hook" code nil nil [7577 7664])
            ("semantic-mrub-last-overlay" variable nil nil [7686 7797])
            ("semantic-mru-bookmark-change-hook-fcn" function (:arguments ("overlay")) nil [7799 8204])
            ("global-semantic-mru-bookmark-mode" variable nil nil [8249 8718])
            ("define-minor-mode" code nil nil [8735 9164])
            ("semantic-mru-bookmark-mode-hook" variable (:user-visible-flag t) nil [9166 9313])
            ("semantic-mru-bookmark-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km "B" (quote semantic-mrub-switch-tags)) km)) nil [9315 9492])
            ("define-minor-mode" code nil nil [9494 10885])
            ("semantic-add-minor-mode" code nil nil [10887 10969])
            ("semantic-mrub-read-history" function nil nil [11034 11120])
            ("semantic-mrub-ring-to-assoc-list" function (:arguments ("ring")) nil [11122 11448])
            ("semantic-mrub-completing-read" function (:arguments ("prompt")) nil [11450 12977])
            ("semantic-mrub-switch-tags" function
               (:user-visible-flag t
                :arguments ("tagmark"))
                nil [12979 13423])
            ("semantic-adebug-mrub" function (:user-visible-flag t) nil [13442 13751])
            ("semantic/mru-bookmark" package nil nil [13754 13786]))          
      :file "mru-bookmark.el"
      :pointmax 13955
      :fsize 13954
      :lastmodtime '(21490 24437 495580 0)
      :unmatched-syntax '((close-paren 1590 . 1591) (symbol 1559 . 1576) (open-paren 1558 . 1559)))
    (semanticdb-table "db-mode.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [924 946])
            ("declare-function" code nil nil [948 1020])
            ("semanticdb-hooks" variable (:default-value (quote ((semanticdb-semantic-init-hook-fcn semantic-init-db-hook) (semanticdb-synchronize-table semantic-after-toplevel-cache-change-hook) (semanticdb-partial-synchronize-table semantic-after-partial-cache-change-hook) (semanticdb-revert-hook before-revert-hook) (semanticdb-kill-hook kill-buffer-hook) (semanticdb-kill-hook change-major-mode-hook) (semanticdb-kill-emacs-hook kill-emacs-hook) (semanticdb-save-all-db-idle auto-save-hook)))) nil [1053 1670])
            ("semanticdb-minor-mode-p" function nil nil [1710 1894])
            ("define-minor-mode" code nil nil [1911 2415])
            ("defvaralias" code nil nil [2417 2487])
            ("defvaralias" code nil nil [2488 2555])
            ("semantic-varalias-obsolete" code nil nil [2556 2656])
            ("semanticdb-toggle-global-mode" function (:user-visible-flag t) nil [2659 3013])
            ("semanticdb-semantic-init-hook-fcn" function nil nil [3098 5011])
            ("semanticdb-revert-hook" function nil nil [5013 5392])
            ("semanticdb-kill-hook" function nil nil [5394 6824])
            ("semanticdb-kill-emacs-hook" function nil nil [6826 6956])
            ("semanticdb-synchronize-table" function (:arguments ("new-table")) nil [6987 7210])
            ("semanticdb-partial-synchronize-table" function (:arguments ("new-table")) nil [7212 7451])
            ("semantic/db-mode" package nil nil [7454 7481]))          
      :file "db-mode.el"
      :pointmax 7640
      :fsize 7639
      :lastmodtime '(21490 24437 495580 0)
      :unmatched-syntax nil)
    (semanticdb-table "db.el"
      :file "db.el"
      :fsize 39977
      :lastmodtime '(21490 24437 495580 0))
    (semanticdb-table "wisent.el"
      :file "wisent.el"
      :fsize 13104
      :lastmodtime '(21490 24437 495580 0))
    (semanticdb-table "ia.el"
      :file "ia.el"
      :fsize 17405
      :lastmodtime '(21490 24437 495580 0))
    (semanticdb-table "complete.el"
      :file "complete.el"
      :fsize 86166
      :lastmodtime '(21490 24437 495580 0)))
  :file "!home!edgar!.emacs.d!el-get!cedet!lisp!cedet!semantic!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
