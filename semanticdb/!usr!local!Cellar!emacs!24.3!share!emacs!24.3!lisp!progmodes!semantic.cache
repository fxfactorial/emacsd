;; Object progmodes/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "progmodes/"
  :tables
  (list
    (semanticdb-table "cc-vars.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("let" code nil nil [1213 1428])
            ("cc-require" code nil nil [1431 1452])
            ("cc-bytecomp-defun" code nil nil [1479 1513])
            ("cc-eval-when-compile" code nil nil [1524 1586])
            ("or" code nil nil [1663 1897])
            ("c-constant-symbol" function (:arguments ("sym" "len")) nil [1968 2541])
            ("define-widget" code nil nil [2544 3162])
            ("define-widget" code nil nil [3164 3343])
            ("define-widget" code nil nil [3345 4247])
            ("c-style-variables" variable (:default-value (quote (c-basic-offset c-comment-only-line-offset c-indent-comment-alist c-indent-comments-syntactically-p c-block-comment-prefix c-comment-prefix-regexp c-doc-comment-style c-cleanup-list c-hanging-braces-alist c-hanging-colons-alist c-hanging-semi&comma-criteria c-backslash-column c-backslash-max-column c-special-indent-hook c-label-minimum-indentation c-offsets-alist))) nil [4249 4698])
            ("c-fallback-style" variable nil nil [4700 4729])
            ("c-set-stylevar-fallback" function (:arguments ("name" "val")) nil [4731 4880])
            ("defcustom-c-stylevar" function (:arguments ("name" "val" "doc" "args")) nil [4882 6702])
            ("c-valid-offset" function (:arguments ("offset")) nil [6704 7450])
            ("c-strict-syntax-p" variable (:user-visible-flag t) nil [7475 8064])
            ("c-echo-syntactic-information-p" variable (:user-visible-flag t) nil [8066 8210])
            ("c-report-syntactic-errors" variable (:user-visible-flag t) nil [8212 8707])
            ("defcustom-c-stylevar" code nil nil [8709 8924])
            ("c-tab-always-indent" variable
               (:user-visible-flag t
                :default-value t)
                nil [8993 9803])
            ("c-insert-tab-function" variable
               (:user-visible-flag t
                :default-value (quote insert-tab))
                nil [9805 10212])
            ("c-syntactic-indentation" variable
               (:user-visible-flag t
                :default-value t)
                nil [10214 10796])
            ("make-variable-buffer-local" code nil nil [10797 10850])
            ("put" code nil nil [10851 10912])
            ("c-syntactic-indentation-in-macros" variable
               (:user-visible-flag t
                :default-value t)
                nil [10914 11814])
            ("put" code nil nil [11815 11886])
            ("c-defun-tactic" variable
               (:user-visible-flag t
                :default-value (quote go-outward))
                nil [11888 12512])
            ("defcustom-c-stylevar" code nil nil [12514 13363])
            ("defcustom-c-stylevar" code nil nil [13365 16266])
            ("defcustom-c-stylevar" code nil nil [16268 16718])
            ("make-obsolete-variable" code nil nil [16720 16808])
            ("defcustom-c-stylevar" code nil nil [17142 17958])
            ("defcustom-c-stylevar" code nil nil [17960 20473])
            ("defcustom-c-stylevar" code nil nil [20475 23365])
            ("c-ignore-auto-fill" variable
               (:user-visible-flag t
                :default-value (quote (string cpp code)))
                nil [23367 24163])
            ("defcustom-c-stylevar" code nil nil [24165 28956])
            ("defcustom-c-stylevar" code nil nil [28958 31808])
            ("c-max-one-liner-length" variable (:default-value 80) nil [31810 31982])
            ("defcustom-c-stylevar" code nil nil [31984 32788])
            ("defcustom-c-stylevar" code nil nil [32790 33596])
            ("defcustom-c-stylevar" code nil nil [33598 34013])
            ("defcustom-c-stylevar" code nil nil [34086 34467])
            ("c-auto-align-backslashes" variable
               (:user-visible-flag t
                :default-value t)
                nil [34469 34885])
            ("c-backspace-function" variable
               (:user-visible-flag t
                :default-value (quote backward-delete-char-untabify))
                nil [34887 35052])
            ("c-delete-function" variable
               (:user-visible-flag t
                :default-value (quote delete-char))
                nil [35054 35202])
            ("c-require-final-newline" variable
               (:user-visible-flag t
                :default-value (quote ((c-mode . t) (c++-mode . t) (objc-mode . t))))
                nil [35204 36844])
            ("c-electric-pound-behavior" variable (:user-visible-flag t) nil [36846 37035])
            ("c-special-indent-hook" variable (:user-visible-flag t) nil [37037 37283])
            ("defcustom-c-stylevar" code nil nil [37285 37673])
            ("c-progress-interval" variable
               (:user-visible-flag t
                :default-value 5)
                nil [37675 37969])
            ("c-objc-method-arg-min-delta-to-bracket" variable
               (:user-visible-flag t
                :default-value 2)
                nil [37971 38558])
            ("c-objc-method-arg-unfinished-offset" variable
               (:user-visible-flag t
                :default-value 4)
                nil [38560 38777])
            ("c-objc-method-parameter-offset" variable
               (:user-visible-flag t
                :default-value 4)
                nil [38779 39039])
            ("c-default-style" variable
               (:user-visible-flag t
                :default-value (quote ((java-mode . "java") (awk-mode . "awk") (other . "gnu"))))
                nil [39041 40748])
            ("c-set-stylevar-fallback" code nil nil [41179 49500])
            ("c-offsets-alist" variable nil nil [49501 59555])
            ("c-inside-block-syms" variable
               (:constant-flag t
                :default-value (quote (defun-block-intro block-open block-close statement statement-cont statement-block-intro statement-case-intro statement-case-open substatement substatement-open substatement-label case-label label do-while-closure else-clause catch-clause inlambda annotation-var-cont)))
                nil [59652 59966])
            ("c-style-variables-are-local-p" variable
               (:user-visible-flag t
                :default-value t)
                nil [59968 60938])
            ("c-mode-hook" variable (:user-visible-flag t) nil [60940 61023])
            ("c++-mode-hook" variable (:user-visible-flag t) nil [61025 61112])
            ("objc-mode-hook" variable (:user-visible-flag t) nil [61114 61203])
            ("java-mode-hook" variable (:user-visible-flag t) nil [61205 61294])
            ("idl-mode-hook" variable (:user-visible-flag t) nil [61296 61383])
            ("pike-mode-hook" variable (:user-visible-flag t) nil [61385 61474])
            ("awk-mode-hook" variable (:user-visible-flag t) nil [61476 61563])
            ("c-mode-common-hook" variable (:user-visible-flag t) nil [61565 61691])
            ("c-initialization-hook" variable (:user-visible-flag t) nil [61693 61934])
            ("c-enable-xemacs-performance-kludge-p" variable (:user-visible-flag t) nil [61936 62470])
            ("c-old-style-variable-behavior" variable (:user-visible-flag t) nil [62472 63260])
            ("define-widget" code nil nil [63262 63446])
            ("c-make-font-lock-extra-types-blurb" function (:arguments ("mode1" "mode2" "example")) nil [63448 64514])
            ("c-font-lock-extra-types" variable (:default-value (quote ("\\sw+_t" "bool" "complex" "imaginary" "FILE" "lconv" "tm" "va_list" "jmp_buf" "Lisp_Object"))) nil [64833 65555])
            ("c++-font-lock-extra-types" variable (:default-value (quote ("\\sw+_t" "FILE" "lconv" "tm" "va_list" "jmp_buf" "istream" "istreambuf" "ostream" "ostreambuf" "ifstream" "ofstream" "fstream" "strstream" "strstreambuf" "istrstream" "ostrstream" "ios" "string" "rope" "list" "slist" "deque" "vector" "bit_vector" "set" "multiset" "map" "multimap" "hash" "hash_set" "hash_multiset" "hash_map" "hash_multimap" "stack" "queue" "priority_queue" "type_info" "iterator" "const_iterator" "reverse_iterator" "const_reverse_iterator" "reference" "const_reference"))) nil [65557 66670])
            ("objc-font-lock-extra-types" variable (:default-value (list (concat "[" c-upper "]\\sw*[" c-lower "]\\sw*"))) nil [66672 67098])
            ("java-font-lock-extra-types" variable (:default-value (list (concat "[" c-upper "]\\sw*[" c-lower "]\\sw"))) nil [67100 67515])
            ("idl-font-lock-extra-types" variable nil nil [67517 67659])
            ("pike-font-lock-extra-types" variable (:default-value (list (concat "[" c-upper "]\\sw*[" c-lower "]\\sw*"))) nil [67661 68087])
            ("c-macro-with-semi-re" variable nil nil [68161 68395])
            ("make-variable-buffer-local" code nil nil [68396 68446])
            ("c-make-macro-with-semi-re" function nil nil [68448 69153])
            ("c-macro-names-with-semicolon" variable (:default-value (quote ("Q_OBJECT" "Q_PROPERTY" "Q_DECLARE" "Q_ENUMS"))) nil [69155 69828])
            ("make-variable-buffer-local" code nil nil [69829 69887])
            ("c-file-style" variable nil nil [69889 70297])
            ("make-variable-buffer-local" code nil nil [70298 70340])
            ("c-file-offsets" variable nil nil [70415 70850])
            ("make-variable-buffer-local" code nil nil [70851 70895])
            ("cc-bytecomp-defvar" code nil nil [71273 71313])
            ("c-syntactic-context" variable nil nil [71314 71342])
            ("put" code nil nil [71343 71951])
            ("cc-bytecomp-defvar" code nil nil [71954 71994])
            ("c-syntactic-element" variable nil nil [71995 72023])
            ("put" code nil nil [72024 72872])
            ("c-indentation-style" variable nil nil [72874 73075])
            ("c-current-comment-prefix" variable nil nil [73077 73212])
            ("make-variable-buffer-local" code nil nil [73213 73267])
            ("c-string-par-start" variable (:default-value "\\|[ 	]*\\\\?$") nil [73456 73673])
            ("c-string-par-separate" variable (:default-value "[ 	]*\\\\?$") nil [73675 73898])
            ("c-sentence-end-with-esc-eol" variable (:default-value (concat "\\(\\(" (c-default-value-sentence-end) "\\)" "\\|" "[.?!][]\"')}]* ?\\\\\\($\\)[ 	
]*" "\\)")) nil [73900 74213])
            ("cc-provide" code nil nil [74217 74238]))          
      :file "cc-vars.el.gz"
      :pointmax 74265
      :fsize 20820
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax '((close-paren 2541 . 2542) (symbol 1949 . 1965) (open-paren 1948 . 1949) (close-paren 1428 . 1429) (symbol 1193 . 1210) (open-paren 1192 . 1193)))
    (semanticdb-table "hideshow.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("hideshow" customgroup (:user-visible-flag t) nil [10029 10154])
            ("hs-hide-comments-when-hiding-all" variable (:default-value t) nil [10156 10294])
            ("hs-minor-mode-hook" variable nil nil [10296 10451])
            ("hs-isearch-open" variable (:default-value (quote code)) nil [10453 11081])
            ("hs-special-modes-alist" variable (:default-value (mapcar (quote purecopy) (quote ((c-mode "{" "}" "/[*/]" nil nil) (c++-mode "{" "}" "/[*/]" nil nil) (bibtex-mode ("@\\S(*\\(\\s(\\)" 1)) (java-mode "{" "}" "/[*/]" nil nil) (js-mode "{" "}" "/[*/]" nil))))) nil [11098 12559])
            ("hs-hide-all-non-comment-function" variable nil nil [12561 12680])
            ("hs-allow-nesting" variable nil nil [12682 12867])
            ("hs-hide-hook" variable nil nil [12869 13101])
            ("hs-show-hook" variable nil nil [13103 13318])
            ("hs-set-up-overlay" variable nil nil [13320 14043])
            ("hs-minor-mode" variable nil nil [14146 14307])
            ("hs-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "@" (quote hs-hide-block)) (define-key map "@" (quote hs-show-block)) (define-key map "@\210" (quote hs-hide-all)) (define-key map "@\223" (quote hs-show-all)) (define-key map "@" (quote hs-hide-level)) (define-key map "@" (quote hs-toggle-hiding)) (define-key map [(shift mouse-2)] (quote hs-mouse-toggle-hiding)) map)) nil [14309 14868])
            ("easy-menu-define" code nil nil [14870 16608])
            ("hs-c-start-regexp" variable nil nil [16610 16765])
            ("make-variable-buffer-local" code nil nil [16766 16813])
            ("hs-block-start-regexp" variable nil nil [16815 16884])
            ("make-variable-buffer-local" code nil nil [16885 16936])
            ("hs-block-start-mdata-select" variable nil nil [16938 17206])
            ("make-variable-buffer-local" code nil nil [17207 17264])
            ("hs-block-end-regexp" variable nil nil [17266 17327])
            ("make-variable-buffer-local" code nil nil [17328 17377])
            ("hs-forward-sexp-func" variable (:default-value (quote forward-sexp)) nil [17380 17740])
            ("make-variable-buffer-local" code nil nil [17741 17791])
            ("hs-adjust-block-beginning" variable nil nil [17793 18526])
            ("make-variable-buffer-local" code nil nil [18527 18582])
            ("hs-headline" variable nil nil [18584 18982])
            ("hs-discard-overlays" function (:arguments ("from" "to")) nil [19084 19634])
            ("hs-make-overlay" function (:arguments ("b" "e" "kind" "b-offset" "e-offset")) nil [19636 21052])
            ("hs-isearch-show" function (:arguments ("ov")) nil [21054 21273])
            ("hs-isearch-show-temporary" function (:arguments ("ov" "hide-p")) nil [21275 22505])
            ("hs-looking-at-block-start-p" function nil nil [22507 22696])
            ("hs-forward-sexp" function (:arguments ("match-data" "arg")) nil [22698 23013])
            ("hs-hide-comment-region" function (:arguments ("beg" "end" "repos-end")) nil [23015 23443])
            ("hs-hide-block-at-point" function (:arguments ("end" "comment-reg")) nil [23445 24851])
            ("hs-inside-comment-p" function nil nil [24853 27393])
            ("hs-grok-mode-type" function nil nil [27395 29058])
            ("hs-find-block-beginning" function nil nil [29060 29754])
            ("hs-hide-level-recursive" function (:arguments ("arg" "minp" "maxp")) nil [29756 30520])
            ("hs-life-goes-on" function (:arguments ("body")) nil [30522 30841])
            ("put" code nil nil [30843 30897])
            ("hs-overlay-at" function (:arguments ("position")) nil [30899 31211])
            ("hs-already-hidden-p" function nil nil [31213 31773])
            ("hs-c-like-adjust-block-beginning" function (:arguments ("initial")) nil [31823 32244])
            ("hs-hide-all" function (:user-visible-flag t) nil [32337 34273])
            ("hs-show-all" function (:user-visible-flag t) nil [34275 34591])
            ("hs-hide-block" function
               (:user-visible-flag t
                :arguments ("end"))
                nil [34593 35244])
            ("hs-show-block" function
               (:user-visible-flag t
                :arguments ("end"))
                nil [35246 36530])
            ("hs-hide-level" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [36532 36880])
            ("hs-toggle-hiding" function (:user-visible-flag t) nil [36882 37098])
            ("hs-mouse-toggle-hiding" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [37100 37399])
            ("hs-hide-initial-comment-block" function (:user-visible-flag t) nil [37401 37970])
            ("define-minor-mode" code nil nil [37987 39479])
            ("turn-off-hideshow" function nil nil [39496 39591])
            ("hideshow" package nil nil [39685 39704]))          
      :file "hideshow.el.gz"
      :pointmax 39732
      :fsize 11921
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!Cellar!emacs!24.3!share!emacs!24.3!lisp!progmodes!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
