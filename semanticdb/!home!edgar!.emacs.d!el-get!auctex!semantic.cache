;; Object auctex/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "auctex/"
  :tables
  (list
    (semanticdb-table "tex-site.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("if" code nil nil [1371 1448])
            ("AUCTeX" customgroup (:user-visible-flag t) nil [1575 1830])
            ("TeX-lisp-directory" variable (:default-value "/home/edgar/.emacs.d/el-get/auctex") nil [1832 2119])
            ("add-to-list" code nil nil [2121 2164])
            ("TeX-data-directory" variable (:default-value "/home/edgar/.emacs.d/el-get/auctex") nil [2166 2293])
            ("TeX-auto-global" variable
               (:user-visible-flag t
                :default-value "/usr/local/var/auctex")
                nil [2295 2585])
            ("TeX-mode-alist" variable
               (:constant-flag t
                :default-value (quote ((tex-mode . tex-mode) (plain-tex-mode . tex-mode) (texinfo-mode . texinfo) (latex-mode . tex-mode) (doctex-mode . tex-mode))))
                nil [2587 2811])
            ("defalias" code nil nil [2813 2846])
            ("add-hook" code nil nil [2848 3468])
            ("TeX-modes-set" function (:arguments ("var" "value" "update")) nil [3470 4403])
            ("TeX-modes" variable (:default-value (mapcar (quote car) TeX-mode-alist)) nil [4405 4988])
            ("AUCTeX-version" variable
               (:constant-flag t
                :default-value "2014-09-08")
                nil [4990 5105])
            ("AUCTeX-date" variable
               (:constant-flag t
                :default-value "2014-09-08")
                nil [5107 5205])
            ("add-hook" code nil nil [5253 5300])
            ("bib-cite-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [5535 5815])
            ("turn-on-bib-cite" function (:prototype-flag t) nil [5817 5914])
            ("defalias" code nil nil [6059 6097])
            ("context-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [6099 6376])
            ("context-en-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [6533 6836])
            ("context-nl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [6993 7294])
            ("font-latex-setup" function (:prototype-flag t) nil [7452 7580])
            ("BibTeX-auto-store" function (:prototype-flag t) nil [7751 7915])
            ("add-to-list" code nil nil [7917 7975])
            ("TeX-latex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7977 8292])
            ("add-to-list" code nil nil [8294 8353])
            ("docTeX-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [8355 8556])
            ("defalias" code nil nil [8558 8598])
            ("multi-prompt" function (:prototype-flag t) nil [8781 9221])
            ("multi-prompt-key-value" function (:prototype-flag t) nil [9223 9909])
            ("TeX-plain-tex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [10079 10413])
            ("ams-tex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [10415 10734])
            ("defalias" code nil nil [10940 11031])
            ("TeX-tex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [11033 11485])
            ("TeX-auto-generate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [11487 11674])
            ("TeX-auto-generate-global" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [11676 11798])
            ("TeX-submit-bug-report" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [11800 12160])
            ("TeX-install-toolbar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [12334 12430])
            ("LaTeX-install-toolbar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [12432 12532])
            ("TeX-fold-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [12669 12770])
            ("defalias" code nil nil [12772 12812])
            ("tex-font-setup" function (:prototype-flag t) nil [12962 13051])
            ("defalias" code nil nil [13203 13241])
            ("TeX-texinfo-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [13243 13490])
            ("japanese-plain-tex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [13663 13845])
            ("japanese-latex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [13847 14017])
            ("texmathp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [14183 14510])
            ("texmathp-match-switch" function (:prototype-flag t) nil [14512 14652])
            ("toolbarx-install-toolbar" function (:prototype-flag t) nil [14792 14840])
            ("auto-loads" package nil nil [14851 14872])
            ("tex-site" package nil nil [15020 15039]))          
      :file "tex-site.el"
      :pointmax 15066
      :fsize 15061
      :lastmodtime '(21542 62223 63758 159000)
      :unmatched-syntax nil)
    (semanticdb-table "latex.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("tex" include nil nil [981 995])
            ("tex-style" include nil nil [996 1016])
            ("LaTeX-optop" variable (:default-value "[") nil [1030 1105])
            ("LaTeX-optcl" variable (:default-value "]") nil [1107 1183])
            ("LaTeX-default-style" variable
               (:user-visible-flag t
                :default-value "article")
                nil [1196 1323])
            ("LaTeX-default-options" variable nil nil [1325 1503])
            ("make-variable-buffer-local" code nil nil [1505 1556])
            ("LaTeX-insert-into-comments" variable
               (:user-visible-flag t
                :default-value t)
                nil [1558 1791])
            ("LaTeX-newline" function nil nil [1793 2597])
            ("LaTeX-mode-syntax-table" variable (:default-value (copy-syntax-table TeX-mode-syntax-table)) nil [2618 2729])
            ("progn" code nil nil [2731 3007])
            ("LaTeX-section" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [3023 4256])
            ("LaTeX-current-section" function nil nil [4258 4587])
            ("LaTeX-down-section" function nil nil [4589 5330])
            ("LaTeX-up-section" function (:arguments ("arg")) nil [5332 5680])
            ("LaTeX-section-list" variable (:default-value (quote (("part" 0) ("chapter" 1) ("section" 2) ("subsection" 3) ("subsubsection" 4) ("paragraph" 5) ("subparagraph" 6)))) nil [5682 5939])
            ("LaTeX-section-list-add-locally" function (:arguments ("sections" "clean")) nil [5941 6888])
            ("LaTeX-section-name" function (:arguments ("level")) nil [6890 7120])
            ("LaTeX-section-level" function (:arguments ("name")) nil [7122 7335])
            ("TeX-outline-extra" variable nil nil [7337 7699])
            ("LaTeX-outline-regexp" function (:arguments ("anywhere")) nil [7701 8210])
            ("LaTeX-largest-level" variable nil nil [8212 8302])
            ("make-variable-buffer-local" code nil nil [8304 8353])
            ("LaTeX-largest-level" function nil nil [8355 8538])
            ("LaTeX-largest-level-set" function (:arguments ("section")) nil [8540 9137])
            ("LaTeX-outline-offset" function nil nil [9139 9271])
            ("TeX-look-at" function (:arguments ("list")) nil [9273 9563])
            ("LaTeX-outline-level" function nil nil [9565 10171])
            ("LaTeX-outline-name" function nil nil [10173 10426])
            ("add-hook" code nil nil [10428 10507])
            ("LaTeX-section-hook" variable (:default-value (quote (LaTeX-section-heading LaTeX-section-title LaTeX-section-section LaTeX-section-label))) nil [10509 12195])
            ("LaTeX-section-label" variable (:default-value (quote (("part" . "part:") ("chapter" . "chap:") ("section" . "sec:") ("subsection" . "sec:") ("subsubsection" . "sec:")))) nil [12198 13252])
            ("LaTeX-section-heading" function nil nil [13274 13745])
            ("LaTeX-section-title" function nil nil [13747 14145])
            ("LaTeX-section-toc" function nil nil [14147 14468])
            ("LaTeX-section-section" function nil nil [14470 15686])
            ("LaTeX-section-label" function nil nil [15688 16021])
            ("LaTeX-environment" customgroup (:user-visible-flag t) nil [16041 16123])
            ("LaTeX-default-environment" variable
               (:user-visible-flag t
                :default-value "itemize")
                nil [16125 16415])
            ("make-variable-buffer-local" code nil nil [16416 16471])
            ("LaTeX-default-document-environment" variable nil nil [16473 16687])
            ("make-variable-buffer-local" code nil nil [16688 16752])
            ("LaTeX-default-tabular-environment" variable (:default-value "tabular") nil [16754 16941])
            ("make-variable-buffer-local" code nil nil [16942 17005])
            ("LaTeX-environment-history" variable nil nil [17007 17045])
            ("LaTeX-current-environment" variable nil nil [17307 17345])
            ("LaTeX-environment" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [17347 19047])
            ("LaTeX-environment-menu" function (:arguments ("environment")) nil [19049 20130])
            ("LaTeX-close-environment" function
               (:user-visible-flag t
                :arguments ("reopen"))
                nil [20132 21236])
            ("LaTeX-after-insert-env-hooks" variable nil nil [21238 21518])
            ("LaTeX-insert-environment" function (:arguments ("environment" "extra")) nil [21520 24322])
            ("LaTeX-modify-environment" function (:arguments ("environment")) nil [24324 25086])
            ("LaTeX-current-environment" function (:arguments ("arg")) nil [25088 26280])
            ("docTeX-in-macrocode-p" function nil nil [26282 26632])
            ("LaTeX-document-style-hook" variable nil nil [26658 26833])
            ("LaTeX-env-document" function (:arguments ("ignore")) nil [26835 27796])
            ("LaTeX-float" variable nil nil [27798 28164])
            ("make-variable-buffer-local" code nil nil [28165 28206])
            ("LaTeX-top-caption-list" variable (:user-visible-flag t) nil [28208 28364])
            ("LaTeX-label" customgroup (:user-visible-flag t) nil [28366 28456])
            ("LaTeX-label-function" variable (:user-visible-flag t) nil [28458 28709])
            ("LaTeX-figure-label" variable
               (:user-visible-flag t
                :default-value "fig:")
                nil [28711 28852])
            ("LaTeX-table-label" variable
               (:user-visible-flag t
                :default-value "tab:")
                nil [28854 28993])
            ("LaTeX-default-format" variable nil nil [28995 29129])
            ("make-variable-buffer-local" code nil nil [29130 29180])
            ("LaTeX-default-width" variable (:default-value "1.0\\linewidth") nil [29182 29332])
            ("make-variable-buffer-local" code nil nil [29333 29382])
            ("LaTeX-default-position" variable nil nil [29384 29657])
            ("make-variable-buffer-local" code nil nil [29658 29710])
            ("LaTeX-equation-label" variable
               (:user-visible-flag t
                :default-value "eq:")
                nil [29712 29828])
            ("LaTeX-eqnarray-label" variable
               (:user-visible-flag t
                :default-value LaTeX-equation-label)
                nil [29830 29961])
            ("LaTeX-env-item" function (:arguments ("environment")) nil [29963 30900])
            ("LaTeX-label-alist" variable (:default-value (quote (("figure" . LaTeX-figure-label) ("table" . LaTeX-table-label) ("figure*" . LaTeX-figure-label) ("table*" . LaTeX-table-label) ("equation" . LaTeX-equation-label) ("eqnarray" . LaTeX-eqnarray-label)))) nil [30902 31462])
            ("make-variable-buffer-local" code nil nil [31464 31511])
            ("LaTeX-label" function (:arguments ("name" "type")) nil [31513 32733])
            ("LaTeX-env-figure" function (:arguments ("environment")) nil [32735 35410])
            ("LaTeX-env-array" function (:arguments ("environment")) nil [35412 36051])
            ("LaTeX-env-label" function (:arguments ("environment")) nil [36053 36275])
            ("LaTeX-env-list" function (:arguments ("environment")) nil [36277 36574])
            ("LaTeX-env-minipage" function (:arguments ("environment")) nil [36576 37163])
            ("LaTeX-env-tabular*" function (:arguments ("environment")) nil [37165 37938])
            ("LaTeX-env-picture" function (:arguments ("environment")) nil [37940 38534])
            ("LaTeX-env-bib" function (:arguments ("environment")) nil [38536 38836])
            ("LaTeX-env-contents" function (:arguments ("environment")) nil [38838 39217])
            ("LaTeX-env-args" function (:arguments ("environment" "args")) nil [39219 39461])
            ("LaTeX-item-list" variable nil nil [39479 39641])
            ("LaTeX-insert-item" function (:user-visible-flag t) nil [39643 40153])
            ("LaTeX-item-argument" function nil nil [40155 40299])
            ("LaTeX-item-bib" function nil nil [40301 40383])
            ("LaTeX-array-skipping-regexp" variable (:default-value (regexp-opt (quote ("[t]" "[b]" "")))) nil [40385 40599])
            ("LaTeX-tabular*-skipping-regexp" variable (:default-value (concat "{[^}]*}[ 	]*" (regexp-opt (quote ("[t]" "[b]" ""))))) nil [40601 40940])
            ("LaTeX-item-array" function (:arguments ("suppress")) nil [40942 41355])
            ("LaTeX-item-tabular*" function (:arguments ("suppress")) nil [41357 41771])
            ("LaTeX-insert-ampersands" function (:arguments ("regexp" "func")) nil [41773 43612])
            ("LaTeX-array-column-letters" variable (:default-value "clrp") nil [43614 43748])
            ("LaTeX-array-count-columns" function (:arguments ("start" "end")) nil [43750 44886])
            ("LaTeX-auto-style" variable nil nil [44900 44929])
            ("LaTeX-auto-arguments" variable nil nil [44930 44963])
            ("LaTeX-auto-optional" variable nil nil [44964 44996])
            ("LaTeX-auto-env-args" variable nil nil [44997 45029])
            ("TeX-auto-add-type" code nil nil [45031 45066])
            ("TeX-auto-add-type" code nil nil [45067 45104])
            ("TeX-auto-add-type" code nil nil [45105 45146])
            ("TeX-auto-add-type" code nil nil [45147 45206])
            ("TeX-auto-add-type" code nil nil [45207 45264])
            ("TeX-auto-add-type" code nil nil [45265 45304])
            ("TeX-auto-add-type" code nil nil [45305 45342])
            ("TeX-auto-add-type" code nil nil [45343 45379])
            ("TeX-auto-add-type" code nil nil [45380 45429])
            ("LaTeX-auto-minimal-regexp-list" variable (:default-value (quote (("\\\\document\\(style\\|class\\)\\(\\[\\(\\([^#\\%]\\|%[^
]*[
]\\)*\\)\\]\\)?{\\([^#\\.
]+?\\)}" (3 5 1) LaTeX-auto-style) ("\\\\use\\(package\\)\\(\\[\\([^]\\]*\\)\\]\\)?{\\(\\([^#}\\.%]\\|%[^
]*[
]\\)+?\\)}" (3 4 1) LaTeX-auto-style)))) nil [45431 45822])
            ("LaTeX-auto-label-regexp-list" variable (:default-value (quote (("\\\\label{\\([^
%\\{}]+\\)}" 1 LaTeX-auto-label)))) nil [45824 45979])
            ("LaTeX-auto-index-regexp-list" variable (:default-value (quote (("\\\\\\(index\\|glossary\\){\\([^}{]*\\({[^}{]*\\({[^}{]*\\({[^}{]*}[^}{]*\\)*}[^}{]*\\)*}[^}{]*\\)*\\)}" 2 LaTeX-auto-index-entry)))) nil [45981 46379])
            ("LaTeX-auto-class-regexp-list" variable (:default-value (quote (("\\\\Require\\(Package\\)\\(\\[\\([^#\\.%]*?\\)\\]\\)?{\\([^#\\.
]+?\\)}" (3 4 1) LaTeX-auto-style) ("\\\\Require\\(Package\\)WithOptions\\(\\){\\([^#\\.
]+?\\)}" (2 3 1) LaTeX-auto-style) ("\\\\Load\\(Class\\)\\(\\[\\([^#\\.%]*?\\)\\]\\)?{\\([^#\\.
]+?\\)}" (3 4 1) LaTeX-auto-style) ("\\\\Load\\(Class\\)WithOptions\\(\\){\\([^#\\.
]+?\\)}" (2 3 1) LaTeX-auto-style) ("\\\\DeclareRobustCommand\\*?{?\\\\\\([A-Za-z]+\\)}?\\[\\([0-9]+\\)\\]\\[\\([^
]*?\\)\\]" (1 2 3) LaTeX-auto-optional) ("\\\\DeclareRobustCommand\\*?{?\\\\\\([A-Za-z]+\\)}?\\[\\([0-9]+\\)\\]" (1 2) LaTeX-auto-arguments) ("\\\\DeclareRobustCommand\\*?{?\\\\\\([A-Za-z]+\\)}?" 1 TeX-auto-symbol) ("\\\\DeclareMath\\(?:Symbol\\|Delimiter\\|Accent\\|Radical\\){?\\\\\\([A-Za-z]+\\)}?" 1 TeX-auto-symbol) ("\\\\\\(Declare\\|Provide\\)Text\\(?:Command\\|Symbol\\|Accent\\|Composite\\){?\\\\\\([A-Za-z]+\\)}?" 1 TeX-auto-symbol) ("\\\\Declare\\(?:Text\\|Old\\)FontCommand{?\\\\\\([A-Za-z]+\\)}?" 1 TeX-auto-symbol)))) nil [46381 48009])
            ("LaTeX-auto-pagestyle-regexp-list" variable (:default-value (quote (("\\\\ps@\\([A-Za-z]+\\)" 1 LaTeX-auto-pagestyle)))) nil [48011 48171])
            ("LaTeX-auto-counter-regexp-list" variable (:default-value (quote (("\\\\newcounter *{\\([A-Za-z]+\\)}" 1 LaTeX-auto-counter) ("\\\\@definecounter{\\([A-Za-z]+\\)}" 1 LaTeX-auto-counter)))) nil [48173 48403])
            ("LaTeX-auto-length-regexp-list" variable (:default-value (quote (("\\\\newlength *{?\\\\\\([A-Za-z]+\\)}?" 1 LaTeX-auto-length)))) nil [48405 48572])
            ("LaTeX-auto-savebox-regexp-list" variable (:default-value (quote (("\\\\newsavebox *{?\\\\\\([A-Za-z]+\\)}?" 1 LaTeX-auto-savebox)))) nil [48574 48746])
            ("LaTeX-auto-regexp-list" variable (:default-value (append (let ((token TeX-token-char)) (\` (((\, (concat "\\\\\\(?:new\\|provide\\)command\\*?{?\\\\\\(" token "+\\)}?\\[\\([0-9]+\\)\\]\\[\\([^
]*\\)\\]")) (1 2 3) LaTeX-auto-optional) ((\, (concat "\\\\\\(?:new\\|provide\\)command\\*?{?\\\\\\(" token "+\\)}?\\[\\([0-9]+\\)\\]")) (1 2) LaTeX-auto-arguments) ((\, (concat "\\\\\\(?:new\\|provide\\)command\\*?{?\\\\\\(" token "+\\)}?")) 1 TeX-auto-symbol) ((\, (concat "\\\\newenvironment\\*?{?\\(" token "+\\)}?\\[\\([0-9]+\\)\\]\\[")) 1 LaTeX-auto-environment) ((\, (concat "\\\\newenvironment\\*?{?\\(" token "+\\)}?\\[\\([0-9]+\\)\\]")) (1 2) LaTeX-auto-env-args) ((\, (concat "\\\\newenvironment\\*?{?\\(" token "+\\)}?")) 1 LaTeX-auto-environment) ((\, (concat "\\\\newtheorem{\\(" token "+\\)}")) 1 LaTeX-auto-environment) ("\\\\input{\\(\\.*[^#}%\\\\\\.
]+\\)\\(\\.[^#}%\\\\\\.
]+\\)?}" 1 TeX-auto-file) ("\\\\include{\\(\\.*[^#}%\\\\\\.
]+\\)\\(\\.[^#}%\\\\\\.
]+\\)?}" 1 TeX-auto-file) ((\, (concat "\\\\bibitem{\\(" token "[^, 
	%\"#'()={}]*\\)}")) 1 LaTeX-auto-bibitem) ((\, (concat "\\\\bibitem\\[[^][
]+\\]{\\(" token "[^, 
	%\"#'()={}]*\\)}")) 1 LaTeX-auto-bibitem) ("\\\\bibliography{\\([^#}\\\\
]+\\)}" 1 LaTeX-auto-bibliography) ("\\\\addbibresource\\(?:\\[[^]]+\\]\\)?{\\([^#}\\\\
.]+\\)\\..+}" 1 LaTeX-auto-bibliography) ("\\\\add\\(?:global\\|section\\)bib\\(?:\\[[^]]+\\]\\)?{\\([^#}\\\\
.]+\\)\\(?:\\..+\\)?}" 1 LaTeX-auto-bibliography) ("\\\\newrefsection\\[\\([^]]+\\)\\]" 1 LaTeX-split-bibs) ("\\\\begin{refsection}\\[\\([^]]+\\)\\]" 1 LaTeX-split-bibs)))) LaTeX-auto-class-regexp-list LaTeX-auto-label-regexp-list LaTeX-auto-index-regexp-list LaTeX-auto-minimal-regexp-list LaTeX-auto-pagestyle-regexp-list LaTeX-auto-counter-regexp-list LaTeX-auto-length-regexp-list LaTeX-auto-savebox-regexp-list)) nil [48748 50781])
            ("LaTeX-split-bibs" function (:arguments ("match")) nil [50783 51212])
            ("LaTeX-auto-prepare" function nil nil [51214 51407])
            ("add-hook" code nil nil [51409 51462])
            ("LaTeX-listify-package-options" function (:arguments ("options")) nil [51464 52852])
            ("LaTeX-provided-class-options" variable nil nil [52854 53179])
            ("make-variable-buffer-local" code nil nil [53180 53238])
            ("LaTeX-provided-class-options-member" function (:arguments ("class" "option")) nil [53240 53502])
            ("LaTeX-provided-package-options" variable nil nil [53504 53891])
            ("make-variable-buffer-local" code nil nil [53892 53952])
            ("LaTeX-provided-package-options-member" function (:arguments ("package" "option")) nil [53954 54228])
            ("LaTeX-auto-cleanup" function nil nil [54230 58287])
            ("add-hook" code nil nil [58289 58342])
            ("LaTeX-add-bibliographies" function (:arguments ("after" "run-bib-style-hooks" "&rest" "activate")) nil [58344 58562])
            ("LaTeX-using-Biber" variable nil nil [58583 58656])
            ("make-variable-buffer-local" code nil nil [58657 58704])
            ("BibTeX-auto-store" function nil nil [58733 59429])
            ("BibTeX-auto-regexp-list" variable (:default-value (quote (("@[Ss][Tt][Rr][Ii][Nn][Gg]" 1 ignore) ("@[a-zA-Z]+[{(][ 	]*\\([^, 
	%\"#'()={}]*\\)" 1 LaTeX-auto-bibitem)))) nil [59431 59644])
            ("TeX-arg-conditional" function (:arguments ("optional" "expr" "then" "else")) nil [59672 60012])
            ("TeX-arg-eval" function (:arguments ("optional" "args")) nil [60014 60253])
            ("TeX-arg-label" function (:arguments ("optional" "prompt" "definition")) nil [60255 60822])
            ("TeX-arg-ref" function (:arguments ("optional" "prompt" "definition")) nil [60824 61160])
            ("TeX-arg-index-tag" function (:arguments ("optional" "prompt" "args")) nil [61162 61558])
            ("TeX-arg-index" function (:arguments ("optional" "prompt" "args")) nil [61560 62134])
            ("defalias" code nil nil [62136 62183])
            ("TeX-arg-macro" function (:arguments ("optional" "prompt" "definition")) nil [62185 62797])
            ("TeX-arg-environment" function (:arguments ("optional" "prompt" "definition")) nil [62799 63435])
            ("TeX-arg-cite" function (:arguments ("optional" "prompt" "definition")) nil [63466 63964])
            ("TeX-arg-counter" function (:arguments ("optional" "prompt" "definition")) nil [63966 64540])
            ("TeX-arg-savebox" function (:arguments ("optional" "prompt" "definition")) nil [64542 65194])
            ("TeX-arg-length" function (:arguments ("optional" "prompt" "initial-input" "definition")) nil [65196 66375])
            ("TeX-arg-file" function (:arguments ("optional" "prompt")) nil [66377 66753])
            ("TeX-arg-file-name" function (:arguments ("optional" "prompt")) nil [66755 67173])
            ("TeX-arg-file-name-sans-extension" function (:arguments ("optional" "prompt")) nil [67175 67638])
            ("TeX-arg-define-label" function (:arguments ("optional" "prompt")) nil [67640 67925])
            ("TeX-arg-define-macro" function (:arguments ("optional" "prompt")) nil [67927 68203])
            ("TeX-arg-define-environment" function (:arguments ("optional" "prompt")) nil [68205 68501])
            ("TeX-arg-define-cite" function (:arguments ("optional" "prompt")) nil [68503 68767])
            ("TeX-arg-define-counter" function (:arguments ("optional" "prompt")) nil [68769 69037])
            ("TeX-arg-define-savebox" function (:arguments ("optional" "prompt")) nil [69039 69307])
            ("TeX-arg-define-length" function (:arguments ("optional" "prompt")) nil [69309 69579])
            ("LaTeX-style-list" variable (:default-value (quote (("amsart") ("amsbook") ("article") ("beamer") ("book") ("dinbrief") ("foils") ("letter") ("memoir") ("minimal") ("prosper") ("report") ("scrartcl") ("scrbook") ("scrlttr2") ("scrreprt") ("slides")))) nil [69581 70265])
            ("LaTeX-global-class-files" variable nil nil [70267 70468])
            ("TeX-after-document-hook" variable nil nil [70470 70645])
            ("TeX-arg-document" function (:arguments ("optional" "ignore")) nil [70647 72456])
            ("LaTeX-after-usepackage-hook" variable nil nil [72458 72641])
            ("LaTeX-arg-usepackage-read-packages-with-options" function nil nil [72643 74497])
            ("LaTeX-arg-usepackage-insert" function (:arguments ("packages" "options")) nil [74499 74972])
            ("LaTeX-arg-usepackage" function (:arguments ("optional")) nil [74974 75272])
            ("LaTeX-insert-usepackages" function nil nil [75274 75847])
            ("LaTeX-search-files-type-alist" variable (:default-value (quote ((texinputs "${TEXINPUTS.latex}" ("tex/generic/" "tex/latex/") TeX-file-extensions) (docs "${TEXDOCS}" ("doc/") TeX-doc-extensions) (graphics "${TEXINPUTS}" ("tex/") LaTeX-includegraphics-extensions) (bibinputs "${BIBINPUTS}" ("bibtex/bib/") BibTeX-file-extensions) (bstinputs "${BSTINPUTS}" ("bibtex/bst/") BibTeX-style-extensions) (bbxinputs "" ("tex/latex/") BibLaTeX-style-extensions) (biberinputs "${BIBINPUTS}" ("bibtex/bib/") TeX-Biber-file-extensions)))) nil [75849 77396])
            ("TeX-arg-input-file-search" variable (:default-value t) nil [77398 77989])
            ("TeX-global-input-files" variable nil nil [77991 78198])
            ("TeX-arg-input-file" function (:arguments ("optional" "prompt" "local")) nil [78200 79494])
            ("BibTeX-global-style-files" variable nil nil [79496 79708])
            ("BibLaTeX-global-style-files" variable nil nil [79710 79930])
            ("TeX-arg-bibstyle" function (:arguments ("optional" "prompt")) nil [79932 80577])
            ("BibTeX-global-files" variable nil nil [80579 80779])
            ("TeX-Biber-global-files" variable nil nil [80781 80983])
            ("TeX-arg-bibliography" function (:arguments ("optional" "prompt")) nil [80985 81877])
            ("TeX-arg-corner" function (:arguments ("optional" "prompt")) nil [81879 82317])
            ("TeX-arg-lr" function (:arguments ("optional" "prompt")) nil [82319 82694])
            ("TeX-arg-tb" function (:arguments ("optional" "prompt")) nil [82696 83071])
            ("TeX-date-format" variable (:default-value "%Y/%m/%d") nil [83073 83205])
            ("TeX-arg-date" function (:arguments ("optional" "prompt")) nil [83207 83693])
            ("TeX-arg-version" function (:arguments ("optional" "prompt")) nil [83695 84122])
            ("TeX-arg-pagestyle" function (:arguments ("optional" "prompt" "definition")) nil [84124 84733])
            ("LaTeX-default-verb-delimiter" variable (:default-value 124) nil [84735 84862])
            ("TeX-arg-verb" function (:arguments ("optional" "ignore")) nil [84864 85459])
            ("TeX-arg-pair" function (:arguments ("optional" "first" "second")) nil [85461 85843])
            ("TeX-arg-size" function (:arguments ("optional")) nil [85845 86064])
            ("TeX-arg-coordinate" function (:arguments ("optional")) nil [86066 86301])
            ("TeX-braces-default-association" variable
               (:constant-flag t
                :default-value (quote (("[" . "]") ("\\{" . "\\}") ("(" . ")") ("|" . "|") ("\\|" . "\\|") ("/" . "/") ("\\backslash" . "\\backslash") ("\\lfloor" . "\\rfloor") ("\\lceil" . "\\rceil") ("\\langle" . "\\rangle"))))
                nil [86303 86573])
            ("TeX-braces-user-association" variable nil nil [86575 86951])
            ("TeX-braces-association" variable (:default-value (append TeX-braces-user-association TeX-braces-default-association)) nil [86953 87219])
            ("LaTeX-electric-left-right-brace" variable nil nil [87221 87387])
            ("TeX-left-right-braces" variable (:default-value (quote (("[") ("]") ("\\{") ("\\}") ("(") (")") ("|") ("\\|") ("/") ("\\backslash") ("\\lfloor") ("\\rfloor") ("\\lceil") ("\\rceil") ("\\langle") ("\\rangle") ("\\uparrow") ("\\Uparrow") ("\\downarrow") ("\\Downarrow") ("\\updownarrow") ("\\Updownarrow") (".")))) nil [87389 87762])
            ("LaTeX-left-right-macros-association" variable (:default-value (quote (("left" . "right") ("bigl" . "bigr") ("Bigl" . "Bigr") ("biggl" . "biggr") ("Biggl" . "Biggr")))) nil [87764 88053])
            ("TeX-arg-insert-braces" function (:arguments ("optional" "prompt")) nil [88055 89320])
            ("TeX-arg-insert-right-brace-maybe" function (:arguments ("optional")) nil [89322 90285])
            ("LaTeX-insert-left-brace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [90287 91988])
            ("LaTeX-insert-corresponding-right-macro-and-brace" function (:arguments ("lmacro" "lbrace" "optional" "prompt")) nil [91990 93492])
            ("LaTeX-find-preceeding-left-macro-name" function nil nil [93494 94322])
            ("LaTeX-default-author" variable (:default-value (quote user-full-name)) nil [94324 94585])
            ("LaTeX-arg-author" function (:arguments ("optional" "prompt")) nil [94587 95143])
            ("TeX-read-key-val" function (:arguments ("optional" "key-val-alist" "prompt")) nil [95145 95738])
            ("TeX-arg-key-val" function (:arguments ("optional" "key-val-alist" "prompt")) nil [95740 96284])
            ("LaTeX-verbatim-macros-with-delims" variable (:default-value (quote ("verb" "verb*"))) nil [96312 96723])
            ("LaTeX-verbatim-macros-with-delims-local" variable nil nil [96725 97149])
            ("make-variable-buffer-local" code nil nil [97150 97219])
            ("LaTeX-verbatim-macros-with-braces" variable nil nil [97221 97612])
            ("LaTeX-verbatim-macros-with-braces-local" variable nil nil [97614 98034])
            ("make-variable-buffer-local" code nil nil [98035 98104])
            ("LaTeX-verbatim-environments" variable (:default-value (quote ("verbatim" "verbatim*"))) nil [98106 98462])
            ("LaTeX-verbatim-environments-local" variable nil nil [98464 98853])
            ("make-variable-buffer-local" code nil nil [98854 98917])
            ("LaTeX-verbatim-macros-with-delims" function nil nil [98919 99103])
            ("LaTeX-verbatim-macros-with-braces" function nil nil [99105 99285])
            ("LaTeX-verbatim-environments" function nil nil [99287 99443])
            ("LaTeX-verbatim-macro-boundaries" function nil nil [99445 101211])
            ("LaTeX-current-verbatim-macro" function nil nil [101213 101602])
            ("LaTeX-verbatim-p" function (:arguments ("pos")) nil [101604 102086])
            ("LaTeX-syntactic-comments" variable (:default-value t) nil [102105 102416])
            ("LaTeX-indentation" customgroup (:user-visible-flag t) nil [104072 104186])
            ("LaTeX-indent-level" variable
               (:user-visible-flag t
                :default-value 2)
                nil [104188 104312])
            ("LaTeX-item-indent" variable
               (:user-visible-flag t
                :default-value (- LaTeX-indent-level))
                nil [104314 104468])
            ("LaTeX-item-regexp" variable
               (:user-visible-flag t
                :default-value "\\(bib\\)?item\\b")
                nil [104470 104621])
            ("LaTeX-indent-environment-list" variable (:default-value (quote (("verbatim" current-indentation) ("verbatim*" current-indentation) ("tabular" LaTeX-indent-tabular) ("tabular*" LaTeX-indent-tabular) ("align" LaTeX-indent-tabular) ("align*" LaTeX-indent-tabular) ("array" LaTeX-indent-tabular) ("eqnarray" LaTeX-indent-tabular) ("eqnarray*" LaTeX-indent-tabular) ("displaymath") ("equation") ("equation*") ("picture") ("tabbing") ("table") ("table*")))) nil [104623 105951])
            ("LaTeX--tabular-like-end" variable nil nil [105953 106194])
            ("LaTeX-indent-environment-check" variable
               (:user-visible-flag t
                :default-value t)
                nil [106196 106338])
            ("LaTeX-document-regexp" variable (:default-value "document") nil [106340 106503])
            ("LaTeX-verbatim-regexp" variable
               (:user-visible-flag t
                :default-value "verbatim\\*?")
                nil [106505 106672])
            ("LaTeX-begin-regexp" variable
               (:user-visible-flag t
                :default-value "begin\\b")
                nil [106674 106806])
            ("LaTeX-end-regexp" variable
               (:user-visible-flag t
                :default-value "end\\b")
                nil [106808 106934])
            ("LaTeX-left-right-indent-level" variable
               (:user-visible-flag t
                :default-value LaTeX-indent-level)
                nil [106936 107099])
            ("LaTeX-indent-comment-start-regexp" variable
               (:user-visible-flag t
                :default-value "%")
                nil [107101 107644])
            ("docTeX-indent-inner-fixed" variable (:default-value (\` (((\, (concat (regexp-quote TeX-esc) "\\(begin\\|end\\)[ 	]*{macrocode\\*?}")) 4 t) ((\, (concat (regexp-quote TeX-esc) "\\(begin\\|end\\)[ 	]*{\\(macro\\|environment\\)\\*?}")) 0 nil)))) nil [107646 108288])
            ("LaTeX-indent-line" function (:user-visible-flag t) nil [108290 111171])
            ("LaTeX-indent-inner-do" function (:arguments ("inner-indent")) nil [111173 111730])
            ("LaTeX-indent-outer-do" function (:arguments ("outer-indent")) nil [111732 112171])
            ("LaTeX-indent-calculate" function (:arguments ("force-type")) nil [112173 114400])
            ("LaTeX-indent-level-count" function nil nil [114402 115300])
            ("LaTeX-indent-calculate-last" function (:arguments ("force-type")) nil [115302 119295])
            ("LaTeX-current-indentation" function (:arguments ("force-type")) nil [119297 120278])
            ("LaTeX-back-to-indentation" function (:arguments ("force-type")) nil [120280 121180])
            ("LaTeX-fill-break-at-separators" variable (:default-value (quote (\\\( \\\) \\\[ \\\]))) nil [121196 121771])
            ("LaTeX-fill-break-before-code-comments" variable (:default-value t) nil [121773 122013])
            ("LaTeX-nospace-between-char-regexp" variable (:default-value (if (featurep (quote xemacs)) (if (and (boundp (quote word-across-newline)) word-across-newline) word-across-newline "\\(\\cj\\|\\cc\\|\\ct\\)") "\\c|")) nil [122015 122660])
            ("LaTeX-fill-newline-hook" variable nil nil [122662 122772])
            ("LaTeX-fill-region-as-paragraph" function
               (:user-visible-flag t
                :arguments ("from" "to" "justify-flag"))
                nil [122774 125374])
            ("LaTeX-fill-region-as-para-do" function
               (:user-visible-flag t
                :arguments ("from" "to" "justify" "nosqueeze" "squeeze-after"))
                nil [125563 132972])
            ("unless" code nil nil [133321 133451])
            ("LaTeX-fill-delete-newlines" function (:arguments ("from" "to" "justify" "nosqueeze" "squeeze-after")) nil [133453 135313])
            ("LaTeX-fill-move-to-break-point" function (:arguments ("linebeg")) nil [135315 144103])
            ("LaTeX-fill-newline" function nil nil [144269 145619])
            ("LaTeX-fill-paragraph" function
               (:user-visible-flag t
                :arguments ("justify"))
                nil [145621 150863])
            ("LaTeX-fill-code-comment" function (:arguments ("justify-flag")) nil [150865 152112])
            ("LaTeX-fill-region" function
               (:user-visible-flag t
                :arguments ("from" "to" "justify" "what"))
                nil [152114 153254])
            ("LaTeX-find-matching-end" function (:user-visible-flag t) nil [153256 154579])
            ("LaTeX-find-matching-begin" function (:user-visible-flag t) nil [154581 155867])
            ("LaTeX-mark-environment" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [155869 156720])
            ("LaTeX-fill-environment" function
               (:user-visible-flag t
                :arguments ("justify"))
                nil [156722 157045])
            ("LaTeX-fill-section" function
               (:user-visible-flag t
                :arguments ("justify"))
                nil [157047 157362])
            ("LaTeX-mark-section" function
               (:user-visible-flag t
                :arguments ("no-subsections"))
                nil [157364 158362])
            ("LaTeX-fill-buffer" function
               (:user-visible-flag t
                :arguments ("justify"))
                nil [158364 158599])
            ("LaTeX-paragraph-commands-internal" variable (:default-value (quote ("[" "]" "appendix" "begin" "caption" "chapter" "end" "include" "includeonly" "label" "maketitle" "noindent" "par" "paragraph" "part" "section" "subsection" "subsubsection" "tableofcontents" "newpage" "clearpage"))) nil [158618 158971])
            ("LaTeX-paragraph-commands-regexp-make" function nil nil [158973 159228])
            ("LaTeX-paragraph-commands" variable nil nil [159230 159599])
            ("LaTeX-paragraph-commands-regexp" variable (:default-value (LaTeX-paragraph-commands-regexp-make)) nil [159601 159760])
            ("LaTeX-set-paragraph-start" function nil nil [159762 160088])
            ("LaTeX-paragraph-commands-add-locally" function (:arguments ("commands")) nil [160090 160865])
            ("LaTeX-forward-paragraph" function (:arguments ("count")) nil [160867 162973])
            ("LaTeX-backward-paragraph" function (:arguments ("count")) nil [162975 165331])
            ("LaTeX-search-forward-comment-start" function (:arguments ("limit")) nil [165333 165963])
            ("LaTeX-math" customgroup (:user-visible-flag t) nil [165987 166061])
            ("LaTeX-math-keymap" variable (:default-value (make-sparse-keymap)) nil [166063 166158])
            ("LaTeX-math-abbrev-prefix" function nil nil [166160 166386])
            ("LaTeX-math-menu" variable (:default-value (quote ("Math" ("Greek Uppercase") ("Greek Lowercase") ("Binary Op") ("Relational") ("Arrows") ("Punctuation") ("Misc Symbol") ("Var Symbol") ("Log-like") ("Delimiters") ("Constructs") ("Accents") ("AMS")))) nil [166388 166779])
            ("LaTeX-math-menu-unicode" variable (:default-value (or (string-match "\\<GTK\\>" (emacs-version)) (eq window-system (quote w32)))) nil [166781 166998])
            ("LaTeX-math-abbrev-prefix" variable (:default-value "`") nil [167000 167643])
            ("LaTeX-math-initialize" function nil nil [167645 169620])
            ("LaTeX-dialect" variable
               (:constant-flag t
                :default-value :latex)
                nil [169622 169858])
            ("LaTeX-math-default" variable
               (:constant-flag t
                :default-value (quote ((97 "alpha" "Greek Lowercase" 945) (98 "beta" "Greek Lowercase" 946) (103 "gamma" "Greek Lowercase" 947) (100 "delta" "Greek Lowercase" 948) (101 "epsilon" "Greek Lowercase" 1013) (122 "zeta" "Greek Lowercase" 950) (104 "eta" "Greek Lowercase" 951) (106 "theta" "Greek Lowercase" 952) (nil "iota" "Greek Lowercase" 953) (107 "kappa" "Greek Lowercase" 954) (108 "lambda" "Greek Lowercase" 955) (109 "mu" "Greek Lowercase" 956) (110 "nu" "Greek Lowercase" 957) (120 "xi" "Greek Lowercase" 958) (112 "pi" "Greek Lowercase" 960) (114 "rho" "Greek Lowercase" 961) (115 "sigma" "Greek Lowercase" 963) (116 "tau" "Greek Lowercase" 964) (117 "upsilon" "Greek Lowercase" 965) (102 "phi" "Greek Lowercase" 981) (113 "chi" "Greek Lowercase" 967) (121 "psi" "Greek Lowercase" 968) (119 "omega" "Greek Lowercase" 969) ("v e" "varepsilon" "Greek Lowercase" 949) ("v j" "vartheta" "Greek Lowercase" 977) ("v p" "varpi" "Greek Lowercase" 982) ("v r" "varrho" "Greek Lowercase" 1009) ("v s" "varsigma" "Greek Lowercase" 962) ("v f" "varphi" "Greek Lowercase" 966) (71 "Gamma" "Greek Uppercase" 915) (68 "Delta" "Greek Uppercase" 916) (74 "Theta" "Greek Uppercase" 920) (76 "Lambda" "Greek Uppercase" 923) (88 "Xi" "Greek Uppercase" 926) (80 "Pi" "Greek Uppercase" 928) (83 "Sigma" "Greek Uppercase" 931) (85 "Upsilon" "Greek Uppercase" 978) (70 "Phi" "Greek Uppercase" 934) (89 "Psi" "Greek Uppercase" 936) (87 "Omega" "Greek Uppercase" 937) (99 LaTeX-math-cal "Cal-whatever") (nil "pm" "Binary Op" 177) (nil "mp" "Binary Op" 8723) (42 "times" "Binary Op" 215) (nil "div" "Binary Op" 247) (nil "ast" "Binary Op" 8727) (nil "star" "Binary Op" 8902) (nil "circ" "Binary Op" 8728) (nil "bullet" "Binary Op" 8729) (46 "cdot" "Binary Op" 8901) (45 "cap" "Binary Op" 8745) (43 "cup" "Binary Op" 8746) (nil "uplus" "Binary Op" 8846) (nil "sqcap" "Binary Op" 8851) (124 "vee" "Binary Op" 8744) (38 "wedge" "Binary Op" 8743) (92 "setminus" "Binary Op" 8726) (nil "wr" "Binary Op" 8768) (nil "diamond" "Binary Op" 8900) (nil "bigtriangleup" "Binary Op" 9651) (nil "bigtriangledown" "Binary Op" 9661) (nil "triangleleft" "Binary Op" 9665) (nil "triangleright" "Binary Op" 9655) (nil "lhd" "Binary Op" 8882) (nil "rhd" "Binary Op" 8883) (nil "unlhd" "Binary Op" 8884) (nil "unrhd" "Binary Op" 8885) (nil "oplus" "Binary Op" 8853) (nil "ominus" "Binary Op" 8854) (nil "otimes" "Binary Op" 8855) (nil "oslash" "Binary Op" 8709) (nil "odot" "Binary Op" 8857) (nil "bigcirc" "Binary Op" 9675) (nil "dagger" "Binary Op" 8224) (nil "ddagger" "Binary Op" 8225) (nil "amalg" "Binary Op" 10815) (60 "leq" "Relational" 8804) (62 "geq" "Relational" 8805) (nil "qed" "Relational" 8718) (nil "equiv" "Relational" 8801) (nil "models" "Relational" 8871) (nil "prec" "Relational" 8826) (nil "succ" "Relational" 8827) (nil "sim" "Relational" 8764) (nil "perp" "Relational" 10178) (nil "preceq" "Relational" 10927) (nil "succeq" "Relational" 10928) (nil "simeq" "Relational" 8771) (nil "mid" "Relational" 8739) (nil "ll" "Relational" 8810) (nil "gg" "Relational" 8811) (nil "asymp" "Relational" 8781) (nil "parallel" "Relational" 8741) (123 "subset" "Relational" 8834) (125 "supset" "Relational" 8835) (nil "approx" "Relational" 8776) (nil "bowtie" "Relational" 8904) (91 "subseteq" "Relational" 8838) (93 "supseteq" "Relational" 8839) (nil "cong" "Relational" 8773) (nil "Join" "Relational" 10781) (nil "sqsubset" "Relational" 8847) (nil "sqsupset" "Relational" 8848) (nil "neq" "Relational" 8800) (nil "smile" "Relational" 8995) (nil "sqsubseteq" "Relational" 8849) (nil "sqsupseteq" "Relational" 8850) (nil "doteq" "Relational" 8784) (nil "frown" "Relational" 8994) (105 "in" "Relational" 8712) (nil "ni" "Relational" 8715) (nil "propto" "Relational" 8733) (nil "vdash" "Relational" 8866) (nil "dashv" "Relational" 8867) (2 "leftarrow" "Arrows" 8592) (nil "Leftarrow" "Arrows" 8656) (6 "rightarrow" "Arrows" 8594) (nil "Rightarrow" "Arrows" 8658) (nil "leftrightarrow" "Arrows" 8596) (nil "Leftrightarrow" "Arrows" 8660) (nil "mapsto" "Arrows" 8614) (nil "hookleftarrow" "Arrows" 8617) (nil "leftharpoonup" "Arrows" 8636) (nil "leftharpoondown" "Arrows" 8637) (nil "longleftarrow" "Arrows" 10229) (nil "Longleftarrow" "Arrows" 10232) (nil "longrightarrow" "Arrows" 10230) (nil "Longrightarrow" "Arrows" 10233) (nil "longleftrightarrow" "Arrows" 10231) (nil "Longleftrightarrow" "Arrows" 10234) (nil "longmapsto" "Arrows" 10236) (nil "hookrightarrow" "Arrows" 8618) (nil "rightharpoonup" "Arrows" 8640) (nil "rightharpoondown" "Arrows" 8641) (16 "uparrow" "Arrows" 8593) (nil "Uparrow" "Arrows" 8657) (14 "downarrow" "Arrows" 8595) (nil "Downarrow" "Arrows" 8659) (nil "updownarrow" "Arrows" 8597) (nil "Updownarrow" "Arrows" 8661) (nil "nearrow" "Arrows" 8599) (nil "searrow" "Arrows" 8600) (nil "swarrow" "Arrows" 8601) (nil "nwarrow" "Arrows" 8598) (nil "ldots" "Punctuation" 8230) (nil "cdots" "Punctuation" 8943) (nil "vdots" "Punctuation" 8942) (nil "ddots" "Punctuation" 8945) (58 "colon" "Punctuation" 58) (78 "nabla" "Misc Symbol" 8711) (nil "aleph" "Misc Symbol" 8501) (nil "prime" "Misc Symbol" 8242) (65 "forall" "Misc Symbol" 8704) (73 "infty" "Misc Symbol" 8734) (nil "hbar" "Misc Symbol" 8463) (48 "emptyset" "Misc Symbol" 8709) (69 "exists" "Misc Symbol" 8707) (nil "surd" "Misc Symbol" 8730) (nil "Box" "Misc Symbol" 9633) (nil "triangle" "Misc Symbol" 9651) (nil "Diamond" "Misc Symbol" 9671) (nil "imath" "Misc Symbol" 120484) (nil "jmath" "Misc Symbol" 120485) (nil "ell" "Misc Symbol" 8467) (nil "neg" "Misc Symbol" 172) (47 "not" "Misc Symbol" 824) (nil "top" "Misc Symbol" 8868) (nil "flat" "Misc Symbol" 9837) (nil "natural" "Misc Symbol" 9838) (nil "sharp" "Misc Symbol" 9839) (nil "wp" "Misc Symbol" 8472) (nil "bot" "Misc Symbol" 8869) (nil "clubsuit" "Misc Symbol" 9827) (nil "diamondsuit" "Misc Symbol" 9826) (nil "heartsuit" "Misc Symbol" 9825) (nil "spadesuit" "Misc Symbol" 9824) (nil "mho" "Misc Symbol" 8487) (nil "Re" "Misc Symbol" 8476) (nil "Im" "Misc Symbol" 8465) (nil "angle" "Misc Symbol" 8736) (nil "partial" "Misc Symbol" 8706) (nil "sum" "Var Symbol" 8721) (nil "prod" "Var Symbol" 8719) (nil "coprod" "Var Symbol" 8720) (nil "int" "Var Symbol" 8747) (nil "oint" "Var Symbol" 8750) (nil "bigcap" "Var Symbol" 8898) (nil "bigcup" "Var Symbol" 8899) (nil "bigsqcup" "Var Symbol" 10758) (nil "bigvee" "Var Symbol" 8897) (nil "bigwedge" "Var Symbol" 8896) (nil "bigodot" "Var Symbol" 10752) (nil "bigotimes" "Var Symbol" 10754) (nil "bigoplus" "Var Symbol" 10753) (nil "biguplus" "Var Symbol" 10756) (nil "arccos" "Log-like") (nil "arcsin" "Log-like") (nil "arctan" "Log-like") (nil "arg" "Log-like") (3 "cos" "Log-like") (nil "cosh" "Log-like") (nil "cot" "Log-like") (nil "coth" "Log-like") (nil "csc" "Log-like") (nil "deg" "Log-like") (4 "det" "Log-like") (nil "dim" "Log-like") (5 "exp" "Log-like") (nil "gcd" "Log-like") (nil "hom" "Log-like") (31 "inf" "Log-like") (nil "ker" "Log-like") (nil "lg" "Log-like") (12 "lim" "Log-like") (nil "liminf" "Log-like") (nil "limsup" "Log-like") (nil "ln" "Log-like") (nil "log" "Log-like") (nil "max" "Log-like") (nil "min" "Log-like") (nil "Pr" "Log-like") (nil "sec" "Log-like") (19 "sin" "Log-like") (nil "sinh" "Log-like") (30 "sup" "Log-like") (20 "tan" "Log-like") (nil "tanh" "Log-like") (nil "{" "Delimiters" 123) (nil "}" "Delimiters" 125) (nil "lfloor" "Delimiters" 8970) (nil "rfloor" "Delimiters" 8971) (nil "lceil" "Delimiters" 8968) (nil "rceil" "Delimiters" 8969) (40 "langle" "Delimiters" 10216) (41 "rangle" "Delimiters" 10217) (nil "rmoustache" "Delimiters" 9137) (nil "lmoustache" "Delimiters" 9136) (nil "rgroup" "Delimiters" 9133) (nil "lgroup" "Delimiters" 9129) (nil "backslash" "Delimiters" 92) (nil "|" "Delimiters" 8214) (nil "arrowvert" "Delimiters") (nil "Arrowvert" "Delimiters") (nil "bracevert" "Delimiters") (nil "widetilde" "Constructs" 771) (nil "widehat" "Constructs" 770) (nil "overleftarrow" "Constructs" 8406) (nil "overrightarrow" "Constructs") (nil "overline" "Constructs" 773) (nil "underline" "Constructs" 818) (nil "overbrace" "Constructs" 65079) (nil "underbrace" "Constructs" 65080) (nil "sqrt" "Constructs" 8730) (nil "frac" "Constructs") (94 "hat" "Accents" 770) (nil "acute" "Accents" 769) (nil "bar" "Accents" 772) (nil "dot" "Accents" 775) (nil "breve" "Accents" 774) (nil "check" "Accents" 780) (nil "grave" "Accents" 768) (nil "vec" "Accents" 8407) (nil "ddot" "Accents" 776) (126 "tilde" "Accents" 771) (nil "mathring" "Accents" 778) (nil "beth" ("AMS" "Hebrew") 8502) (nil "daleth" ("AMS" "Hebrew") 8504) (nil "gimel" ("AMS" "Hebrew") 8503) (nil "digamma" ("AMS" "Greek Lowercase") 989) ("v k" "varkappa" ("AMS" "Greek Lowercase") 1008) ("v G" "varGamma" ("AMS" "Greek Uppercase") 120548) ("v D" "varDelta" ("AMS" "Greek Uppercase") 120549) ("v J" "varTheta" ("AMS" "Greek Uppercase") 120553) ("v L" "varLambda" ("AMS" "Greek Uppercase") 120556) ("v X" "varXi" ("AMS" "Greek Uppercase") 120559) ("v P" "varPi" ("AMS" "Greek Uppercase") 120561) ("v S" "varSigma" ("AMS" "Greek Uppercase") 120564) ("v U" "varUpsilon" ("AMS" "Greek Uppercase") 120566) ("v F" "varPhi" ("AMS" "Greek Uppercase") 120567) ("v Y" "varPsi" ("AMS" "Greek Uppercase") 120569) ("v W" "varOmega" ("AMS" "Greek Uppercase") 120570) (nil "dashrightarrow" ("AMS" "Arrows")) (nil "dashleftarrow" ("AMS" "Arrows")) (nil "leftleftarrows" ("AMS" "Arrows") 8647) (nil "leftrightarrows" ("AMS" "Arrows") 8646) (nil "Lleftarrow" ("AMS" "Arrows") 8666) (nil "twoheadleftarrow" ("AMS" "Arrows") 8606) (nil "leftarrowtail" ("AMS" "Arrows") 8610) (nil "looparrowleft" ("AMS" "Arrows") 8619) (nil "leftrightharpoons" ("AMS" "Arrows") 8651) (nil "curvearrowleft" ("AMS" "Arrows") 8630) (nil "circlearrowleft" ("AMS" "Arrows") 8634) (nil "Lsh" ("AMS" "Arrows") 8624) (nil "upuparrows" ("AMS" "Arrows") 8648) (nil "upharpoonleft" ("AMS" "Arrows") 8639) (nil "downharpoonleft" ("AMS" "Arrows") 8643) (nil "multimap" ("AMS" "Arrows") 8888) (nil "leftrightsquigarrow" ("AMS" "Arrows") 8621) (nil "looparrowright" ("AMS" "Arrows") 8620) (nil "rightleftharpoons" ("AMS" "Arrows") 8652) (nil "curvearrowright" ("AMS" "Arrows") 8631) (nil "circlearrowright" ("AMS" "Arrows")) (nil "Rsh" ("AMS" "Arrows") 8625) (nil "downdownarrows" ("AMS" "Arrows") 8650) (nil "upharpoonright" ("AMS" "Arrows") 8638) (nil "downharpoonright" ("AMS" "Arrows") 8642) (nil "rightsquigarrow" ("AMS" "Arrows") 8605) (nil "nleftarrow" ("AMS" "Neg Arrows") 8602) (nil "nrightarrow" ("AMS" "Neg Arrows") 8603) (nil "nLeftarrow" ("AMS" "Neg Arrows") 8653) (nil "nRightarrow" ("AMS" "Neg Arrows") 8655) (nil "nleftrightarrow" ("AMS" "Neg Arrows") 8622) (nil "nLeftrightarrow" ("AMS" "Neg Arrows") 8654) (nil "leqq" ("AMS" "Relational I") 8806) (nil "leqslant" ("AMS" "Relational I") 10877) (nil "eqslantless" ("AMS" "Relational I") 10901) (nil "lesssim" ("AMS" "Relational I") 8818) (nil "lessapprox" ("AMS" "Relational I") 10885) (nil "approxeq" ("AMS" "Relational I") 8778) (nil "lessdot" ("AMS" "Relational I") 8918) (nil "lll" ("AMS" "Relational I") 8920) (nil "lessgtr" ("AMS" "Relational I") 8822) (nil "lesseqgtr" ("AMS" "Relational I") 8922) (nil "lesseqqgtr" ("AMS" "Relational I") 10891) (nil "doteqdot" ("AMS" "Relational I") 8785) (nil "risingdotseq" ("AMS" "Relational I") 8787) (nil "fallingdotseq" ("AMS" "Relational I") 8786) (nil "backsim" ("AMS" "Relational I") 8765) (nil "backsimeq" ("AMS" "Relational I") 8909) (nil "subseteqq" ("AMS" "Relational I") 10949) (nil "Subset" ("AMS" "Relational I") 8912) (nil "sqsubset" ("AMS" "Relational I") 8847) (nil "preccurlyeq" ("AMS" "Relational I") 8828) (nil "curlyeqprec" ("AMS" "Relational I") 8926) (nil "precsim" ("AMS" "Relational I") 8830) (nil "precapprox" ("AMS" "Relational I") 10935) (nil "vartriangleleft" ("AMS" "Relational I") 8882) (nil "trianglelefteq" ("AMS" "Relational I") 8884) (nil "vDash" ("AMS" "Relational I") 8872) (nil "Vvdash" ("AMS" "Relational I") 8874) (nil "smallsmile" ("AMS" "Relational I") 8995) (nil "smallfrown" ("AMS" "Relational I") 8994) (nil "bumpeq" ("AMS" "Relational I") 8783) (nil "Bumpeq" ("AMS" "Relational I") 8782) (nil "geqq" ("AMS" "Relational II") 8807) (nil "geqslant" ("AMS" "Relational II") 10878) (nil "eqslantgtr" ("AMS" "Relational II") 10902) (nil "gtrsim" ("AMS" "Relational II") 8819) (nil "gtrapprox" ("AMS" "Relational II") 10886) (nil "gtrdot" ("AMS" "Relational II") 8919) (nil "ggg" ("AMS" "Relational II") 8921) (nil "gtrless" ("AMS" "Relational II") 8823) (nil "gtreqless" ("AMS" "Relational II") 8923) (nil "gtreqqless" ("AMS" "Relational II") 10892) (nil "eqcirc" ("AMS" "Relational II") 8790) (nil "circeq" ("AMS" "Relational II") 8791) (nil "triangleq" ("AMS" "Relational II") 8796) (nil "thicksim" ("AMS" "Relational II") 8764) (nil "thickapprox" ("AMS" "Relational II") 8776) (nil "supseteqq" ("AMS" "Relational II") 10950) (nil "Supset" ("AMS" "Relational II") 8913) (nil "sqsupset" ("AMS" "Relational II") 8848) (nil "succcurlyeq" ("AMS" "Relational II") 8829) (nil "curlyeqsucc" ("AMS" "Relational II") 8927) (nil "succsim" ("AMS" "Relational II") 8831) (nil "succapprox" ("AMS" "Relational II") 10936) (nil "vartriangleright" ("AMS" "Relational II") 8883) (nil "trianglerighteq" ("AMS" "Relational II") 8885) (nil "Vdash" ("AMS" "Relational II") 8873) (nil "shortmid" ("AMS" "Relational II") 8739) (nil "shortparallel" ("AMS" "Relational II") 8741) (nil "between" ("AMS" "Relational II") 8812) (nil "pitchfork" ("AMS" "Relational II") 8916) (nil "varpropto" ("AMS" "Relational II") 8733) (nil "blacktriangleleft" ("AMS" "Relational II") 9664) (nil "therefore" ("AMS" "Relational II") 8756) (nil "backepsilon" ("AMS" "Relational II") 1014) (nil "blacktriangleright" ("AMS" "Relational II") 9654) (nil "because" ("AMS" "Relational II") 8757) (nil "nless" ("AMS" "Neg Rel I") 8814) (nil "nleq" ("AMS" "Neg Rel I") 8816) (nil "nleqslant" ("AMS" "Neg Rel I")) (nil "nleqq" ("AMS" "Neg Rel I")) (nil "lneq" ("AMS" "Neg Rel I") 10887) (nil "lneqq" ("AMS" "Neg Rel I") 8808) (nil "lvertneqq" ("AMS" "Neg Rel I")) (nil "lnsim" ("AMS" "Neg Rel I") 8934) (nil "lnapprox" ("AMS" "Neg Rel I") 10889) (nil "nprec" ("AMS" "Neg Rel I") 8832) (nil "npreceq" ("AMS" "Neg Rel I")) (nil "precnsim" ("AMS" "Neg Rel I") 8936) (nil "precnapprox" ("AMS" "Neg Rel I") 10937) (nil "nsim" ("AMS" "Neg Rel I") 8769) (nil "nshortmid" ("AMS" "Neg Rel I") 8740) (nil "nmid" ("AMS" "Neg Rel I") 8740) (nil "nvdash" ("AMS" "Neg Rel I") 8876) (nil "nvDash" ("AMS" "Neg Rel I") 8877) (nil "ntriangleleft" ("AMS" "Neg Rel I") 8938) (nil "ntrianglelefteq" ("AMS" "Neg Rel I") 8940) (nil "nsubseteq" ("AMS" "Neg Rel I") 8840) (nil "subsetneq" ("AMS" "Neg Rel I") 8842) (nil "varsubsetneq" ("AMS" "Neg Rel I")) (nil "subsetneqq" ("AMS" "Neg Rel I") 10955) (nil "varsubsetneqq" ("AMS" "Neg Rel I")) (nil "ngtr" ("AMS" "Neg Rel II") 8815) (nil "ngeq" ("AMS" "Neg Rel II") 8817) (nil "ngeqslant" ("AMS" "Neg Rel II")) (nil "ngeqq" ("AMS" "Neg Rel II")) (nil "gneq" ("AMS" "Neg Rel II") 10888) (nil "gneqq" ("AMS" "Neg Rel II") 8809) (nil "gvertneqq" ("AMS" "Neg Rel II")) (nil "gnsim" ("AMS" "Neg Rel II") 8935) (nil "gnapprox" ("AMS" "Neg Rel II") 10890) (nil "nsucc" ("AMS" "Neg Rel II") 8833) (nil "nsucceq" ("AMS" "Neg Rel II")) (nil "succnsim" ("AMS" "Neg Rel II") 8937) (nil "succnapprox" ("AMS" "Neg Rel II") 10938) (nil "ncong" ("AMS" "Neg Rel II") 8775) (nil "nshortparallel" ("AMS" "Neg Rel II") 8742) (nil "nparallel" ("AMS" "Neg Rel II") 8742) (nil "nvDash" ("AMS" "Neg Rel II") 8877) (nil "nVDash" ("AMS" "Neg Rel II") 8879) (nil "ntriangleright" ("AMS" "Neg Rel II") 8939) (nil "ntrianglerighteq" ("AMS" "Neg Rel II") 8941) (nil "nsupseteq" ("AMS" "Neg Rel II") 8841) (nil "nsupseteqq" ("AMS" "Neg Rel II")) (nil "supsetneq" ("AMS" "Neg Rel II") 8843) (nil "varsupsetneq" ("AMS" "Neg Rel II")) (nil "supsetneqq" ("AMS" "Neg Rel II") 10956) (nil "varsupsetneqq" ("AMS" "Neg Rel II")) (nil "dotplus" ("AMS" "Binary Op") 8724) (nil "smallsetminus" ("AMS" "Binary Op") 8726) (nil "Cap" ("AMS" "Binary Op") 8914) (nil "Cup" ("AMS" "Binary Op") 8915) (nil "barwedge" ("AMS" "Binary Op") 8892) (nil "veebar" ("AMS" "Binary Op") 8891) (nil "doublebarwedge" ("AMS" "Binary Op") 8966) (nil "boxminus" ("AMS" "Binary Op") 8863) (nil "boxtimes" ("AMS" "Binary Op") 8864) (nil "boxdot" ("AMS" "Binary Op") 8865) (nil "boxplus" ("AMS" "Binary Op") 8862) (nil "divideontimes" ("AMS" "Binary Op") 8903) (nil "ltimes" ("AMS" "Binary Op") 8905) (nil "rtimes" ("AMS" "Binary Op") 8906) (nil "leftthreetimes" ("AMS" "Binary Op") 8907) (nil "rightthreetimes" ("AMS" "Binary Op") 8908) (nil "curlywedge" ("AMS" "Binary Op") 8911) (nil "curlyvee" ("AMS" "Binary Op") 8910) (nil "circleddash" ("AMS" "Binary Op") 8861) (nil "circledast" ("AMS" "Binary Op") 8859) (nil "circledcirc" ("AMS" "Binary Op") 8858) (nil "centerdot" ("AMS" "Binary Op")) (nil "intercal" ("AMS" "Binary Op") 8890) (nil "hbar" ("AMS" "Misc") 8463) (nil "hslash" ("AMS" "Misc") 8463) (nil "vartriangle" ("AMS" "Misc") 9653) (nil "triangledown" ("AMS" "Misc") 9663) (nil "square" ("AMS" "Misc") 9633) (nil "lozenge" ("AMS" "Misc") 9674) (nil "circledS" ("AMS" "Misc") 9416) (nil "angle" ("AMS" "Misc") 8736) (nil "measuredangle" ("AMS" "Misc") 8737) (nil "nexists" ("AMS" "Misc") 8708) (nil "mho" ("AMS" "Misc") 8487) (nil "Finv" ("AMS" "Misc") 8498) (nil "Game" ("AMS" "Misc") 8513) (nil "Bbbk" ("AMS" "Misc") 120156) (nil "backprime" ("AMS" "Misc") 8245) (nil "varnothing" ("AMS" "Misc") 8709) (nil "blacktriangle" ("AMS" "Misc") 9652) (nil "blacktriangledown" ("AMS" "Misc") 9662) (nil "blacksquare" ("AMS" "Misc") 9632) (nil "blacklozenge" ("AMS" "Misc") 10731) (nil "bigstar" ("AMS" "Misc") 9733) (nil "sphericalangle" ("AMS" "Misc") 8738) (nil "complement" ("AMS" "Misc") 8705) (nil "eth" ("AMS" "Misc") 240) (nil "diagup" ("AMS" "Misc") 9585) (nil "diagdown" ("AMS" "Misc") 9586) (nil "dddot" ("AMS" "Accents") 8411) (nil "ddddot" ("AMS" "Accents") 8412) (nil "bigl" ("AMS" "Delimiters")) (nil "bigr" ("AMS" "Delimiters")) (nil "Bigl" ("AMS" "Delimiters")) (nil "Bigr" ("AMS" "Delimiters")) (nil "biggl" ("AMS" "Delimiters")) (nil "biggr" ("AMS" "Delimiters")) (nil "Biggl" ("AMS" "Delimiters")) (nil "Biggr" ("AMS" "Delimiters")) (nil "lvert" ("AMS" "Delimiters")) (nil "rvert" ("AMS" "Delimiters")) (nil "lVert" ("AMS" "Delimiters")) (nil "rVert" ("AMS" "Delimiters")) (nil "ulcorner" ("AMS" "Delimiters") 8988) (nil "urcorner" ("AMS" "Delimiters") 8989) (nil "llcorner" ("AMS" "Delimiters") 8990) (nil "lrcorner" ("AMS" "Delimiters") 8991) (nil "nobreakdash" ("AMS" "Special")) (nil "leftroot" ("AMS" "Special")) (nil "uproot" ("AMS" "Special")) (nil "accentedsymbol" ("AMS" "Special")) (nil "xleftarrow" ("AMS" "Special")) (nil "xrightarrow" ("AMS" "Special")) (nil "overset" ("AMS" "Special")) (nil "underset" ("AMS" "Special")) (nil "dfrac" ("AMS" "Special")) (nil "genfrac" ("AMS" "Special")) (nil "tfrac" ("AMS" "Special")) (nil "binom" ("AMS" "Special")) (nil "dbinom" ("AMS" "Special")) (nil "tbinom" ("AMS" "Special")) (nil "smash" ("AMS" "Special")) (nil "eucal" ("AMS" "Special")) (nil "boldsymbol" ("AMS" "Special")) (nil "text" ("AMS" "Special")) (nil "intertext" ("AMS" "Special")) (nil "substack" ("AMS" "Special")) (nil "subarray" ("AMS" "Special")) (nil "sideset" ("AMS" "Special")))))
                nil [169860 195614])
            ("LaTeX-math-list" variable nil nil [195616 197002])
            ("define-minor-mode" code nil nil [197004 197495])
            ("defalias" code nil nil [197496 197540])
            ("easy-menu-define" code nil nil [197542 197659])
            ("LaTeX-math-insert-function" variable (:default-value (quote TeX-insert-macro)) nil [197661 197817])
            ("LaTeX-math-insert" function (:arguments ("string" "dollar")) nil [197819 198154])
            ("LaTeX-math-cal" function
               (:user-visible-flag t
                :arguments ("char" "dollar"))
                nil [198156 198612])
            ("LaTeX-fold-macro-spec-list" variable nil nil [198628 198901])
            ("LaTeX-fold-env-spec-list" variable nil nil [198903 199186])
            ("LaTeX-fold-math-spec-list" variable (:default-value (delete nil (mapcar (lambda (elt) (let ((tex-token (nth 1 elt)) (submenu (nth 2 elt)) (unicode (nth 3 elt)) uchar noargp) (when (and (fboundp (quote decode-char)) (integerp unicode)) (setq uchar (decode-char (quote ucs) unicode))) (when (listp submenu) (setq submenu (nth 1 submenu))) (setq noargp (not (string-match (concat "^" (regexp-opt (quote ("Constructs" "Accents")))) submenu))) (when (and (stringp tex-token) (integerp uchar) noargp) (\` ((\, (char-to-string uchar)) ((\, tex-token))))))) (\` ((nil "to" "" 8594) (nil "gets" "" 8592) (\,@ LaTeX-math-default)))))) nil [199188 200111])
            ("LaTeX-narrow-to-environment" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [200128 200650])
            ("put" code nil nil [200651 200697])
            ("LaTeX-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map TeX-mode-map) (define-key map "
" (quote reindent-then-newline-and-indent)) (define-key map "" (quote LaTeX-find-matching-end)) (define-key map "" (quote LaTeX-find-matching-begin)) (define-key map "" (quote LaTeX-fill-paragraph)) (define-key map "" (quote LaTeX-fill-region)) (define-key map "" (quote LaTeX-fill-section)) (define-key map "" (quote LaTeX-fill-environment)) (define-key map "." (quote LaTeX-mark-environment)) (define-key map "*" (quote LaTeX-mark-section)) (define-key map "" (quote LaTeX-environment)) (define-key map "
" (quote LaTeX-insert-item)) (or (key-binding "") (define-key map "" (quote LaTeX-insert-item))) (define-key map "]" (quote LaTeX-close-environment)) (define-key map "" (quote LaTeX-section)) (define-key map "~" (quote LaTeX-math-mode)) (define-key map "-" (quote LaTeX-babel-insert-hyphen)) (define-key map "(" (quote LaTeX-insert-left-brace)) (define-key map "{" (quote LaTeX-insert-left-brace)) (define-key map "[" (quote LaTeX-insert-left-brace)) map)) nil [200711 202234])
            ("LaTeX-environment-menu-name" variable (:default-value "Insert Environment  (C-c C-e)") nil [202236 202304])
            ("LaTeX-environment-menu-entry" function (:arguments ("entry")) nil [202306 202464])
            ("LaTeX-environment-modify-menu-name" variable (:default-value "Change Environment  (C-u C-c C-e)") nil [202466 202545])
            ("LaTeX-environment-modify-menu-entry" function (:arguments ("entry")) nil [202547 202721])
            ("LaTeX-section-enable-symbol" function (:arguments ("LEVEL")) nil [202723 202900])
            ("LaTeX-section-enable" function (:arguments ("entry")) nil [202902 203186])
            ("LaTeX-section-menu" function (:arguments ("level")) nil [203188 203380])
            ("LaTeX-section-menu-entry" function (:arguments ("entry")) nil [203382 203600])
            ("LaTeX-menu-max-items" variable
               (:user-visible-flag t
                :default-value 25)
                nil [203602 203940])
            ("LaTeX-submenu-name-format" variable
               (:user-visible-flag t
                :default-value "%-12.12s ... %.12s")
                nil [203942 204529])
            ("LaTeX-split-long-menu" function (:arguments ("menu")) nil [204531 205577])
            ("LaTeX-section-menu" variable nil nil [205579 205610])
            ("make-variable-buffer-local" code nil nil [205611 205659])
            ("LaTeX-section-menu-filter" function (:arguments ("ignored")) nil [205660 206047])
            ("LaTeX-environment-menu" variable nil nil [206049 206084])
            ("make-variable-buffer-local" code nil nil [206085 206137])
            ("LaTeX-environment-modify-menu" variable nil nil [206138 206180])
            ("make-variable-buffer-local" code nil nil [206181 206240])
            ("LaTeX-environment-menu-filter" function (:arguments ("menu")) nil [206241 207017])
            ("LaTeX-add-environments" function (:arguments ("after" "LaTeX-invalidate-environment-menu" "&rest" "activate")) nil [207019 207367])
            ("easy-menu-define" code nil nil [207369 207518])
            ("easy-menu-define" code nil nil [207520 211104])
            ("LaTeX-font-list" variable (:default-value (quote ((1 "" "" "\\mathcal{" "}") (2 "\\textbf{" "}" "\\mathbf{" "}") (3 "\\textsc{" "}") (5 "\\emph{" "}") (6 "\\textsf{" "}" "\\mathsf{" "}") (9 "\\textit{" "}" "\\mathit{" "}") (13 "\\textmd{" "}") (14 "\\textnormal{" "}" "\\mathnormal{" "}") (18 "\\textrm{" "}" "\\mathrm{" "}") (19 "\\textsl{" "}" "\\mathbb{" "}") (20 "\\texttt{" "}" "\\mathtt{" "}") (21 "\\textup{" "}") (4 "" "" t)))) nil [211106 212078])
            ("LaTeX-babel-hyphen" variable (:default-value "\"=") nil [212102 212531])
            ("LaTeX-babel-hyphen-after-hyphen" variable (:default-value t) nil [212533 212865])
            ("LaTeX-babel-hyphen-language-alist" variable nil nil [212867 213560])
            ("LaTeX-babel-hyphen-language" variable nil nil [213562 213920])
            ("make-variable-buffer-local" code nil nil [213921 213978])
            ("LaTeX-babel-insert-hyphen" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [213980 215861])
            ("put" code nil nil [215897 215949])
            ("LaTeX-enable-toolbar" variable (:default-value t) nil [215951 216052])
            ("LaTeX-maybe-install-toolbar" function nil nil [216054 216296])
            ("LaTeX-macro" customgroup (:user-visible-flag t) nil [216308 216435])
            ("TeX-arg-cite-note-p" variable (:user-visible-flag t) nil [216437 216564])
            ("TeX-arg-footnote-number-p" variable (:user-visible-flag t) nil [216566 216701])
            ("TeX-arg-item-label-p" variable (:user-visible-flag t) nil [216703 216884])
            ("TeX-arg-right-insert-p" variable
               (:user-visible-flag t
                :default-value t)
                nil [216886 217071])
            ("LaTeX-mode-hook" variable nil nil [217073 217172])
            ("TeX-abbrev-mode-setup" code nil nil [217174 217208])
            ("add-to-list" code nil nil [217225 217283])
            ("TeX-latex-mode" function (:user-visible-flag t) nil [217300 218651])
            ("TeX-abbrev-mode-setup" code nil nil [218653 218688])
            ("add-to-list" code nil nil [218705 218764])
            ("define-derived-mode" code nil nil [218781 219564])
            ("defalias" code nil nil [220109 220149])
            ("docTeX-clean-intermediate-suffixes" variable (:default-value TeX-clean-default-intermediate-suffixes) nil [220151 220492])
            ("docTeX-clean-output-suffixes" variable (:default-value TeX-clean-default-output-suffixes) nil [220494 220821])
            ("LaTeX-header-end" variable (:default-value (concat "^[^%
]*" (regexp-quote TeX-esc) "begin *" TeX-grop "document" TeX-grcl)) nil [220823 220989])
            ("LaTeX-trailer-start" variable (:default-value (concat "^[^%
]*" (regexp-quote TeX-esc) "end *" TeX-grop "document" TeX-grcl)) nil [220991 221161])
            ("LaTeX-clean-intermediate-suffixes" variable (:default-value TeX-clean-default-intermediate-suffixes) nil [221163 221503])
            ("LaTeX-clean-output-suffixes" variable (:default-value TeX-clean-default-output-suffixes) nil [221505 221831])
            ("LaTeX-common-initialization" function nil nil [221833 239264])
            ("LaTeX-imenu-create-index-function" function nil nil [239266 239807])
            ("LaTeX-builtin-opts" variable (:default-value (quote ("12pt" "11pt" "10pt" "twocolumn" "twoside" "draft"))) nil [239809 239940])
            ("LaTeX-209-to-2e" function (:user-visible-flag t) nil [239942 241400])
            ("LaTeX-env-beginning-pos-col" function nil nil [241402 241600])
            ("LaTeX-hanging-ampersand-position" function nil nil [241602 242130])
            ("LaTeX-indent-tabular" function nil nil [242132 242844])
            ("latex" package nil nil [242846 242862]))          
      :file "latex.el"
      :pointmax 242887
      :fsize 242886
      :lastmodtime '(21542 62198 39758 891000)
      :unmatched-syntax nil)
    (semanticdb-table "tex.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("when" code nil nil [1004 1083])
            ("custom" include nil nil [1085 1102])
            ("tex-site" include nil nil [1103 1122])
            ("cl" include nil nil [1144 1157])
            ("TeX-file" customgroup (:user-visible-flag t) nil [1160 1226])
            ("TeX-command" customgroup (:user-visible-flag t) nil [1228 1314])
            ("LaTeX" customgroup (:user-visible-flag t) nil [1316 1416])
            ("TeX-misc" customgroup (:user-visible-flag t) nil [1418 1487])
            ("TeX-command" variable (:default-value "tex") nil [1630 1727])
            ("TeX-Omega-command" variable (:default-value "omega") nil [1729 1843])
            ("LaTeX-command" variable (:default-value "latex") nil [1845 1942])
            ("LaTeX-Omega-command" variable (:default-value "lambda") nil [1944 2057])
            ("ConTeXt-engine" variable nil nil [2059 2252])
            ("ConTeXt-Omega-engine" variable (:default-value TeX-Omega-command) nil [2254 2481])
            ("make-obsolete-variable" code nil nil [2560 2632])
            ("TeX-mode-hook" variable nil nil [2634 2732])
            ("AmS-TeX-mode-hook" variable nil nil [2734 2840])
            ("TeX-command-list" variable (:default-value (\` (("TeX" "%(PDF)%(tex) %(extraopts) %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil (plain-tex-mode ams-tex-mode texinfo-mode) :help "Run plain TeX") ("LaTeX" "%`%l%(mode)%' %t" TeX-run-TeX nil (latex-mode doctex-mode) :help "Run LaTeX") ("Makeinfo" "makeinfo %(extraopts) %t" TeX-run-compile nil (texinfo-mode) :help "Run Makeinfo with Info output") ("Makeinfo HTML" "makeinfo %(extraopts) --html %t" TeX-run-compile nil (texinfo-mode) :help "Run Makeinfo with HTML output") ("AmSTeX" "%(PDF)amstex %(extraopts) %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil (ams-tex-mode) :help "Run AMSTeX") ("ConTeXt" "texexec --once --texutil %(extraopts) %(execopts)%t" TeX-run-TeX nil (context-mode) :help "Run ConTeXt once") ("ConTeXt Full" "texexec %(extraopts) %(execopts)%t" TeX-run-TeX nil (context-mode) :help "Run ConTeXt until completion") ("BibTeX" "bibtex %s" TeX-run-BibTeX nil t :help "Run BibTeX") ("Biber" "biber %s" TeX-run-Biber nil t :help "Run Biber") (\, (if (or window-system (getenv "DISPLAY")) (quote ("View" "%V" TeX-run-discard-or-function t t :help "Run Viewer")) (quote ("View" "dvi2tty -q -w 132 %s" TeX-run-command t t :help "Run Text viewer")))) ("Print" "%p" TeX-run-command t t :help "Print the file") ("Queue" "%q" TeX-run-background nil t :help "View the printer queue" :visible TeX-queue-command) ("File" "%(o?)dvips %d -o %f " TeX-run-command t t :help "Generate PostScript file") ("Index" "makeindex %s" TeX-run-command nil t :help "Create index file") ("Xindy" "texindy %s" TeX-run-command nil t :help "Run xindy to create index file") ("Check" "lacheck %s" TeX-run-compile nil (latex-mode) :help "Check LaTeX file for correctness") ("ChkTeX" "chktex -v6 %s" TeX-run-compile nil (latex-mode) :help "Check LaTeX file for common mistakes") ("Spell" "(TeX-ispell-document \"\")" TeX-run-function nil t :help "Spell-check the document") ("Clean" "TeX-clean" TeX-run-function nil t :help "Delete generated intermediate files") ("Clean All" "(TeX-clean t)" TeX-run-function nil t :help "Delete generated intermediate and output files") ("Other" "" TeX-run-command t t :help "Run an arbitrary command")))) nil [3164 8973])
            ("TeX-command-output-list" variable (:default-value (quote nil)) nil [8975 10099])
            ("LaTeX-version" variable (:default-value "2e") nil [10168 10527])
            ("LaTeX-command-style" variable (:default-value (quote (("" "%(PDF)%(latex) %(extraopts) %S%(PDFout)")))) nil [10626 11185])
            ("TeX-print-command" variable (:default-value "{ test -e %s.dvi && %(o?)dvips -P%p %r %s; } || lpr -P%p %o") nil [12025 12437])
            ("TeX-queue-command" variable (:default-value "lpq -P%p") nil [12439 12825])
            ("TeX-printer-list" variable (:default-value (quote (("Default" "{ test -e %s.dvi && %(o?)dvips -f %r %s | lpr; } || lpr %o" "lpq")))) nil [12927 14286])
            ("TeX-printer-default" variable (:default-value (or (getenv "PRINTER") (and TeX-printer-list (car (car TeX-printer-list))) "lp")) nil [14327 14543])
            ("TeX-print-style" variable (:default-value (quote (("^landscape$" "-t landscape")))) nil [14545 15021])
            ("TeX-command-extra-options" variable nil nil [15023 15147])
            ("make-variable-buffer-local" code nil nil [15148 15203])
            ("TeX-expand-list" variable (:default-value (quote (("%p" TeX-printer-query) ("%q" (lambda nil (TeX-printer-query t))) ("%V" (lambda nil (TeX-source-correlate-start-server-maybe) (TeX-view-command-raw))) ("%vv" (lambda nil (TeX-source-correlate-start-server-maybe) (TeX-output-style-check TeX-output-view-style))) ("%v" (lambda nil (TeX-source-correlate-start-server-maybe) (TeX-style-check TeX-view-style))) ("%r" (lambda nil (TeX-style-check TeX-print-style))) ("%l" (lambda nil (TeX-style-check LaTeX-command-style))) ("%(PDF)" (lambda nil (if (and (eq TeX-engine (quote default)) (or TeX-PDF-mode TeX-DVI-via-PDFTeX)) "pdf" ""))) ("%(PDFout)" (lambda nil (cond ((and (eq TeX-engine (quote xetex)) (not TeX-PDF-mode)) " -no-pdf") ((and (eq TeX-engine (quote luatex)) (not TeX-PDF-mode)) " --output-format=dvi") ((and (eq TeX-engine (quote default)) (not TeX-PDF-mode) TeX-DVI-via-PDFTeX) " \"\\pdfoutput=0 \"") (t "")))) ("%(mode)" (lambda nil (if TeX-interactive-mode "" " -interaction=nonstopmode"))) ("%(o?)" (lambda nil (if (eq TeX-engine (quote omega)) "o" ""))) ("%(tex)" (lambda nil (eval (nth 2 (assq TeX-engine (TeX-engine-alist)))))) ("%(latex)" (lambda nil (eval (nth 3 (assq TeX-engine (TeX-engine-alist)))))) ("%(execopts)" ConTeXt-expand-options) ("%(extraopts)" (lambda nil TeX-command-extra-options)) ("%S" TeX-source-correlate-expand-options) ("%dS" TeX-source-specials-view-expand-options) ("%cS" TeX-source-specials-view-expand-client) ("%(outpage)" (lambda nil (and TeX-source-correlate-mode (null TeX-source-correlate-output-page-function) (eq (TeX-source-correlate-method-active) (quote synctex)) (setq TeX-source-correlate-output-page-function (quote TeX-synctex-output-page))) (or (if TeX-source-correlate-output-page-function (funcall TeX-source-correlate-output-page-function)) "1"))) ("%s" file nil t) ("%t" file t t) ("%`" (lambda nil (setq TeX-command-pos t TeX-command-text ""))) (" \"\\" (lambda nil (if (eq TeX-command-pos t) (setq TeX-command-pos pos pos (+ 3 pos)) (setq pos (1+ pos))))) ("\"" (lambda nil (if (numberp TeX-command-pos) (setq TeX-command-text (concat TeX-command-text (substring command TeX-command-pos (1+ pos))) command (concat (substring command 0 TeX-command-pos) (substring command (1+ pos))) pos TeX-command-pos TeX-command-pos t) (setq pos (1+ pos))))) ("%'" (lambda nil (prog1 (if (stringp TeX-command-text) (progn (setq pos (+ pos (length TeX-command-text) 9) TeX-command-pos (and (string-match " " (funcall file t t)) "\"")) (concat TeX-command-text " \"\\input\"")) (setq TeX-command-pos nil) "") (setq TeX-command-text nil)))) ("%n" TeX-current-line) ("%d" file "dvi" t) ("%f" file "ps" t) ("%o" (lambda nil (funcall file (TeX-output-extension) t))) ("%b" TeX-current-file-name-master-relative) ("%a" (lambda nil (prin1-to-string (expand-file-name (buffer-file-name))))) ("%m" preview-create-subdirectory)))) nil [15353 19738])
            ("TeX-region-create" function (:prototype-flag t) nil [19984 20031])
            ("TeX-save-document" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [20032 20077])
            ("TeX-home-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [20078 20121])
            ("TeX-pin-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [20122 20164])
            ("TeX-command-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [20165 20211])
            ("TeX-command-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [20212 20258])
            ("TeX-command-master" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [20259 20305])
            ("TeX-command" function (:prototype-flag t) nil [20306 20347])
            ("TeX-kill-job" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [20348 20388])
            ("TeX-recenter-output-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [20389 20443])
            ("TeX-next-error" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [20444 20486])
            ("TeX-error-overview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [20487 20533])
            ("TeX-region-file" function (:prototype-flag t) nil [20534 20579])
            ("TeX-current-offset" function (:prototype-flag t) nil [20580 20628])
            ("TeX-process-set-variable" function (:prototype-flag t) nil [20629 20683])
            ("TeX-view" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [20684 20720])
            ("easymenu" include nil nil [20740 20759])
            ("TeX-menu-with-help" function (:arguments ("menu")) nil [21517 21676])
            ("if" code nil nil [20781 21514])
            ("defalias" code nil nil [21694 21788])
            ("eval-after-load" code nil nil [21854 22026])
            ("hack-one-local-variable" function (:arguments ("after" "TeX-hack-one-local-variable-after" "activate")) nil [22028 22567])
            ("TeX-overlay-priority-step" variable (:default-value 16) nil [22569 22772])
            ("when" code nil nil [22807 25016])
            ("condition-case" code nil nil [25361 25513])
            ("if" code nil nil [25515 26412])
            ("if" code nil nil [26414 26915])
            ("unless" code nil nil [26952 28376])
            ("TeX-delete-dups-by-car" function (:arguments ("alist" "keep-list")) nil [28378 29115])
            ("TeX-delete-duplicate-strings" function (:arguments ("list")) nil [29117 29426])
            ("TeX-sort-strings" function (:arguments ("list")) nil [29428 29546])
            ("TeX-output" customgroup (:user-visible-flag t) nil [29560 29643])
            ("TeX-display-help" variable (:default-value t) nil [29645 30039])
            ("TeX-debug-bad-boxes" variable nil nil [30041 30199])
            ("TeX-debug-warnings" variable nil nil [30201 30352])
            ("TeX-toggle-debug-bad-boxes" function (:user-visible-flag t) nil [30354 30609])
            ("TeX-toggle-debug-warnings" function (:user-visible-flag t) nil [30611 30856])
            ("TeX-base-mode-name" variable nil nil [30875 30929])
            ("make-variable-buffer-local" code nil nil [30930 30978])
            ("TeX-set-mode-name" function (:arguments ("changed" "local" "reset")) nil [30980 32528])
            ("TeX-mode-prefix" function (:arguments ("mode")) nil [32530 32884])
            ("TeX-view" customgroup (:user-visible-flag t) nil [32899 32977])
            ("TeX-view-style" variable (:default-value (\` (((\, (concat "^" (regexp-opt (quote ("a4paper" "a4dutch" "a4wide" "sem-a4"))) "$")) "%(o?)xdvi %dS -paper a4 %d") ((\, (concat "^" (regexp-opt (quote ("a5paper" "a5comb"))) "$")) "%(o?)xdvi %dS -paper a5 %d") ("^b5paper$" "%(o?)xdvi %dS -paper b5 %d") ("^letterpaper$" "%(o?)xdvi %dS -paper us %d") ("^legalpaper$" "%(o?)xdvi %dS -paper legal %d") ("^executivepaper$" "%(o?)xdvi %dS -paper 7.25x10.5in %d") ("^landscape$" "%(o?)xdvi %dS -paper a4r -s 0 %d") ("." "%(o?)xdvi %dS %d")))) nil [32979 34488])
            ("TeX-output-view-style" variable (:default-value (\` (("^dvi$" ("^landscape$" "^pstricks$\\|^pst-\\|^psfrag$") "%(o?)dvips -t landscape %d -o && gv %f") ("^dvi$" "^pstricks$\\|^pst-\\|^psfrag$" "%(o?)dvips %d -o && gv %f") ("^dvi$" ((\, (concat "^" (regexp-opt (quote ("a4paper" "a4dutch" "a4wide" "sem-a4"))) "$")) "^landscape$") "%(o?)xdvi %dS -paper a4r -s 0 %d") ("^dvi$" (\, (concat "^" (regexp-opt (quote ("a4paper" "a4dutch" "a4wide" "sem-a4"))) "$")) "%(o?)xdvi %dS -paper a4 %d") ("^dvi$" ((\, (concat "^" (regexp-opt (quote ("a5paper" "a5comb"))) "$")) "^landscape$") "%(o?)xdvi %dS -paper a5r -s 0 %d") ("^dvi$" (\, (concat "^" (regexp-opt (quote ("a5paper" "a5comb"))) "$")) "%(o?)xdvi %dS -paper a5 %d") ("^dvi$" "^b5paper$" "%(o?)xdvi %dS -paper b5 %d") ("^dvi$" "^letterpaper$" "%(o?)xdvi %dS -paper us %d") ("^dvi$" "^legalpaper$" "%(o?)xdvi %dS -paper legal %d") ("^dvi$" "^executivepaper$" "%(o?)xdvi %dS -paper 7.25x10.5in %d") ("^dvi$" "." "%(o?)xdvi %dS %d") ("^pdf$" "." "xpdf -remote %s -raise %o %(outpage)") ("^html?$" "." "netscape %o")))) nil [34490 36434])
            ("TeX-view-predicate-list-builtin" variable (:default-value (quote ((output-dvi (string-match "dvi" (TeX-output-extension))) (output-pdf (string-match "pdf" (TeX-output-extension))) (output-html (string-match "html" (TeX-output-extension))) (style-pstricks (TeX-match-style "^pstricks$\\|^pst-\\|^psfrag$")) (engine-omega (eq TeX-engine (quote omega))) (engine-xetex (eq TeX-engine (quote xetex))) (mode-io-correlate TeX-source-correlate-mode) (paper-landscape (TeX-match-style "\\`landscape\\'")) (paper-portrait (not (TeX-match-style "\\`landscape\\'"))) (paper-a4 (TeX-match-style "\\`a4paper\\|a4dutch\\|a4wide\\|sem-a4\\'")) (paper-a5 (TeX-match-style "\\`a5paper\\|a5comb\\'")) (paper-b5 (TeX-match-style "\\`b5paper\\'")) (paper-letter (TeX-match-style "\\`letterpaper\\'")) (paper-legal (TeX-match-style "\\`legalpaper\\'")) (paper-executive (TeX-match-style "\\`executivepaper\\'"))))) nil [36470 37617])
            ("TeX-view-predicate-list" variable nil nil [37619 38891])
            ("and" code nil nil [39012 39071])
            ("TeX-evince-dbus-p" function (:arguments ("options")) nil [39073 40309])
            ("TeX-evince-sync-view" function nil nil [40311 41231])
            ("TeX-view-program-list-builtin" variable (:default-value (cond ((eq system-type (quote windows-nt)) (quote (("Yap" ("yap -1" (mode-io-correlate " -s %n%b") " %o")) ("dvips and start" "dvips %d -o && start \"\" %f") ("start" "start \"\" %o")))) ((eq system-type (quote darwin)) (quote (("Preview.app" "open -a Preview.app %o") ("Skim" "open -a Skim.app %o") ("displayline" "displayline %n %o %b") ("open" "open %o")))) (t (\` (("xdvi" ("%(o?)xdvi" (mode-io-correlate " -sourceposition \"%n %b\" -editor \"%cS\"") ((paper-a4 paper-portrait) " -paper a4") ((paper-a4 paper-landscape) " -paper a4r") ((paper-a5 paper-portrait) " -paper a5") ((paper-a5 paper-landscape) " -paper a5r") (paper-b5 " -paper b5") (paper-letter " -paper us") (paper-legal " -paper legal") (paper-executive " -paper 7.25x10.5in") " %d")) ("dvips and gv" "%(o?)dvips %d -o && gv %f") ("gv" "gv %o") ("xpdf" ("xpdf -remote %s -raise %o" (mode-io-correlate " %(outpage)"))) ("Evince" (\, (if (TeX-evince-dbus-p :forward) (quote TeX-evince-sync-view) (\` ("evince" (mode-io-correlate (\, (if (string-match "--page-index" (shell-command-to-string "evince --help")) " -i %(outpage)" " -p %(outpage)"))) " %o"))))) ("Okular" ("okular --unique %o" (mode-io-correlate "#src:%n%a"))) ("xdg-open" "xdg-open %o")))))) nil [41233 43031])
            ("TeX-view-program-list" variable nil nil [43033 45410])
            ("TeX-view-program-selection" variable (:default-value (cond ((eq system-type (quote windows-nt)) (quote (((output-dvi style-pstricks) "dvips and start") (output-dvi "Yap") (output-pdf "start") (output-html "start")))) ((eq system-type (quote darwin)) (quote ((output-dvi "open") (output-pdf "open") (output-html "open")))) (t (quote (((output-dvi style-pstricks) "dvips and gv") (output-dvi "xdvi") (output-pdf "Evince") (output-html "xdg-open")))))) nil [45842 47956])
            ("TeX-match-style" function (:arguments ("regexp")) nil [47958 48091])
            ("TeX-view-match-predicate" function (:arguments ("predicate")) nil [48093 48763])
            ("TeX-view-command-raw" function nil nil [48765 50009])
            ("TeX-engine-alist-builtin" variable (:default-value (quote ((default "Default" TeX-command LaTeX-command ConTeXt-engine) (xetex "XeTeX" "xetex" "xelatex" "xetex") (luatex "LuaTeX" "luatex" "lualatex --jobname=%s" "luatex") (omega "Omega" TeX-Omega-command LaTeX-Omega-command ConTeXt-Omega-engine)))) nil [50023 50538])
            ("TeX-engine-alist" variable nil nil [50540 51505])
            ("TeX-engine-alist" function nil nil [51507 51893])
            ("TeX-engine" variable (:default-value (quote default)) nil [51895 52229])
            ("make-variable-buffer-local" code nil nil [52230 52270])
            ("put" code nil nil [52271 52379])
            ("TeX-engine-set" function
               (:user-visible-flag t
                :arguments ("type"))
                nil [52381 52872])
            ("define-minor-mode" code nil nil [52874 53042])
            ("defalias" code nil nil [53043 53085])
            ("make-obsolete" code nil nil [53086 53141])
            ("make-obsolete-variable" code nil nil [53142 53202])
            ("TeX-source-correlate-method" variable (:default-value (quote ((dvi . source-specials) (pdf . synctex)))) nil [53236 54400])
            ("TeX-source-correlate-output-page-function" variable nil nil [54402 54610])
            ("make-variable-buffer-local" code nil nil [54611 54682])
            ("TeX-source-correlate-start-server" variable (:default-value (quote ask)) nil [54684 54909])
            ("when" code nil nil [54910 55033])
            ("TeX-source-correlate-start-server-asked" variable nil nil [55035 55151])
            ("TeX-source-correlate-start-server-flag" variable nil nil [55153 55375])
            ("TeX-source-correlate-gnuserv-p" function nil nil [55377 55651])
            ("TeX-source-correlate-server-enabled-p" function nil nil [55653 55936])
            ("TeX-source-correlate-start-server-maybe" function nil nil [55938 56857])
            ("TeX-source-correlate-determine-method" function nil nil [56859 57223])
            ("TeX-source-correlate-method-active" function nil nil [57225 57638])
            ("TeX-source-correlate-expand-options" function nil nil [57640 58373])
            ("TeX-source-correlate-map" variable (:default-value (let ((map (make-sparse-keymap))) map)) nil [58375 58699])
            ("TeX-source-correlate-sync-source" function (:arguments ("file" "linecol" "ignored")) nil [58701 59895])
            ("define-minor-mode" code nil nil [59897 61131])
            ("defalias" code nil nil [61133 61196])
            ("make-obsolete" code nil nil [61197 61273])
            ("defalias" code nil nil [61274 61338])
            ("put" code nil nil [61339 61406])
            ("put" code nil nil [61529 61582])
            ("setq" code nil nil [61583 61704])
            ("TeX-source-specials-tex-flags" variable (:default-value "-src-specials") nil [61728 61889])
            ("TeX-source-specials-places" variable nil nil [61891 62394])
            ("TeX-source-specials-view-position-flags" variable (:default-value "-sourceposition \"%n %b\"") nil [62396 62589])
            ("TeX-source-specials-view-editor-flags" variable (:default-value "-editor \"%cS\"") nil [62591 62756])
            ("TeX-source-specials-view-gnuclient-flags" variable (:default-value "-q +%%l %%f") nil [62758 62912])
            ("TeX-source-specials-view-emacsclient-flags" variable (:default-value "--no-wait +%%l %%f") nil [62914 63071])
            ("TeX-source-specials-view-expand-client" function nil nil [63118 63768])
            ("TeX-source-specials-view-expand-options" function (:arguments ("viewer")) nil [63770 64377])
            ("TeX-synctex-tex-flags" variable (:default-value "--synctex=1") nil [64392 64495])
            ("TeX-synctex-output-page-1" function (:arguments ("file")) nil [64497 65082])
            ("TeX-synctex-output-page" function nil nil [65084 65977])
            ("TeX-mode-p" variable nil nil [66010 66077])
            ("make-variable-buffer-local" code nil nil [66078 66118])
            ("TeX-mode-set" function (:arguments ("var" "value")) nil [66120 66210])
            ("TeX-PDF-mode" variable (:default-value t) nil [66212 66302])
            ("put" code nil nil [66303 66357])
            ("define-minor-mode" code nil nil [66359 66806])
            ("add-to-list" code nil nil [66807 66857])
            ("TeX-global-PDF-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [66859 67141])
            ("defalias" code nil nil [67143 67181])
            ("TeX-PDF-mode-parsed" variable nil nil [67183 67268])
            ("make-variable-buffer-local" code nil nil [67270 67319])
            ("TeX-PDF-mode-parsed" function (:arguments ("arg")) nil [67321 68042])
            ("TeX-PDF-mode-on" function nil nil [68044 68132])
            ("TeX-PDF-mode-off" function nil nil [68134 68225])
            ("TeX-DVI-via-PDFTeX" variable nil nil [68227 68356])
            ("define-minor-mode" code nil nil [68358 68526])
            ("defalias" code nil nil [68527 68581])
            ("add-to-list" code nil nil [68582 68640])
            ("TeX-command-name" customgroup (:user-visible-flag t) nil [68656 68752])
            ("TeX-command-BibTeX" variable
               (:user-visible-flag t
                :default-value "BibTeX")
                nil [68754 68893])
            ("make-variable-buffer-local" code nil nil [68896 68944])
            ("TeX-command-Biber" variable
               (:user-visible-flag t
                :default-value "Biber")
                nil [68946 69082])
            ("make-variable-buffer-local" code nil nil [69085 69132])
            ("TeX-command-Show" variable
               (:user-visible-flag t
                :default-value "View")
                nil [69134 69324])
            ("make-variable-buffer-local" code nil nil [69327 69373])
            ("TeX-command-Print" variable (:default-value "Print") nil [69375 69511])
            ("TeX-command-Queue" variable (:default-value "Queue") nil [69513 69649])
            ("TeX-trailer-start" variable nil nil [69651 69747])
            ("make-variable-buffer-local" code nil nil [69750 69797])
            ("TeX-header-end" variable nil nil [69799 69889])
            ("make-variable-buffer-local" code nil nil [69892 69936])
            ("TeX-command-default" variable nil nil [69938 70039])
            ("make-variable-buffer-local" code nil nil [70042 70091])
            ("put" code nil nil [70093 70149])
            ("TeX-clean-default-intermediate-suffixes" variable (:default-value (quote ("\\.aux" "\\.bbl" "\\.blg" "\\.brf" "\\.fot" "\\.glo" "\\.gls" "\\.idx" "\\.ilg" "\\.ind" "\\.lof" "\\.log" "\\.lot" "\\.nav" "\\.out" "\\.snm" "\\.toc" "\\.url" "\\.synctex\\.gz" "\\.bcf" "\\.run\\.xml" "\\.fls" "-blx\\.bib"))) nil [70151 70557])
            ("TeX-clean-default-output-suffixes" variable (:default-value (quote ("\\.dvi" "\\.pdf" "\\.ps" "\\.xdv"))) nil [70559 70752])
            ("TeX-clean-confirm" variable (:default-value t) nil [70754 70867])
            ("dired-mark-pop-up" function (:prototype-flag t) nil [70869 70906])
            ("TeX-clean" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [70908 72200])
            ("TeX-master" variable
               (:user-visible-flag t
                :default-value t)
                nil [72220 73192])
            ("make-variable-buffer-local" code nil nil [73193 73233])
            ("put" code nil nil [73234 73353])
            ("TeX-one-master" variable
               (:user-visible-flag t
                :default-value "\\.\\(texi?\\|dtx\\)$")
                nil [73355 73869])
            ("TeX-convert-master" variable
               (:user-visible-flag t
                :default-value t)
                nil [73871 74040])
            ("TeX-transient-master" variable nil nil [74189 74222])
            ("TeX-dwim-master" function nil nil [74224 74504])
            ("TeX-master-file-ask" function (:user-visible-flag t) nil [74506 75646])
            ("TeX-master-file" function
               (:user-visible-flag t
                :arguments ("extension" "nondirectory" "ask"))
                nil [75648 78571])
            ("TeX-master-directory" function nil nil [78573 78913])
            ("TeX-add-local-master" function nil nil [78915 80007])
            ("TeX-local-master-p" function nil nil [80009 80357])
            ("TeX-style-global" variable
               (:user-visible-flag t
                :default-value (expand-file-name "style" TeX-data-directory))
                nil [80376 80609])
            ("TeX-auto-local" variable
               (:user-visible-flag t
                :default-value "auto")
                nil [80611 80839])
            ("TeX-style-local" variable
               (:user-visible-flag t
                :default-value "style")
                nil [80841 81063])
            ("TeX-split-string" function (:arguments ("regexp" "string")) nil [81065 81738])
            ("TeX-parse-path" function (:arguments ("env")) nil [81740 82388])
            ("TeX-tree-expand" function (:arguments ("vars" "program" "subdirs")) nil [82390 83757])
            ("TeX-macro-global" function nil nil [83759 84045])
            ("TeX-macro-private" function nil nil [84047 84217])
            ("TeX-macro-global" variable (:default-value (TeX-macro-global)) nil [84219 84393])
            ("TeX-macro-private" variable (:default-value (or (append (TeX-parse-path "TEXINPUTS") (TeX-parse-path "BIBINPUTS")) (TeX-macro-private))) nil [84395 84642])
            ("TeX-auto-private" variable (:default-value (list (expand-file-name TeX-auto-local (or (and (boundp (quote user-emacs-directory)) (concat user-emacs-directory "auctex/")) "~/.emacs.d/auctex/")))) nil [84644 85021])
            ("if" code nil nil [85023 85131])
            ("TeX-style-private" variable (:default-value (list (expand-file-name TeX-style-local (or (and (boundp (quote user-emacs-directory)) (concat user-emacs-directory "auctex/")) "~/.emacs.d/auctex/")))) nil [85133 85503])
            ("if" code nil nil [85505 85616])
            ("TeX-style-path" variable (:default-value (let ((path)) (mapcar (lambda (file) (when file (add-to-list (quote path) file t))) (append (list TeX-auto-global TeX-style-global) TeX-auto-private TeX-style-private (list TeX-auto-local TeX-style-local))) path)) nil [85618 86280])
            ("TeX-check-path" variable (:default-value (append (list ".") TeX-macro-private TeX-macro-global)) nil [86282 86553])
            ("TeX-style-hook-list" variable nil nil [86572 87360])
            ("TeX-style-hook-dialect" variable (:default-value :latex) nil [87362 87819])
            ("TeX-byte-compile" variable (:user-visible-flag t) nil [87821 87956])
            ("TeX-bibtex-set-BibTeX-dialect" function nil nil [87958 88133])
            ("TeX-load-style" function (:arguments ("style")) nil [88135 89240])
            ("TeX-load-style-file" function (:arguments ("file")) nil [89242 89784])
            ("TeX-style-hook-dialect-weight-alist" variable
               (:constant-flag t
                :default-value (quote ((:latex . 1) (:texinfo . 2) (:bibtex . 4))))
                nil [89786 89985])
            ("TeX-shdex-eval" function (:arguments ("dialect-expr")) nil [89987 90529])
            ("TeX-shdex-or" function (:arguments ("args")) nil [90531 90667])
            ("TeX-shdex-and" function (:arguments ("args")) nil [90669 90807])
            ("TeX-shdex-nor" function (:arguments ("args")) nil [90809 90937])
            ("TeX-shdex-not" function (:arguments ("arg")) nil [90939 91055])
            ("TeX-shdex-in-p" function (:arguments ("dialect" "dialect-set")) nil [91057 91333])
            ("TeX-shdex-listify" function (:arguments ("dialect-set")) nil [91335 91611])
            ("TeX-add-style-hook" function (:arguments ("style" "hook" "dialect-expr")) nil [91613 92646])
            ("TeX-keep-hooks-in-dialect" function (:arguments ("hooks" "dialect-list")) nil [92648 93128])
            ("TeX-unload-style" function (:arguments ("style" "dialect-list")) nil [93130 93675])
            ("TeX-virgin-style" variable (:default-value (if (and TeX-auto-global (file-directory-p TeX-auto-global)) "virtex" "NoVirtexSymbols")) nil [93677 93881])
            ("TeX-active-styles" variable nil nil [93883 93966])
            ("make-variable-buffer-local" code nil nil [93968 94015])
            ("TeX-run-style-hooks" function (:arguments ("styles")) nil [94017 95503])
            ("TeX-parse-self" variable nil nil [95505 95638])
            ("TeX-style-hook-applied-p" variable nil nil [95640 95737])
            ("make-variable-buffer-local" code nil nil [95739 95793])
            ("TeX-update-style-hook" variable nil nil [95795 95888])
            ("TeX-update-style" function (:arguments ("force")) nil [95890 96876])
            ("TeX-remove-style-hook" variable nil nil [96878 96985])
            ("make-variable-buffer-local" code nil nil [96987 97038])
            ("TeX-remove-style" function nil nil [97040 97236])
            ("TeX-style-list" function nil nil [97238 97377])
            ("TeX-esc" variable (:default-value "\\") nil [97403 97452])
            ("make-variable-buffer-local" code nil nil [97454 97491])
            ("TeX-grop" variable (:default-value "{") nil [97493 97549])
            ("make-variable-buffer-local" code nil nil [97551 97589])
            ("TeX-grcl" variable (:default-value "}") nil [97591 97647])
            ("make-variable-buffer-local" code nil nil [97649 97687])
            ("TeX-macro" customgroup (:user-visible-flag t) nil [97730 97826])
            ("TeX-complete-word" variable
               (:user-visible-flag t
                :default-value (quote ispell-complete-word))
                nil [97828 97962])
            ("TeX-complete-expert-commands" variable nil nil [97964 98509])
            ("TeX-complete-make-expert-command-functions" function (:arguments ("thing" "list-var" "prefix")) nil [98511 99840])
            ("TeX-complete-make-expert-command-functions" code nil nil [99842 99916])
            ("TeX-complete-make-expert-command-functions" code nil nil [99917 100006])
            ("TeX-complete-list" variable nil nil [100008 100455])
            ("TeX-complete-symbol" function (:user-visible-flag t) nil [100457 102174])
            ("TeX-default-macro" variable
               (:user-visible-flag t
                :default-value "ref")
                nil [102176 102318])
            ("make-variable-buffer-local" code nil nil [102320 102367])
            ("TeX-insert-braces" variable
               (:user-visible-flag t
                :default-value t)
                nil [102369 102546])
            ("TeX-insert-braces-alist" variable nil nil [102548 103114])
            ("make-variable-buffer-local" code nil nil [103115 103168])
            ("TeX-insert-macro-default-style" variable (:default-value (quote show-optional-args)) nil [103170 104001])
            ("TeX-arg-opening-brace" variable nil nil [104003 104166])
            ("TeX-arg-closing-brace" variable nil nil [104168 104330])
            ("TeX-after-insert-macro-hook" variable nil nil [104332 104413])
            ("TeX-macro-history" variable nil nil [104415 104445])
            ("TeX-insert-macro" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [104447 105433])
            ("TeX-electric-macro-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-completion-map) (define-key map " " (quote minibuffer-complete-and-exit)) map)) nil [105435 105626])
            ("TeX-electric-macro" function (:user-visible-flag t) nil [105628 106172])
            ("TeX-parse-macro" function (:arguments ("symbol" "args")) nil [106174 108906])
            ("TeX-arg-string" function (:arguments ("optional" "prompt" "initial-input")) nil [108908 109401])
            ("TeX-parse-arguments" function (:arguments ("args")) nil [109403 110510])
            ("TeX-parse-argument" function (:arguments ("optional" "arg")) nil [110512 112447])
            ("TeX-argument-insert" function (:arguments ("name" "optional" "prefix")) nil [112449 112986])
            ("TeX-argument-prompt" function (:arguments ("optional" "prompt" "default" "complete")) nil [112988 113388])
            ("TeX-string-divide-number-unit" function (:arguments ("string")) nil [113390 113770])
            ("TeX-default-unit-for-image" variable (:default-value "cm") nil [113772 113983])
            ("TeX-arg-maybe" function (:arguments ("symbol" "list" "form")) nil [113985 114122])
            ("TeX-arg-free" function (:arguments ("optional" "args")) nil [114124 114413])
            ("TeX-arg-literal" function (:arguments ("optional" "args")) nil [114415 114623])
            ("TeX-install-font-lock" variable (:default-value (quote font-latex-setup)) nil [114644 114977])
            ("TeX-format-list" variable
               (:user-visible-flag t
                :default-value (quote (("JLATEX" japanese-latex-mode "\\\\\\(documentstyle\\|documentclass\\)[^%
]*{\\(j[s-]?\\|t\\)\\(article\\|report\\|book\\|slides\\)") ("JTEX" japanese-plain-tex-mode "-- string likely in Japanese TeX --") ("AMSTEX" ams-tex-mode "\\\\document\\b") ("CONTEXT" context-mode "\\\\\\(start\\(text\\|tekst\\|proje[ck]t\\|proiect\\|produ[ck]t\\|produs\\|environment\\|omgeving\\|umgebung\\|prostredi\\|mediu\\|component\\|onderdeel\\|komponent[ea]\\|componenta\\)\\|inizia\\(testo\\|progetto\\|prodotto\\|ambiente\\|componente\\)\\)\\|%.*?interface=") ("LATEX" latex-mode "\\\\\\(begin\\|\\(?:sub\\)\\{0,2\\}section\\|chapter\\|documentstyle\\|documentclass\\)\\b") ("TEX" plain-tex-mode "."))))
                nil [114993 116172])
            ("TeX-default-mode" variable
               (:user-visible-flag t
                :default-value (quote latex-mode))
                nil [116174 116409])
            ("TeX-force-default-mode" variable (:user-visible-flag t) nil [116411 116557])
            ("TeX-tex-mode" function (:user-visible-flag t) nil [116574 117689])
            ("VirTeX-common-initialization" function nil nil [117691 121253])
            ("if" code nil nil [121272 121641])
            ("TeX-parse" customgroup (:user-visible-flag t) nil [121656 121732])
            ("TeX-auto-parser" variable (:default-value (quote ((styles TeX-auto-file TeX-run-style-hooks)))) nil [121734 121804])
            ("TeX-auto-parser-temporary" variable
               (:constant-flag t
                :default-value 1)
                nil [122147 122185])
            ("TeX-auto-parser-add" variable
               (:constant-flag t
                :default-value 2)
                nil [122186 122218])
            ("TeX-auto-parser-local" variable
               (:constant-flag t
                :default-value 3)
                nil [122219 122253])
            ("TeX-auto-parser-change" variable
               (:constant-flag t
                :default-value 4)
                nil [122254 122289])
            ("TeX-auto-add-information" function (:arguments ("name" "entries")) nil [122291 122727])
            ("TeX-auto-list-information" function (:arguments ("name")) nil [122729 123788])
            ("TeX-auto-add-type" function (:arguments ("name" "prefix" "plural")) nil [123790 125309])
            ("TeX-auto-add-type" code nil nil [125311 125345])
            ("TeX-auto-apply-hook" variable nil nil [125347 125448])
            ("TeX-auto-apply" function nil nil [125450 125637])
            ("TeX-auto-apply-entry" function (:arguments ("entry")) nil [125639 125875])
            ("TeX-safe-auto-write" function nil nil [125877 126113])
            ("TeX-auto-save" variable (:user-visible-flag t) nil [126115 126247])
            ("TeX-auto-untabify" variable (:user-visible-flag t) nil [126249 126371])
            ("TeX-auto-write" function nil nil [126373 127099])
            ("TeX-macro-default" variable
               (:user-visible-flag t
                :default-value (car-safe TeX-macro-private))
                nil [127101 127246])
            ("TeX-auto-default" variable
               (:user-visible-flag t
                :default-value (car-safe TeX-auto-private))
                nil [127248 127415])
            ("TeX-ignore-file" variable (:default-value "\\(^\\|[/\\]\\)\\(\\.\\|\\.\\.\\|RCS\\|SCCS\\|CVS\\|babel\\..*\\)$") nil [127417 127701])
            ("TeX-file-recurse" variable (:default-value t) nil [127703 128029])
            ("TeX-auto-generate" function
               (:user-visible-flag t
                :arguments ("tex" "auto"))
                nil [128046 129790])
            ("TeX-auto-generate-global" function (:user-visible-flag t) nil [129807 130255])
            ("TeX-auto-store" function (:arguments ("file")) nil [130257 131497])
            ("TeX-auto-entry-clear-p" function (:arguments ("entry")) nil [131499 131724])
            ("TeX-auto-insert" function (:arguments ("entry" "skip")) nil [131726 132316])
            ("TeX-auto-ignore" variable (:default-value (quote ("csname" "filedate" "fileversion" "docdate" "next" "labelitemi" "labelitemii" "labelitemiii" "labelitemiv" "labelitemv" "labelenumi" "labelenumii" "labelenumiii" "labelenumiv" "labelenumv" "theenumi" "theenumii" "theenumiii" "theenumiv" "theenumv" "document" "par" "do" "expandafter"))) nil [132318 132709])
            ("TeX-auto-regexp-list" variable (:default-value (quote TeX-auto-full-regexp-list)) nil [132711 133274])
            ("make-variable-buffer-local" code nil nil [133277 133327])
            ("TeX-auto-add-regexp" function (:arguments ("regexp")) nil [133329 133650])
            ("TeX-auto-empty-regexp-list" variable (:default-value (quote (("<IMPOSSIBLE>\\(\\'\\`\\)" 1 ignore)))) nil [133652 133791])
            ("TeX-token-char" variable (:default-value (if (featurep (quote mule)) "\\(?:[a-zA-Z]\\|\\cj\\)" "[a-zA-Z]")) nil [133793 134118])
            ("plain-TeX-auto-regexp-list" variable (:default-value (let ((token TeX-token-char)) (\` (((\, (concat "\\\\def\\\\\\(" token "+\\)[^a-zA-Z@]")) 1 TeX-auto-symbol-check) ((\, (concat "\\\\let\\\\\\(" token "+\\)[^a-zA-Z@]")) 1 TeX-auto-symbol-check) ((\, (concat "\\\\font\\\\\\(" token "+\\)[^a-zA-Z@]")) 1 TeX-auto-symbol) ((\, (concat "\\\\chardef\\\\\\(" token "+\\)[^a-zA-Z@]")) 1 TeX-auto-symbol) ((\, (concat "\\\\new\\(?:count\\|dimen\\|muskip\\|skip\\)\\\\\\(" token "+\\)[^a-zA-Z@]")) 1 TeX-auto-symbol) ((\, (concat "\\\\newfont{?\\\\\\(" token "+\\)}?")) 1 TeX-auto-symbol) ((\, (concat "\\\\typein\\[\\\\\\(" token "+\\)\\]")) 1 TeX-auto-symbol) ("\\\\input +\\(\\.*[^#%\\\\\\.
]+\\)\\(\\.[^#%\\\\\\.
]+\\)?" 1 TeX-auto-file) ((\, (concat "\\\\mathchardef\\\\\\(" token "+\\)[^a-zA-Z@]")) 1 TeX-auto-symbol))))) nil [134120 135057])
            ("TeX-auto-full-regexp-list" variable (:default-value plain-TeX-auto-regexp-list) nil [135059 135188])
            ("TeX-auto-prepare-hook" variable nil nil [135190 135282])
            ("TeX-auto-cleanup-hook" variable nil nil [135284 135375])
            ("TeX-auto-parse-length" variable (:default-value 999999) nil [135377 135522])
            ("make-variable-buffer-local" code nil nil [135525 135576])
            ("TeX-auto-x-parse-length" variable nil nil [135578 135817])
            ("make-variable-buffer-local" code nil nil [135820 135873])
            ("TeX-auto-x-regexp-list" variable (:default-value (quote LaTeX-auto-label-regexp-list)) nil [135875 136468])
            ("make-variable-buffer-local" code nil nil [136471 136523])
            ("TeX-regexp-group-count" function (:arguments ("regexp")) nil [136525 136863])
            ("TeX-auto-parse-region" function (:arguments ("regexp-list" "beg" "end")) nil [136865 138500])
            ("TeX-auto-parse" function nil nil [138503 139608])
            ("TeX-auto-clear-entry" function (:arguments ("entry")) nil [139610 139744])
            ("LaTeX-auto-end-symbol" variable nil nil [139746 139780])
            ("TeX-auto-symbol-check" function (:arguments ("match")) nil [139782 140304])
            ("TeX-file-extension" customgroup (:user-visible-flag t) nil [140328 140422])
            ("TeX-file-extensions" variable
               (:user-visible-flag t
                :default-value (quote ("tex" "sty" "cls" "ltx" "texi" "txi" "texinfo" "dtx")))
                nil [140424 140639])
            ("TeX-all-extensions" variable (:default-value (quote ("[^.
]+"))) nil [140641 140787])
            ("TeX-default-extension" variable
               (:user-visible-flag t
                :default-value "tex")
                nil [140789 140911])
            ("make-variable-buffer-local" code nil nil [140915 140966])
            ("TeX-doc-extensions" variable (:default-value (quote ("dvi" "pdf" "ps" "txt" "html" "dvi.gz" "pdf.gz" "ps.gz" "txt.gz" "html.gz" "dvi.bz2" "pdf.bz2" "ps.bz2" "txt.bz2" "html.bz2"))) nil [140968 141173])
            ("docTeX-default-extension" variable
               (:user-visible-flag t
                :default-value "dtx")
                nil [141175 141303])
            ("TeX-output-extension" variable nil nil [141305 141562])
            ("make-variable-buffer-local" code nil nil [141566 141616])
            ("TeX-Biber-file-extensions" variable (:default-value (quote ("bib" "ris" "xml"))) nil [141618 141788])
            ("BibTeX-file-extensions" variable (:default-value (quote ("bib"))) nil [141790 141946])
            ("BibLaTeX-style-extensions" variable (:default-value (quote ("bbx"))) nil [141948 142110])
            ("BibTeX-style-extensions" variable (:default-value (quote ("bst"))) nil [142112 142270])
            ("TeX-match-extension" function (:arguments ("file" "extensions")) nil [142272 142682])
            ("TeX-strip-extension" function (:arguments ("string" "extensions" "nodir" "nostrip")) nil [142684 143706])
            ("TeX-tree-roots" function nil nil [143729 143996])
            ("TeX-tree-roots" variable (:default-value (TeX-tree-roots)) nil [143998 144141])
            ("TeX-kpathsea-path-delimiter" variable (:default-value t) nil [144143 144397])
            ("TeX-search-files-kpathsea" function (:arguments ("var" "extensions" "scope" "nodir" "strip")) nil [144601 146176])
            ("TeX-search-files" function (:arguments ("directories" "extensions" "nodir" "strip")) nil [146178 147770])
            ("TeX-search-files-type-alist" variable (:default-value (quote ((texinputs "${TEXINPUTS}" ("tex/") TeX-file-extensions) (docs "${TEXDOCS}" ("doc/") TeX-doc-extensions) (graphics "${TEXINPUTS}" ("tex/") LaTeX-includegraphics-extensions) (bibinputs "${BIBINPUTS}" ("bibtex/bib/") BibTeX-file-extensions) (bstinputs "${BSTINPUTS}" ("bibtex/bst/") BibTeX-style-extensions)))) nil [148031 149106])
            ("TeX-search-files-by-type" function (:arguments ("filetype" "scope" "nodir" "strip")) nil [149108 150918])
            ("TeX-narrow-to-group" function (:user-visible-flag t) nil [150935 151342])
            ("put" code nil nil [151343 151381])
            ("TeX-car-string-lessp" function (:arguments ("s1" "s2")) nil [151529 151720])
            ("TeX-listify" function (:arguments ("elt")) nil [151722 151869])
            ("TeX-member" function (:arguments ("elt" "list" "how")) nil [151871 152110])
            ("TeX-elt-of-list-member" function (:arguments ("elts" "list")) nil [152112 152306])
            ("TeX-assoc" function (:arguments ("key" "list")) nil [152308 152583])
            ("TeX-match-buffer" function (:arguments ("n")) nil [152585 152808])
            ("TeX-function-p" function (:arguments ("arg")) nil [152810 153062])
            ("TeX-booleanp" function (:arguments ("arg")) nil [153064 153151])
            ("TeX-looking-at-backward" function (:arguments ("regexp" "limit")) nil [153153 153536])
            ("TeX-current-line" function nil nil [153538 153636])
            ("TeX-current-file-name-master-relative" function nil nil [153638 153816])
            ("TeX-near-bobp" function nil nil [153818 153981])
            ("TeX-deactivate-mark" function nil nil [153983 154275])
            ("defalias" code nil nil [154277 154367])
            ("TeX-add-to-alist" function (:arguments ("alist-var" "new-alist")) nil [154369 155383])
            ("TeX-mode-syntax-table" variable (:default-value (make-syntax-table)) nil [155403 155494])
            ("make-variable-buffer-local" code nil nil [155497 155548])
            ("progn" code nil nil [155550 156539])
            ("TeX-command-current" variable (:default-value (quote TeX-command-master)) nil [156559 156671])
            ("TeX-command-select-master" function (:user-visible-flag t) nil [156715 156935])
            ("TeX-command-select-buffer" function (:user-visible-flag t) nil [156937 157146])
            ("TeX-command-select-region" function (:user-visible-flag t) nil [157148 157357])
            ("TeX-command-force" variable nil nil [157359 157389])
            ("TeX-command-menu" function (:arguments ("name")) nil [157495 157644])
            ("TeX-command-menu-print" function (:arguments ("printer" "command" "name")) nil [157646 157984])
            ("TeX-command-menu-printer-entry" function (:arguments ("entry" "lookup" "command" "name")) nil [157986 158220])
            ("TeX-command-menu-entry" function (:arguments ("entry")) nil [158222 158919])
            ("TeX-command-menu-name" variable
               (:constant-flag t
                :default-value "Command")
                nil [158921 159041])
            ("TeX-electric-escape" variable nil nil [159055 159189])
            ("TeX-electric-sub-and-superscript" variable nil nil [159191 159345])
            ("TeX-newline-function" variable (:default-value (quote newline)) nil [159347 159592])
            ("TeX-insert-backslash" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [159594 159874])
            ("TeX-insert-sub-or-superscript" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [159876 160270])
            ("TeX-newline" function (:user-visible-flag t) nil [160272 160413])
            ("TeX-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "}" (quote up-list)) (define-key map "#" (quote TeX-normal-mode)) (define-key map "" (quote TeX-normal-mode)) (define-key map "?" (quote TeX-doc)) (define-key map "	" (quote TeX-goto-info-page)) (define-key map "" (quote TeX-newline)) (define-key map "\"" (quote TeX-insert-quote)) (define-key map "$" (quote TeX-insert-dollar)) (define-key map "{" (quote TeX-insert-braces)) (define-key map "" (quote TeX-font)) (define-key map "" (quote TeX-insert-macro)) (define-key map "\\" (quote TeX-insert-backslash)) (define-key map "^" (quote TeX-insert-sub-or-superscript)) (define-key map "_" (quote TeX-insert-sub-or-superscript)) (define-key map "	" (quote TeX-complete-symbol)) (define-key map "'" (quote TeX-comment-or-uncomment-paragraph)) (define-key map ":" (quote TeX-comment-or-uncomment-region)) (define-key map "\"" (quote TeX-uncomment)) (define-key map ";" (quote TeX-comment-or-uncomment-region)) (define-key map "%" (quote TeX-comment-or-uncomment-paragraph)) (define-key map "" (quote TeX-PDF-mode)) (define-key map "	" (quote TeX-interactive-mode)) (define-key map "" (quote TeX-source-correlate-mode)) (define-key map "" (quote TeX-pin-region)) (define-key map "" (quote TeX-toggle-debug-bad-boxes)) (define-key map "" (quote TeX-toggle-debug-bad-boxes)) (define-key map "" (quote TeX-toggle-debug-warnings)) (define-key map "" (quote TeX-view)) (define-key map "" (quote TeX-save-document)) (define-key map "" (quote TeX-command-region)) (define-key map "" (quote TeX-command-buffer)) (define-key map "" (quote TeX-command-master)) (define-key map "" (quote TeX-kill-job)) (define-key map "" (quote TeX-recenter-output-buffer)) (define-key map "^" (quote TeX-home-buffer)) (define-key map "`" (quote TeX-next-error)) (if (featurep (quote xemacs)) (substitute-key-definition (quote next-error) (quote TeX-next-error) map global-map) (define-key map [remap next-error] (quote TeX-next-error))) (if (featurep (quote xemacs)) (substitute-key-definition (quote previous-error) (quote TeX-previous-error) map global-map) (define-key map [remap previous-error] (quote TeX-previous-error))) (define-key map "" (quote TeX-fold-mode)) (define-key map "_" (quote TeX-master-file-ask)) map)) nil [160415 163444])
            ("TeX-mode-specific-command-menu" function (:arguments ("mode")) nil [163446 163869])
            ("TeX-mode-specific-command-menu-entries" function (:arguments ("mode")) nil [163871 167085])
            ("TeX-mode-specific-command-list" function (:arguments ("mode")) nil [167087 167548])
            ("TeX-fold-menu" variable (:default-value (TeX-menu-with-help (quote ("Show/Hide" ["Fold Mode" TeX-fold-mode :style toggle :selected (and (boundp (quote TeX-fold-mode)) TeX-fold-mode) :help "Toggle folding mode"] "-" ["Hide All in Current Buffer" TeX-fold-buffer :active (and (boundp (quote TeX-fold-mode)) TeX-fold-mode) :help "Hide all configured TeX constructs in the current buffer"] ["Hide All in Current Region" TeX-fold-region :active (and (boundp (quote TeX-fold-mode)) TeX-fold-mode) :help "Hide all configured TeX constructs in the marked region"] ["Hide All in Current Paragraph" TeX-fold-paragraph :active (and (boundp (quote TeX-fold-mode)) TeX-fold-mode) :help "Hide all configured TeX constructs in the paragraph containing point"] ["Hide Current Macro" TeX-fold-macro :active (and (boundp (quote TeX-fold-mode)) TeX-fold-mode) :help "Hide the macro containing point"] ["Hide Current Environment" TeX-fold-env :visible (not (eq major-mode (quote plain-tex-mode))) :active (and (boundp (quote TeX-fold-mode)) TeX-fold-mode) :help "Hide the environment containing point"] ["Hide Current Comment" TeX-fold-comment :active (and (boundp (quote TeX-fold-mode)) TeX-fold-mode) :help "Hide the comment containing point"] "-" ["Show All in Current Buffer" TeX-fold-clearout-buffer :active (and (boundp (quote TeX-fold-mode)) TeX-fold-mode) :help "Permanently show all folded content again"] ["Show All in Current Region" TeX-fold-clearout-region :active (and (boundp (quote TeX-fold-mode)) TeX-fold-mode) :help "Permanently show all folded content in marked region"] ["Show All in Current Paragraph" TeX-fold-clearout-paragraph :active (and (boundp (quote TeX-fold-mode)) TeX-fold-mode) :help "Permanently show all folded content in paragraph containing point"] ["Show Current Item" TeX-fold-clearout-item :active (and (boundp (quote TeX-fold-mode)) TeX-fold-mode) :help "Permanently show the item containing point"] "-" ["Hide or Show Current Item" TeX-fold-dwim :active (and (boundp (quote TeX-fold-mode)) TeX-fold-mode) :help "Hide or show the item containing point"])))) nil [167550 169800])
            ("TeX-customization-menu" variable nil nil [169802 169837])
            ("TeX-common-menu-entries" variable (:default-value (TeX-menu-with-help (\` (("Multifile/Parsing" ["Switch to Master File" TeX-home-buffer :help "Switch to buffer of Master File, or buffer of last TeX command"] ["Save Document" TeX-save-document :help "Save all buffers associated with the current Master File"] ["Set Master File" TeX-master-file-ask :active (not (TeX-local-master-p)) :help "Set the main file to run TeX commands on"] ["Reset Buffer" TeX-normal-mode :help "Save and reparse the current buffer for style information"] ["Reset AUCTeX" (TeX-normal-mode t) :keys "C-u C-c C-n" :help "Reset buffer and reload AUCTeX style files"]) ["Find Documentation..." TeX-doc :help "Get help on commands, packages, or TeX-related topics in general"] ["Read the AUCTeX Manual" TeX-goto-info-page :help "Everything worth reading"] ("Customize AUCTeX" ["Browse Options" (customize-group (quote AUCTeX)) :help "Open the customization buffer for AUCTeX"] ["Extend this Menu" (progn (easy-menu-add-item nil (list (if (eq major-mode (quote doctex-mode)) "LaTeX" TeX-base-mode-name)) (or TeX-customization-menu (setq TeX-customization-menu (customize-menu-create (quote AUCTeX) "Customize AUCTeX"))))) :help "Make this menu a full-blown customization menu"]) ["Report AUCTeX Bug" TeX-submit-bug-report :help (\, (format "Problems with AUCTeX %s? Mail us!" AUCTeX-version))])))) nil [169839 171403])
            ("TeX-verbatim-p-function" variable nil nil [171431 171528])
            ("make-variable-buffer-local" code nil nil [171529 171582])
            ("TeX-verbatim-p" function (:arguments ("pos")) nil [171664 171943])
            ("TeX-comment-start-regexp" variable (:default-value "%") nil [171960 172178])
            ("make-variable-buffer-local" code nil nil [172179 172233])
            ("TeX-comment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [172235 173038])
            ("if" code nil nil [173965 174675])
            ("if" code nil nil [173097 173902])
            ("TeX-uncomment" function (:user-visible-flag t) nil [174678 175242])
            ("TeX-comment-or-uncomment-paragraph" function (:user-visible-flag t) nil [175244 175853])
            ("TeX-in-comment" function nil nil [175855 176230])
            ("TeX-in-commented-line" function nil nil [176232 176822])
            ("TeX-in-line-comment" function nil nil [176824 177184])
            ("TeX-comment-prefix" function nil nil [177186 177531])
            ("TeX-forward-comment-skip" function (:arguments ("count" "limit")) nil [177533 179069])
            ("TeX-backward-comment-skip" function (:arguments ("count" "limit")) nil [179071 179572])
            ("TeX-comment-forward" function (:arguments ("n")) nil [179689 180322])
            ("TeX-comment-padding-string" function nil nil [180324 180652])
            ("TeX-indentation" customgroup (:user-visible-flag t) nil [180672 180761])
            ("TeX-brace-indent-level" variable
               (:user-visible-flag t
                :default-value 2)
                nil [180763 180899])
            ("TeX-comment-indent" function nil nil [180901 181118])
            ("TeX-brace-count-line" function nil nil [181120 181681])
            ("TeX-search-syntax-table" variable (:default-value (let ((table (make-syntax-table (make-char-table (if (featurep (quote xemacs)) (quote syntax) (quote syntax-table)))))) (dolist (elt (quote ((12 . ">") (10 . ">") (34 . " ") (40 . " ") (41 . " ")))) (modify-syntax-entry (car elt) (cdr elt) table)) table)) nil [181699 182400])
            ("TeX-search-syntax-table" function (:arguments ("args")) nil [182402 183913])
            ("TeX-find-balanced-brace" function (:arguments ("count" "depth" "limit")) nil [183915 184733])
            ("TeX-find-closing-brace" function (:arguments ("depth" "limit")) nil [184735 185104])
            ("TeX-find-opening-brace" function (:arguments ("depth" "limit")) nil [185106 185474])
            ("TeX-find-macro-boundaries" function (:arguments ("lower-bound")) nil [185476 187170])
            ("TeX-find-macro-end-helper" function (:arguments ("start")) nil [187172 188639])
            ("TeX-find-macro-start" function (:arguments ("limit")) nil [188641 188915])
            ("TeX-find-macro-end" function nil nil [188917 189088])
            ("TeX-search-forward-unescaped" function (:arguments ("string" "bound" "noerror")) nil [189090 189515])
            ("TeX-search-backward-unescaped" function (:arguments ("string" "bound" "noerror")) nil [189517 189945])
            ("TeX-re-search-forward-unescaped" function (:arguments ("regexp" "bound" "noerror")) nil [189947 190392])
            ("TeX-search-unescaped" function (:arguments ("pattern" "direction" "regexp-flag" "bound" "noerror")) nil [190394 191318])
            ("TeX-escaped-p" function (:arguments ("pos")) nil [191320 191692])
            ("TeX-current-macro" function nil nil [191694 192037])
            ("TeX-search-forward-comment-start-function" variable nil nil [192039 192344])
            ("make-variable-buffer-local" code nil nil [192345 192416])
            ("TeX-search-forward-comment-start" function (:arguments ("limit")) nil [192418 193048])
            ("TeX-font-list" variable (:default-value (quote ((2 "{\\bf " "}") (3 "{\\sc " "}") (5 "{\\em " "\\/}") (9 "{\\it " "\\/}") (18 "{\\rm " "}") (19 "{\\sl " "\\/}") (20 "{\\tt " "}") (4 "" "" t)))) nil [193061 194020])
            ("TeX-font-replace-function" variable (:default-value (quote TeX-font-replace)) nil [194022 194150])
            ("TeX-describe-font-entry" function (:arguments ("entry")) nil [194152 194580])
            ("TeX-font" function
               (:user-visible-flag t
                :arguments ("replace" "what"))
                nil [194582 195751])
            ("TeX-font-replace" function (:arguments ("start" "end")) nil [195753 196307])
            ("TeX-font-replace-macro" function (:arguments ("start" "end")) nil [196309 197497])
            ("TeX-symbol-marker" variable nil nil [197615 197645])
            ("TeX-symbol-marker-pos" variable nil nil [197647 197679])
            ("TeX-dollar-sign" variable
               (:user-visible-flag t
                :default-value 36)
                nil [197784 197868])
            ("TeX-dollar-string" variable
               (:constant-flag t
                :default-value (char-to-string TeX-dollar-sign))
                nil [197869 197930])
            ("TeX-dollar-regexp" variable
               (:constant-flag t
                :default-value (concat "^" (regexp-quote TeX-dollar-string) "\\|[^" TeX-esc "]" (regexp-quote TeX-dollar-string)))
                nil [197931 198063])
            ("TeX-math-toggle-off-input-method" variable
               (:user-visible-flag t
                :default-value t)
                nil [198065 198224])
            ("TeX-electric-math" variable nil nil [198226 199398])
            ("TeX-insert-dollar" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [199400 203181])
            ("TeX-math-input-method-off-regexp" variable (:default-value (concat "^" (regexp-opt (quote ("chinese" "japanese" "korean" "bulgarian" "russian")) t))) nil [203183 203386])
            ("TeX-math-input-method-off" function nil nil [203388 203704])
            ("TeX-normal-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [203727 204491])
            ("TeX-quote" customgroup (:user-visible-flag t) nil [204493 204557])
            ("TeX-open-quote" variable (:default-value "``") nil [204559 204698])
            ("TeX-close-quote" variable (:default-value "''") nil [204700 204841])
            ("TeX-quote-after-quote" variable nil nil [204843 205055])
            ("TeX-quote-language-alist" variable nil nil [205057 206167])
            ("TeX-quote-language" variable nil nil [206169 206588])
            ("make-variable-buffer-local" code nil nil [206589 206637])
            ("TeX-insert-quote" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [206639 209466])
            ("TeX-insert-punctuation" function (:user-visible-flag t) nil [209468 209717])
            ("TeX-insert-braces" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [209719 210363])
            ("TeX-submit-bug-report" function (:user-visible-flag t) nil [210380 211794])
            ("TeX-goto-info-page" function (:user-visible-flag t) nil [211816 211933])
            ("info-lookup->completions" function (:prototype-flag t) nil [211935 211983])
            ("TeX-doc-backend-alist" variable (:default-value (quote ((texdoc (plain-tex-mode latex-mode doctex-mode ams-tex-mode context-mode) (lambda nil (when (executable-find "texdoc") (TeX-search-files (unless (stringp TeX-kpathsea-path-delimiter) (or (TeX-tree-expand (quote ("$SYSTEXMF" "$TEXMFLOCAL" "$TEXMFMAIN" "$TEXMFDIST")) "latex" (quote ("/doc/"))) (\` ((\,@ TeX-macro-global) (\,@ TeX-macro-private))))) (quote ("dvi" "pdf" "ps" "txt" "html")) t t))) (lambda (doc) (call-process "texdoc" nil 0 nil "--view" doc))) (latex-info (latex-mode) (lambda nil (mapcar (lambda (x) (let ((x (car x))) (if (string-match "\\`\\\\" x) (substring x 1) x))) (info-lookup->completions (quote symbol) (quote latex-mode)))) (lambda (doc) (info-lookup-symbol (concat "\\" doc) (quote latex-mode)))) (texinfo-info (texinfo-mode) (lambda nil (mapcar (lambda (x) (let ((x (car x))) (if (string-match "\\`@" x) (substring x 1) x))) (info-lookup->completions (quote symbol) (quote texinfo-mode)))) (lambda (doc) (info-lookup-symbol (concat "@" doc) (quote texinfo-mode))))))) nil [211985 213871])
            ("TeX-doc" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [213873 215885])
            ("ispell-tex-buffer-p" function nil nil [215997 216071])
            ("setq" code nil nil [216118 216151])
            ("TeX-run-ispell" function (:arguments ("command" "string" "file")) nil [216153 216538])
            ("TeX-ispell-document" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [216540 217548])
            ("ispell-tex-major-modes" variable nil nil [217589 217624])
            ("setq" code nil nil [217625 217753])
            ("TeX-abbrev-mode-setup" function (:arguments ("mode")) nil [217773 218204])
            ("eval-after-load" code nil nil [218350 218675])
            ("put" code nil nil [218715 218753])
            ("put" code nil nil [218754 218797])
            ("put" code nil nil [218798 218845])
            ("TeX-how-many" function (:arguments ("regexp" "rstart" "rend")) nil [218847 219900])
            ("tex" package nil nil [219902 219916]))          
      :file "tex.el"
      :pointmax 219990
      :fsize 219989
      :lastmodtime '(21549 37731 798498 906000)
      :unmatched-syntax nil)
    (semanticdb-table "tex-style.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("LaTeX-style" customgroup (:user-visible-flag t) nil [1043 1144])
            ("LaTeX-amsmath-label" variable nil nil [1285 1619])
            ("LaTeX-beamer-section-labels-flag" variable nil nil [1641 1768])
            ("LaTeX-beamer-item-overlay-flag" variable (:default-value t) nil [1770 1923])
            ("LaTeX-beamer-themes" variable (:default-value (quote local)) nil [1925 3327])
            ("LaTeX-beamer-inner-themes" variable (:default-value (quote local)) nil [3329 3989])
            ("LaTeX-beamer-outer-themes" variable (:default-value (quote local)) nil [3991 4790])
            ("LaTeX-beamer-color-themes" variable (:default-value (quote local)) nil [4792 5745])
            ("LaTeX-beamer-font-themes" variable (:default-value (quote local)) nil [5747 6526])
            ("LaTeX-biblatex-use-Biber" variable (:default-value t) nil [6550 6743])
            ("make-variable-buffer-local" code nil nil [6744 6798])
            ("put" code nil nil [6799 6865])
            ("LaTeX-comment-env-list" variable (:default-value (quote ("comment"))) nil [6888 7123])
            ("LaTeX-csquotes-quote-after-quote" variable nil nil [7147 7297])
            ("LaTeX-csquotes-open-quote" variable nil nil [7299 7639])
            ("LaTeX-csquotes-close-quote" variable nil nil [7641 7983])
            ("LaTeX-write18-enabled-p" variable
               (:user-visible-flag t
                :default-value t)
                nil [8002 8268])
            ("LaTeX-fontspec-arg-font-search" variable (:default-value t) nil [8292 9003])
            ("LaTeX-fontspec-font-list-default" variable nil nil [9005 9196])
            ("LaTeX-includegraphics-extensions" variable (:default-value (quote ("eps" "jpe?g" "pdf" "png"))) nil [9220 9557])
            ("LaTeX-includegraphics-options-alist" variable (:default-value (quote ((0 width) (4) (5 trim) (16 height totalheight width scale angle origin bb viewport trim clip keepaspectratio page)))) nil [9559 10938])
            ("LaTeX-includegraphics-strip-extension-flag" variable (:default-value t) nil [10940 11101])
            ("LaTeX-includegraphics-read-file" variable (:default-value (quote LaTeX-includegraphics-read-file-TeX)) nil [11103 12562])
            ("tex-style" package nil nil [12564 12584]))          
      :file "tex-style.el"
      :pointmax 12613
      :fsize 12612
      :lastmodtime '(21520 19527 621671 253000)
      :unmatched-syntax nil)
    (semanticdb-table "tex-bar.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("custom" include nil nil [2423 2440])
            ("toolbar-x" include nil nil [2442 2462])
            ("tex-buf" include nil nil [2486 2504])
            ("latex" include nil nil [2532 2548])
            ("TeX-bar-help-from-command-list" function (:arguments ("item")) nil [2588 2832])
            ("TeX-tool-bar" customgroup (:user-visible-flag t) nil [2834 2910])
            ("TeX-bar-TeX-buttons" variable (:default-value (quote (new-file open-file dired kill-buffer save-buffer cut copy paste undo [separator nil] tex next-error view bibtex spell))) nil [2912 4313])
            ("TeX-bar-TeX-buttons" function (:user-visible-flag t) nil [4315 5235])
            ("TeX-tool-bar-button-definitions" customgroup (:user-visible-flag t) nil [5237 5345])
            ("TeX-bar-TeX-all-button-alists" variable (:default-value (quote (TeX-bar-TeX-button-alist toolbarx-default-toolbar-meaning-alist))) nil [5347 5711])
            ("TeX-bar-TeX-button-alist" variable (:default-value (quote ((tex :image (lambda nil (if TeX-PDF-mode "pdftex" "tex")) :command (progn (TeX-save-document (TeX-master-file)) (TeX-command "TeX" (quote TeX-master-file) -1)) :help (lambda (&rest ignored) (TeX-bar-help-from-command-list "TeX"))) (pdftex :image "pdftex" :command (progn (TeX-save-document (TeX-master-file)) (TeX-command "PDFTeX" (quote TeX-master-file) -1)) :help (lambda (&rest ignored) (TeX-bar-help-from-command-list "PDFTeX"))) (next-error :image "error" :command TeX-next-error :enable (plist-get TeX-error-report-switches (intern (TeX-master-file))) :visible (plist-get TeX-error-report-switches (intern (TeX-master-file)))) (view :image (lambda nil (if TeX-PDF-mode "viewpdf" "viewdvi")) :command (TeX-command "View" (quote TeX-master-file) -1) :help (lambda (&rest ignored) (TeX-bar-help-from-command-list "View"))) (file :image "dvips" :command (TeX-command "File" (quote TeX-master-file) -1) :visible (not TeX-PDF-mode) :help (lambda (&rest ignored) (TeX-bar-help-from-command-list "File"))) (bibtex :image "bibtex" :command (TeX-command "BibTeX" (quote TeX-master-file) -1) :help (lambda (&rest ignored) (TeX-bar-help-from-command-list "BibTeX"))) (clean :image "delete" :command (TeX-command "Clean" (quote TeX-master-file) -1) :help (lambda (&rest ignored) (TeX-bar-help-from-command-list "Clean"))) (spell :image "spell" :command (TeX-command "Spell" (quote TeX-master-file) -1) :help (lambda (&rest ignored) (TeX-bar-help-from-command-list "Spell")))))) nil [5713 7892])
            ("TeX-install-toolbar" function (:user-visible-flag t) nil [7942 8418])
            ("TeX-bar-LaTeX-buttons" variable (:default-value (quote (new-file open-file dired kill-buffer save-buffer cut copy paste undo [separator nil] latex next-error view bibtex spell))) nil [8420 9831])
            ("TeX-bar-LaTeX-buttons" function (:user-visible-flag t) nil [9833 10759])
            ("TeX-tool-bar-button-definitions" customgroup (:user-visible-flag t) nil [10761 10869])
            ("TeX-bar-LaTeX-all-button-alists" variable (:default-value (quote (TeX-bar-LaTeX-button-alist toolbarx-default-toolbar-meaning-alist))) nil [10871 11239])
            ("TeX-bar-LaTeX-button-alist" variable (:default-value (quote ((latex :image (lambda nil (if TeX-PDF-mode "pdftex" "tex")) :command (progn (TeX-save-document (TeX-master-file)) (TeX-command "LaTeX" (quote TeX-master-file) -1)) :help (lambda (&rest ignored) (TeX-bar-help-from-command-list "LaTeX"))) (pdflatex :image "pdftex" :command (progn (TeX-save-document (TeX-master-file)) (TeX-command "PDFLaTeX" (quote TeX-master-file) -1)) :help (lambda (&rest ignored) (TeX-bar-help-from-command-list "PDFLaTeX"))) (next-error :image "error" :command TeX-next-error :enable (plist-get TeX-error-report-switches (intern (TeX-master-file))) :visible (plist-get TeX-error-report-switches (intern (TeX-master-file)))) (view :image (lambda nil (if TeX-PDF-mode "viewpdf" "viewdvi")) :command (TeX-command "View" (quote TeX-master-file) -1) :help (lambda (&rest ignored) (TeX-bar-help-from-command-list "View"))) (file :image "dvips" :command (TeX-command "File" (quote TeX-master-file) -1) :visible (not TeX-PDF-mode) :help (lambda (&rest ignored) (TeX-bar-help-from-command-list "File"))) (bibtex :image "bibtex" :command (TeX-command (if LaTeX-using-Biber "Biber" "BibTeX") (quote TeX-master-file) -1) :help (lambda (&rest ignored) (TeX-bar-help-from-command-list (if LaTeX-using-Biber "Biber" "BibTeX")))) (clean :image "delete" :command (TeX-command "Clean" (quote TeX-master-file) -1) :help (lambda (&rest ignored) (TeX-bar-help-from-command-list "Clean"))) (spell :image "spell" :command (TeX-command "Spell" (quote TeX-master-file) -1) :help (lambda (&rest ignored) (TeX-bar-help-from-command-list "Spell"))) (latex-symbols-experimental :alias :eval-group LaTeX-symbols-toolbar-switch-contents LaTeX-symbols-toolbar-contents)))) nil [11241 13621])
            ("LaTeX-install-toolbar" function (:user-visible-flag t) nil [13671 14412])
            ("TeX-bar-img-filename" function (:arguments ("tex-command")) nil [14466 15833])
            ("let*" code nil nil [15835 19410])
            ("tex-bar" package nil nil [19412 19430]))          
      :file "tex-bar.el"
      :pointmax 19457
      :fsize 19456
      :lastmodtime '(21520 19527 621671 253000)
      :unmatched-syntax nil)
    (semanticdb-table "toolbar-x.el"
      :file "toolbar-x.el"
      :fsize 83399
      :lastmodtime '(21520 19527 625673 252000))
    (semanticdb-table "tex-buf.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("tex" include nil nil [998 1012])
            ("TeX-process-asynchronous" variable
               (:user-visible-flag t
                :default-value (not (eq system-type (quote ms-dos))))
                nil [1034 1173])
            ("TeX-shell" variable (:default-value (if (memq system-type (quote (ms-dos emx windows-nt))) shell-file-name "/bin/sh")) nil [1175 1365])
            ("TeX-shell-command-option" variable (:default-value (cond ((memq system-type (quote (ms-dos emx windows-nt))) (cond ((boundp (quote shell-command-option)) shell-command-option) ((boundp (quote shell-command-switch)) shell-command-switch) (t "/c"))) (t "-c"))) nil [1367 1761])
            ("TeX-save-document" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [2334 2698])
            ("TeX-command-master" function
               (:user-visible-flag t
                :arguments ("override-confirm"))
                nil [2700 3061])
            ("TeX-command-region-begin" variable nil nil [3063 3100])
            ("TeX-command-region-end" variable nil nil [3101 3136])
            ("make-variable-buffer-local" code nil nil [3175 3229])
            ("make-variable-buffer-local" code nil nil [3230 3282])
            ("TeX-current-offset" function (:arguments ("pos")) nil [3284 3607])
            ("TeX-pin-region" function
               (:user-visible-flag t
                :arguments ("begin" "end"))
                nil [3609 4740])
            ("TeX-command-region" function
               (:user-visible-flag t
                :arguments ("override-confirm"))
                nil [4742 6335])
            ("TeX-command-buffer" function
               (:user-visible-flag t
                :arguments ("override-confirm"))
                nil [6337 6886])
            ("unless" code nil nil [6888 7347])
            ("TeX-pop-to-buffer" function (:arguments ("buffer" "other-window" "norecord")) nil [7349 8610])
            ("TeX-recenter-output-buffer" function
               (:user-visible-flag t
                :arguments ("line"))
                nil [8612 9202])
            ("TeX-kill-job" function (:user-visible-flag t) nil [9204 9458])
            ("TeX-home-buffer" function (:user-visible-flag t) nil [9460 9870])
            ("TeX-error-last-visited" variable (:default-value -1) nil [9872 10088])
            ("make-variable-buffer-local" code nil nil [10089 10141])
            ("TeX-get-parse-function" function nil nil [10143 10341])
            ("TeX-next-error" function
               (:user-visible-flag t
                :arguments ("arg" "reparse"))
                nil [10343 11121])
            ("TeX-previous-error" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [11123 12001])
            ("TeX-error-overview-frame" variable nil nil [12022 12096])
            ("TeX-error-overview-buffer-name" variable
               (:constant-flag t
                :default-value "*TeX errors*")
                nil [12098 12206])
            ("TeX-command" function (:arguments ("name" "file" "override-confirm")) nil [12208 13774])
            ("TeX-command-expand" function (:arguments ("command" "file" "list")) nil [13776 15820])
            ("TeX-check-files" function (:arguments ("derived" "originals" "extensions")) nil [15822 17360])
            ("TeX-save-query" variable
               (:user-visible-flag t
                :default-value t)
                nil [17362 17505])
            ("TeX-command-history" variable nil nil [17507 17539])
            ("TeX-command-query" function (:arguments ("name")) nil [17541 18987])
            ("TeX-command-next" variable nil nil [18989 19078])
            ("make-variable-buffer-local" code nil nil [19081 19127])
            ("TeX-printer-query" function (:arguments ("queue")) nil [19129 20396])
            ("TeX-style-check" function (:arguments ("styles")) nil [20398 20687])
            ("TeX-output-extension" function nil nil [20689 20972])
            ("TeX-view-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [20974 21202])
            ("TeX-view" function (:user-visible-flag t) nil [21204 21581])
            ("TeX-output-style-check" function (:arguments ("styles")) nil [21583 22203])
            ("TeX-after-start-process-function" variable nil nil [22224 22373])
            ("TeX-show-compilation" variable (:user-visible-flag t) nil [22375 22515])
            ("TeX-run-command" function (:arguments ("name" "command" "file")) nil [22517 24390])
            ("TeX-run-set-command" function (:arguments ("name" "command")) nil [24392 24813])
            ("TeX-run-format" function (:arguments ("name" "command" "file")) nil [24815 25462])
            ("TeX-error-report-switches" variable nil nil [25464 25713])
            ("TeX-run-TeX" function (:arguments ("name" "command" "file")) nil [25715 26885])
            ("defalias" code nil nil [26913 26951])
            ("TeX-run-BibTeX" function (:arguments ("name" "command" "file")) nil [26954 27272])
            ("TeX-run-Biber" function (:arguments ("name" "command" "file")) nil [27274 27596])
            ("TeX-run-compile" function (:arguments ("name" "command" "file")) nil [27598 27815])
            ("TeX-run-shell" function (:arguments ("name" "command" "file")) nil [27817 28070])
            ("TeX-run-discard" function (:arguments ("name" "command" "file")) nil [28072 28332])
            ("TeX-run-discard-foreground" function (:arguments ("name" "command" "file")) nil [28334 28841])
            ("defalias" code nil nil [28842 28896])
            ("TeX-run-background" function (:arguments ("name" "command" "file")) nil [28898 29480])
            ("TeX-run-silent" function (:arguments ("name" "command" "file")) nil [29482 29958])
            ("TeX-run-interactive" function (:arguments ("name" "command" "file")) nil [29960 31698])
            ("TeX-run-function" function (:arguments ("name" "command" "file")) nil [31700 31953])
            ("TeX-run-discard-or-function" function (:arguments ("name" "command" "file")) nil [31955 32319])
            ("TeX-run-ispell-on-document" function
               (:user-visible-flag t
                :arguments ("command" "ignored" "name"))
                nil [32321 32591])
            ("TeX-synchronous-sentinel" function (:arguments ("name" "file" "result")) nil [32617 33357])
            ("TeX-command-sentinel" function (:arguments ("process" "msg")) nil [33359 34965])
            ("TeX-sentinel-function" variable (:default-value (lambda (process name))) nil [34968 35123])
            ("make-variable-buffer-local" code nil nil [35127 35178])
            ("TeX-sentinel-default-function" variable (:default-value (lambda (process name))) nil [35181 35407])
            ("make-variable-buffer-local" code nil nil [35411 35470])
            ("TeX-TeX-sentinel" function (:arguments ("process" "name")) nil [35472 36094])
            ("TeX-current-pages" function nil nil [36096 36363])
            ("TeX-TeX-sentinel-check" function (:arguments ("process" "name")) nil [36365 37600])
            ("TeX-LaTeX-sentinel-has-warnings" function nil nil [37602 37888])
            ("TeX-LaTeX-sentinel-has-bad-boxes" function nil nil [37890 38114])
            ("TeX-LaTeX-sentinel" function (:arguments ("process" "name")) nil [38149 42130])
            ("TeX-BibTeX-sentinel" function (:arguments ("process" "name")) nil [42165 42968])
            ("TeX-Biber-sentinel" function (:arguments ("process" "name")) nil [42970 44042])
            ("compilation-in-progress" variable nil nil [44112 44195])
            ("or" code nil nil [44197 44347])
            ("TeX-process-get-variable" function (:arguments ("name" "symbol" "default")) nil [44349 44730])
            ("TeX-process-set-variable" function (:arguments ("name" "symbol" "value")) nil [44732 45012])
            ("TeX-process-check" function (:arguments ("name")) nil [45014 45588])
            ("TeX-process-buffer-name" function (:arguments ("name")) nil [45590 45769])
            ("TeX-process-buffer" function (:arguments ("name")) nil [45771 45914])
            ("TeX-process" function (:arguments ("name")) nil [45916 46090])
            ("TeX-command-mode-line" function (:arguments ("process")) nil [46113 46360])
            ("TeX-command-filter" function (:arguments ("process" "string")) nil [46362 46640])
            ("TeX-current-page" variable nil nil [46642 46740])
            ("make-variable-buffer-local" code nil nil [46743 46789])
            ("TeX-format-mode-line" function (:arguments ("process")) nil [46791 47062])
            ("TeX-format-filter" function (:arguments ("process" "string")) nil [47064 48482])
            ("TeX-parse-function" variable nil nil [48484 48575])
            ("make-variable-buffer-local" code nil nil [48577 48625])
            ("TeX-background-filter" function (:arguments ("process" "string")) nil [48627 48903])
            ("TeX-interactive-goto-prompt" function (:arguments ("string")) nil [48999 49562])
            ("TeX-current-process-region-p" variable nil nil [49585 49697])
            ("TeX-active-process" function nil nil [49699 49818])
            ("TeX-active-buffer" function nil nil [49820 50027])
            ("TeX-active-master" function (:arguments ("extension" "nondirectory")) nil [50029 50480])
            ("TeX-command-buffer" variable nil nil [50482 50572])
            ("TeX-region-extra" variable (:user-visible-flag t) nil [50591 50734])
            ("TeX-region-hook" variable nil nil [51003 51321])
            ("TeX-quote-filename" function (:arguments ("file")) nil [51323 51687])
            ("TeX-region-create" function (:arguments ("file" "region" "original" "offset")) nil [51689 55129])
            ("TeX-region-file" function (:arguments ("extension" "nondirectory")) nil [55131 55524])
            ("TeX-region" variable
               (:user-visible-flag t
                :default-value "_region_")
                nil [55526 55681])
            ("TeX-error-point" variable nil nil [55727 55793])
            ("make-variable-buffer-local" code nil nil [55796 55841])
            ("TeX-error-file" variable nil nil [55843 55920])
            ("make-variable-buffer-local" code nil nil [55923 55967])
            ("TeX-error-offset" variable nil nil [55969 56071])
            ("make-variable-buffer-local" code nil nil [56074 56120])
            ("TeX-parse-reset" function (:arguments ("reparse")) nil [56122 56453])
            ("TeX-parse-command" function (:arguments ("arg" "reparse")) nil [56628 56830])
            ("TeX-parse-TeX" function (:arguments ("arg" "reparse")) nil [56832 58183])
            ("TeX-translate-location-hook" variable nil nil [58208 58451])
            ("TeX-error-list" variable nil nil [58453 58631])
            ("make-variable-buffer-local" code nil nil [58632 58676])
            ("TeX-parse-all-errors" variable (:default-value t) nil [58678 58905])
            ("TeX-parse-all-errors" function nil nil [58907 59202])
            ("TeX-parse-error" function (:arguments ("old" "store")) nil [59204 62257])
            ("TeX-find-display-help" function (:arguments ("type" "file" "line" "error" "offset" "context" "string" "line-end" "bad-box" "error-point")) nil [62259 64125])
            ("TeX-error" function (:arguments ("store")) nil [64127 66011])
            ("TeX-warning" function (:arguments ("warning" "store")) nil [66013 68012])
            ("TeX-error-description-faces" customgroup (:user-visible-flag t) nil [68026 68162])
            ("TeX-error-description-error" variable
               (:default-value (if (< emacs-major-version 22) nil (quote ((((class color) (min-colors 88) (background light)) :foreground "Red1" :weight bold) (((class color) (min-colors 88) (background dark)) :foreground "Pink" :weight bold) (((class color) (min-colors 16) (background light)) :foreground "Red1" :weight bold) (((class color) (min-colors 16) (background dark)) :foreground "Pink" :weight bold) (((class color) (min-colors 8)) :foreground "red" :weight bold) (t (:inverse-video t :weight bold)))))
                :type "face")
                nil [68164 68878])
            ("TeX-error-description-warning" variable
               (:default-value (if (< emacs-major-version 22) nil (quote ((((class color) (min-colors 16)) :foreground "DarkOrange" :weight bold) (((class color)) :foreground "yellow" :weight bold))))
                :type "face")
                nil [68880 69227])
            ("TeX-error-description-tex-said" variable
               (:default-value (if (< emacs-major-version 22) nil (quote ((((class color) (min-colors 88) (background light)) :foreground "Blue1") (((class color) (min-colors 88) (background dark)) :foreground "LightSkyBlue") (((class color) (min-colors 16) (background light)) :foreground "Blue") (((class color) (min-colors 16) (background dark)) :foreground "LightSkyBlue") (((class color) (min-colors 8)) :foreground "blue" :weight bold) (t (:inverse-video t :weight bold)))))
                :type "face")
                nil [69229 69945])
            ("TeX-error-description-help" variable
               (:default-value (quote ((t (:inherit TeX-error-description-tex-said))))
                :type "face")
                nil [69947 70086])
            ("TeX-help-error" function (:arguments ("error" "output" "runbuffer" "type")) nil [70088 72218])
            ("TeX-error-description-list" variable (:default-value (quote (("\\(?:Package Preview Error\\|Preview\\):.*" . "The `auctex' option to `preview' should not be applied manually.
If you see this error message outside of a preview run, either
you did something too clever, or AUCTeX something too stupid.") ("Bad \\\\line or \\\\vector argument.*" . "The first argument of a \\line or \\vector command, which specifies the
slope, is illegal.") ("Bad math environment delimiter.*" . "TeX has found either a math-mode-starting command such as \\[ or \\(
when it is already in math mode, or else a math-mode-ending command
such as \\) or \\] while in LR or paragraph mode.  The problem is caused
by either unmatched math mode delimiters or unbalanced braces.") ("Bad use of \\\\\\\\.*" . "A \\\\ command appears between paragraphs, where it makes no sense. This
error message occurs when the \\\\ is used in a centering or flushing
environment or else in the scope of a centering or flushing
declaration.") ("\\\\begin{[^ ]*} ended by \\\\end{[^ ]*}." . "LaTeX has found an \\end command that doesn't match the corresponding
\\begin command. You probably misspelled the environment name in the
\\end command, have an extra \\begin, or else forgot an \\end.") ("Can be used only in preamble." . "LaTeX has encountered, after the \\begin{document}, one of the
following commands that should appear only in the preamble:
\\documentclass, \\nofiles, \\includeonly, \\makeindex, or
\\makeglossary.  The error is also caused by an extra \\begin{document}
command.") ("Command name [^ ]* already used.*" . "You are using \\newcommand, \\newenvironment, \\newlength, \\newsavebox,
or \\newtheorem to define a command or environment name that is
already defined, or \\newcounter to define a counter that already
exists. (Defining an environment named gnu automatically defines the
command \\gnu.) You'll have to choose a new name or, in the case of
\\newcommand or \\newenvironment, switch to the \\renew ...  command.") ("Counter too large." . "1. Some object that is numbered with letters, probably an item in a
enumerated list, has received a number greater than 26. Either you're
making a very long list or you've been resetting counter values.

2. Footnotes are being ``numbered'' with letters or footnote symbols
and LaTeX has run out of letters or symbols. This is probably caused
by too many \\thanks commands.") ("Environment [^ ]* undefined." . "LaTeX has encountered a \\begin command for a nonexistent environment.
You probably misspelled the environment name. ") ("Float(s) lost." . "You put a figure or table environment or a \\marginpar command inside a
parbox---either one made with a minipage environment or \\parbox
command, or one constructed by LaTeX in making a footnote, figure,
etc. This is an outputting error, and the offending environment or
command may be quite a way back from the point where LaTeX discovered
the problem. One or more figures, tables, and/or marginal notes have
been lost, but not necessarily the one that caused the error.") ("Illegal character in array arg." . "There is an illegal character in the argument of an array or tabular
environment, or in the second argument of a \\multicolumn command.") ("Missing \\\\begin{document}." . "LaTeX produced printed output before encountering a \\begin{document}
command. Either you forgot the \\begin{document} command or there is
something wrong in the preamble. The problem may be a stray character
or an error in a declaration---for example, omitting the braces around
an argument or forgetting the \\ in a command name.") ("Missing p-arg in array arg.*" . "There is a p that is not followed by an expression in braces in the
argument of an array or tabular environment, or in the second argument
of a \\multicolumn command.") ("Missing @-exp in array arg." . "There is an @ character not followed by an @-expression in the
argument of an array or tabular environment, or in the second argument
of a \\multicolumn command.") ("No such counter." . "You have specified a nonexistent counter in a \\setcounter or
\\addtocounter command. This is probably caused by a simple typing
error.  However, if the error occurred while a file with the extension
aux is being read, then you probably used a \\newcounter command
outside the preamble.") ("Not in outer par mode." . "You had a figure or table environment or a \\marginpar command in math
mode or inside a parbox.") ("\\\\pushtabs and \\\\poptabs don't match." . "LaTeX found a \\poptabs with no matching \\pushtabs, or has come to the
\\end{tabbing} command with one or more unmatched \\pushtabs commands.") ("Something's wrong--perhaps a missing \\\\item." . "The most probable cause is an omitted \\item command in a list-making
environment. It is also caused by forgetting the argument of a
thebibliography environment.") ("Tab overflow." . "A \\= command has exceeded the maximum number of tab stops that LaTeX
permits.") ("There's no line here to end." . "A \\newline or \\\\ command appears between paragraphs, where it makes no
sense. If you're trying to ``leave a blank line'', use a \\vspace
command.") ("This may be a LaTeX bug." . "LaTeX has become thoroughly confused. This is probably due to a
previously detected error, but it is possible that you have found an
error in LaTeX itself. If this is the first error message produced by
the input file and you can't find anything wrong, save the file and
contact the person listed in your Local Guide.") ("Too deeply nested." . "There are too many list-making environments nested within one another.
How many levels of nesting are permitted may depend upon what computer
you are using, but at least four levels are provided, which should be
enough.") ("Too many unprocessed floats." . "While this error can result from having too many \\marginpar commands
on a page, a more likely cause is forcing LaTeX to save more figures
and tables than it has room for.  When typesetting its continuous
scroll, LaTeX saves figures and tables separately and inserts them as
it cuts off pages. This error occurs when LaTeX finds too many figure
and/or table environments before it is time to cut off a page, a
problem that is solved by moving some of the environments farther
towards the end of the input file. The error can also be caused by a
``logjam''---a figure or table that cannot be printed causing others
to pile up behind it, since LaTeX will not print figures or tables out
of order. The jam can be started by a figure or table that either is
too large to fit on a page or won't fit where its optional placement
argument says it must go. This is likely to happen if the argument
does not contain a p option.") ("Undefined tab position." . "A \\>, \\+, \\-, or \\< command is trying to go to a nonexistent tab
position---one not defined by a \\= command.") ("\\\\< in mid line." . "A \\< command appears in the middle of a line in a tabbing environment.
This command should come only at the beginning of a line.") ("Double subscript." . "There are two subscripts in a row in a mathematical
formula---something like x_{2}_{3}, which makes no sense.") ("Double superscript." . "There are two superscripts in a row in a mathematical
formula---something like x^{2}^{3}, which makes no sense.") ("Extra alignment tab has been changed to \\\\cr." . "There are too many separate items (column entries) in a single row of
an array or tabular environment. In other words, there were too many &
's before the end of the row. You probably forgot the \\\\ at the end of
the preceding row.") ("Extra \\}, or forgotten \\$." . "The braces or math mode delimiters don't match properly. You probably
forgot a {, \\[, \\(, or $.") ("Font [^ ]* not loaded: Not enough room left." . "The document uses more fonts than TeX has room for. If different parts
of the document use different fonts, then you can get around the
problem by processing it in parts.") ("I can't find file `.*'." . "TeX can't find a file that it needs. If the name of the missing file
has the extension tex, then it is looking for an input file that you
specified---either your main file or another file inserted with an
\\input or \\include command. If the missing file has the extension sty
, then you have specified a nonexistent document style or style
option.") ("Illegal parameter number in definition of .*" . "This is probably caused by a \\newcommand, \\renewcommand,
\\newenvironment, or \\renewenvironment command in which a # is used
incorrectly.  A # character, except as part of the command name \\#,
can be used only to indicate an argument parameter, as in #2, which
denotes the second argument. This error is also caused by nesting one
of the above four commands inside another, or by putting a parameter
like #2 in the last argument of a \\newenvironment or \\renewenvironment
command.") ("Illegal unit of measure ([^ ]* inserted)." . "If you just got a

      ! Missing number, treated as zero.

error, then this is part of the same problem.  If not, it means that
LaTeX was expecting a length as an argument and found a number
instead.  The most common cause of this error is writing 0 instead of
something like 0in for a length of zero, in which case typing return
should result in correct output. However, the error can also be caused
by omitting a command argument.") ("Misplaced alignment tab character \\&." . "The special character &, which should be used only to separate items
in an array or tabular environment, appeared in ordinary text. You
probably meant to type \\&.") ("Missing control sequence inserted." . "This is probably caused by a \\newcommand, \\renewcommand, \\newlength,
or \\newsavebox command whose first argument is not a command name.") ("Missing number, treated as zero." . "This is usually caused by a LaTeX command expecting but not finding
either a number or a length as an argument. You may have omitted an
argument, or a square bracket in the text may have been mistaken for
the beginning of an optional argument. This error is also caused by
putting \\protect in front of either a length command or a command such
as \\value that produces a number.") ("Missing [{}] inserted." . "TeX has become confused. The position indicated by the error locator
is probably beyond the point where the incorrect input is.") ("Missing \\$ inserted." . "TeX probably found a command that can be used only in math mode when
it wasn't in math mode.  Remember that unless stated otherwise, all
all the commands of Section 3.3 in LaTeX Book (Lamport) can be used
only in math mode. TeX is not in math mode when it begins processing
the argument of a box-making command, even if that command is inside a
math environment. This error also occurs if TeX encounters a blank
line when it is in math mode.") ("Not a letter." . "Something appears in the argument of a \\hyphenation command that
doesn't belong there.") ("Paragraph ended before [^ ]* was complete." . "A blank line occurred in a command argument that shouldn't contain
one. You probably forgot the right brace at the end of an argument.") ("\\\\[^ ]*font [^ ]* is undefined .*" . "These errors occur when an uncommon font is used in math mode---for
example, if you use a \\sc command in a formula inside a footnote,
calling for a footnote-sized small caps font.  This problem is solved
by using a \\load command.") ("Font .* not found." . "You requested a family/series/shape/size combination that is totally
unknown.  There are two cases in which this error can occur:
  1) You used the \\size macro to select a size that is not available.
  2) If you did not do that, go to your local `wizard' and
     complain fiercely that the font selection tables are corrupted!") ("TeX capacity exceeded, sorry .*" . "TeX has just run out of space and aborted its execution. Before you
panic, remember that the least likely cause of this error is TeX not
having the capacity to process your document.  It was probably an
error in your input file that caused TeX to run out of room. The
following discussion explains how to decide whether you've really
exceeded TeX's capacity and, if so, what to do. If the problem is an
error in the input, you may have to use the divide and conquer method
described previously to locate it. LaTeX seldom runs out of space on a
short input file, so if running it on the last few pages before the
error indicator's position still produces the error, then there's
almost certainly something wrong in the input file.

The end of the error indicator tells what kind of space TeX ran out
of. The more common ones are listed below, with an explanation of
their probable causes.

buffer size
===========
Can be caused by too long a piece of text as the argument
of a sectioning, \\caption, \\addcontentsline, or \\addtocontents
command. This error will probably occur when the \\end{document} is
being processed, but it could happen when a \\tableofcontents,
\\listoffigures, or \\listoftables command is executed. To solve this
problem, use a shorter optional argument. Even if you're producing a
table of contents or a list of figures or tables, such a long entry
won't help the reader.

exception dictionary
====================
You have used \\hyphenation commands to give TeX
more hyphenation information than it has room for. Remove some of the
less frequently used words from the \\hyphenation commands and insert
\\- commands instead.

hash size
=========
Your input file defines too many command names and/or uses
too many cross-ref- erencing labels.

input stack size
================
This is probably caused by an error in a command
definition. For example, the following command makes a circular
definition, defining \\gnu in terms of itself:

	  \\newcommand{\\gnu}{a \\gnu} % This is wrong!

When TeX encounters this \\gnu command, it will keep chasing its tail
trying to figure out what \\gnu should produce, and eventually run out
of ``input stack''.

main memory size
================
This is one kind of space that TeX can run out of when processing a
short file. There are three ways you can run TeX out of main memory
space: (1) defining a lot of very long, complicated commands, (2)
making an index or glossary and having too many \\index or \\glossary
commands on a single page, and (3) creating so complicated a page of
output that TeX can't hold all the information needed to generate it.
The solution to the first two problems is obvious: define fewer
commands or use fewer \\index and \\glossary commands. The third problem
is nastier. It can be caused by large tabbing, tabular, array, and
picture environments. TeX's space may also be filled up with figures
and tables waiting for a place to go.  To find out if you've really
exceeded TeX's capacity in this way, put a \\clearpage command in your
input file right before the place where TeX ran out of room and try
running it again. If it doesn't run out of room with the \\clearpage
command there, then you did exceed TeX's capacity.  If it still runs
out of room, then there's probably an error in your file.  If TeX is
really out of room, you must give it some help. Remember that TeX
processes a complete paragraph before deciding whether to cut the
page. Inserting a \\newpage command in the middle of the paragraph,
where TeX should break the page, may save the day by letting TeX write
the current page before processing the rest of the paragraph. (A
\\pagebreak command won't help.) If the problem is caused by
accumulated figures and tables, you can try to prevent them from
accumulating---either by moving them further towards the end of the
document or by trying to get them to come out sooner.  If you are
still writing the document, simply add a \\clearpage command and forget
about the problem until you're ready to produce the final version.
Changes to the input file are likely to make the problem go away.

pool size
=========
You probably used too many cross-ref-erencing \\labels and/or defined
too many new command names. More precisely, the labels and command
names that you define have too many characters, so this problem can be
solved by using shorter names. However, the error can also be caused
by omitting the right brace that ends the argument of either a counter
command such as \\setcounter, or a \\newenvironment or \\newtheorem
command.

save size
=========
This occurs when commands, environments, and the scopes of
declarations are nested too deeply---for example, by having the
argument of a \\multiput command contain a picture environment that in
turn has a \\footnotesize declaration whose scope contains a \\multiput
command containing a ....") ("Text line contains an invalid character." . "The input contains some strange character that it shouldn't. A mistake
when creating the file probably caused your text editor to insert this
character. Exactly what could have happened depends upon what text
editor you used. If examining the input file doesn't reveal the
offending character, consult the Local Guide for suggestions.") ("Undefined control sequence." . "TeX encountered an unknown command name. You probably misspelled the
name. If this message occurs when a LaTeX command is being processed,
the command is probably in the wrong place---for example, the error
can be produced by an \\item command that's not inside a list-making
environment. The error can also be caused by a missing \\documentclass
command.") ("Use of [^ ]* doesn't match its definition." . "It's probably one of the picture-drawing commands, and you have used
the wrong syntax for specifying an argument. If it's \\@array that
doesn't match its definition, then there is something wrong in an
@-expression in the argument of an array or tabular
environment---perhaps a fragile command that is not \\protect'ed.") ("You can't use `macro parameter character \\#' in [^ ]* mode." . "The special character # has appeared in ordinary text. You probably
meant to type \\#.") ("Overfull \\\\hbox .*" . "Because it couldn't find a good place for a line break, TeX put more
on this line than it should.") ("Overfull \\\\vbox .*" . "Because it couldn't find a good place for a page break, TeX put more
on the page than it should. ") ("Underfull \\\\hbox .*" . "Check your output for extra vertical space.  If you find some, it was
probably caused by a problem with a \\\\ or \\newline command---for
example, two \\\\ commands in succession. This warning can also be
caused by using the sloppypar environment or \\sloppy declaration, or
by inserting a \\linebreak command.") ("Underfull \\\\vbox .*" . "TeX could not find a good place to break the page, so it produced a
page without enough text on it. ") (".*" . "No help available")))) nil [72240 91705])
            ("TeX-error-overview-active-buffer" variable nil nil [91727 91826])
            ("TeX-error-overview-orig-frame" variable nil nil [91828 91929])
            ("TeX-error-overview-orig-window" variable nil nil [91931 92034])
            ("TeX-error-overview-setup" variable nil nil [92036 92519])
            ("TeX-error-overview-setup" function nil nil [92521 92687])
            ("TeX-error-overview-goto-source" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [92689 94905])
            ("TeX-error-overview-make-entries" function (:arguments ("master-dir")) nil [94907 96220])
            ("TeX-error-overview-next-error" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [96222 96704])
            ("TeX-error-overview-previous-error" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [96706 96973])
            ("TeX-error-overview-quit" function (:user-visible-flag t) nil [96975 97226])
            ("TeX-error-overview-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap))) (define-key map "n" (quote TeX-error-overview-next-error)) (define-key map "p" (quote TeX-error-overview-previous-error)) (define-key map "q" (quote TeX-error-overview-quit)) (define-key map "" (quote TeX-error-overview-goto-source)) map)) nil [97228 97633])
            ("TeX-error-overview-list-entries" variable nil nil [97635 97732])
            ("define-derived-mode" code nil nil [97734 98210])
            ("TeX-error-overview-frame-parameters" variable (:default-value (quote ((name . "TeX errors") (title . "TeX errors") (height . 10) (width . 80) (top - 0) (left - 0) (unsplittable . t) (minibuffer) (vertical-scroll-bars . t) (tool-bar-lines . 0)))) nil [98212 98790])
            ("TeX-error-overview-open-after-TeX-run" variable nil nil [98792 98955])
            ("TeX-error-overview" function (:user-visible-flag t) nil [98957 101044])
            ("if" code nil nil [101063 102307])
            ("TeX-output-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map TeX-special-mode-map) (define-key map "n" (quote TeX-next-error)) (define-key map "p" (quote TeX-previous-error)) (define-key map "b" (quote TeX-toggle-debug-bad-boxes)) (define-key map "w" (quote TeX-toggle-debug-warnings)) (define-key map "i" (lambda nil (interactive) (with-current-buffer TeX-command-buffer (TeX-interactive-mode (if TeX-interactive-mode -1 1))))) (define-key map "s" (lambda nil (interactive) (with-current-buffer TeX-command-buffer (TeX-source-correlate-mode (if TeX-source-correlate-mode -1 1))))) map)) nil [102309 103118])
            ("define-derived-mode" code nil nil [103120 103462])
            ("TeX-output-revert-buffer" function (:arguments ("ignore-auto" "noconfirm")) nil [103464 104062])
            ("tex-buf" package nil nil [104064 104082]))          
      :file "tex-buf.el"
      :pointmax 104109
      :fsize 104108
      :lastmodtime '(21520 19527 621671 253000)
      :unmatched-syntax nil)
    (semanticdb-table "bib-cite.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [29721 29734])
            ("bib-cite" customgroup (:user-visible-flag t) nil [29737 29852])
            ("bib-cite-use-reftex-view-crossref" variable (:user-visible-flag t) nil [29854 30177])
            ("bib-novice" variable
               (:user-visible-flag t
                :default-value t)
                nil [30179 30305])
            ("bib-switch-to-buffer-function" variable
               (:user-visible-flag t
                :default-value (quote switch-to-buffer))
                nil [30307 30702])
            ("bib-highlight-mouse-t" variable
               (:user-visible-flag t
                :default-value t)
                nil [30704 30852])
            ("bib-label-help-echo-format" variable
               (:user-visible-flag t
                :default-value "button2 finds %s, button3 displays %s")
                nil [30854 31110])
            ("bib-bibtex-env-variable" variable
               (:user-visible-flag t
                :default-value "BIBINPUTS")
                nil [31112 31538])
            ("bib-cite-inputs" variable (:user-visible-flag t) nil [31540 31783])
            ("bib-cite-aux-inputs" variable (:user-visible-flag t) nil [31785 32084])
            ("bib-dos-or-os2-variable" variable
               (:user-visible-flag t
                :default-value (or (equal (quote emx) system-type) (equal (quote ms-dos) system-type)))
                nil [32086 32746])
            ("bib-etags-command" variable
               (:user-visible-flag t
                :default-value "etags -r '/.*\\\\\\(eq\\|page\\|[fvF]\\)ref.*/' -o ")
                nil [32748 33184])
            ("bib-etags-append-command" variable
               (:user-visible-flag t
                :default-value "etags -r '/.*\\\\\\(eq\\|page\\|[fvF]\\)ref.*/' -a -o ")
                nil [33186 33540])
            ("bib-etags-filename" variable
               (:user-visible-flag t
                :default-value "TAGS")
                nil [33542 33831])
            ("bib-ref-regexp" variable
               (:user-visible-flag t
                :default-value "\\\\\\(eq\\|page\\|[fvF]\\)?ref")
                nil [33833 34183])
            ("bib-substitute-string-in-display" variable
               (:user-visible-flag t
                :default-value t)
                nil [34185 34450])
            ("bib-string-ignored-warning" variable
               (:user-visible-flag t
                :default-value (quote ("jan" "feb" "mar" "apr" "may" "jun" "jul" "aug" "sep" "sept" "oct" "nov" "dec" "acmcs" "acta" "cacm" "ibmjrd" "ibmjs" "ieeese" "ieeetcad" "ieeetc" "ipl" "jacm" "jcss" "scp" "sicomp" "tcs" "tocs" "tods" "tog" "toms" "toois" "toplas")))
                nil [34452 34952])
            ("bib-ref-regexpc" variable
               (:user-visible-flag t
                :default-value (concat bib-ref-regexp "{"))
                nil [34999 35181])
            ("bib-cite-is-XEmacs" variable (:default-value (not (null (save-match-data (string-match "XEmacs\\|Lucid" emacs-version))))) nil [35183 35289])
            ("bib-cite-minor-mode" variable nil nil [35291 35323])
            ("bib-highlight-mouse-keymap" variable (:default-value (make-sparse-keymap)) nil [35325 35443])
            ("bib-ext-list" variable nil nil [35445 35520])
            ("make-variable-buffer-local" code nil nil [35521 35563])
            ("put" code nil nil [35564 35602])
            ("bib-cite-minor-mode-menu" variable nil nil [35604 35641])
            ("bib-cite-minor-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [35658 37418])
            ("bib-cite-setup-highlight-mouse-keymap" function nil nil [37561 40206])
            ("turn-on-bib-cite" function nil nil [40223 40319])
            ("bib-cite-setup-mouse-function" function (:arguments ("beg" "end" "old-len")) nil [40321 40590])
            ("bib-cite-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "ba" (quote bib-apropos)) (define-key map "bb" (quote bib-make-bibliography)) (define-key map "bd" (quote bib-display)) (define-key map "be" (quote bib-etags)) (define-key map "bf" (quote bib-find)) (define-key map "bn" (quote bib-find-next)) (define-key map "bh" (quote bib-highlight-mouse)) map)) nil [40592 41017])
            ("easy-menu-define" code nil nil [41019 41532])
            ("or" code nil nil [41556 41692])
            ("or" code nil nil [41693 41863])
            ("cond" code nil nil [41932 44345])
            ("bib-cite-bibtex-font-lock-keywords" variable (:default-value (quote (("^\\( \\|	\\)*\\(@[A-Za-z]+\\)[ 	]*[({]\\([][A-Za-z0-9.:;?!`'()/*@_+=|<>-]+\\)?" (2 font-lock-function-name-face) (3 font-lock-reference-face nil t)) ("^[ 	]*\\(OPT[^\"#%'(),={} 	
0-9][^\"#%'(),={} 	
]*\\)[ 	]*=" 1 font-lock-comment-face) ("^[ 	]*\\([^\"#%'(),={} 	
0-9][^\"#%'(),={} 	
]*\\)[ 	]*=" 1 font-lock-variable-name-face) "Default expressions to fontify in BibTeX mode."))) nil [44375 44963])
            ("bib-cite-bibtex-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 34 "\"" st) (modify-syntax-entry 36 "$$  " st) (modify-syntax-entry 37 "<   " st) (modify-syntax-entry 39 "w   " st) (modify-syntax-entry 64 "w   " st) (modify-syntax-entry 92 "\\" st) (modify-syntax-entry 12 ">   " st) (modify-syntax-entry 10 ">   " st) (modify-syntax-entry 126 " " st) st)) nil [44965 45466])
            ("bib-string-regexp" variable (:default-value "^[, 	]*[a-zA-Z]+[ 	]*=[ 	]*\\([a-zA-Z][^#%'(),={}\" 	
]*\\)") nil [45659 45817])
            ("bib-display" function (:user-visible-flag t) nil [45819 47283])
            ("bib-find" function (:user-visible-flag t) nil [47285 48569])
            ("bib-cite-search-ring" variable nil nil [48571 48670])
            ("bib-find-next" function
               (:user-visible-flag t
                :arguments ("prev-p"))
                nil [48672 49589])
            ("bib-display-mouse" function
               (:user-visible-flag t
                :arguments ("EVENT"))
                nil [49591 49779])
            ("bib-find-mouse" function
               (:user-visible-flag t
                :arguments ("EVENT"))
                nil [49781 49962])
            ("bib-apropos" function (:user-visible-flag t) nil [49964 51810])
            ("bib-document-citekeys-obarray-warnings" variable nil nil [51812 51895])
            ("bib-make-bibliography" function (:user-visible-flag t) nil [51897 53811])
            ("bib-cite-fontify-red" function (:arguments ("limit")) nil [53813 54279])
            ("bib-cite-fontify-help-xemacs" function (:arguments ("defaults")) nil [54281 54712])
            ("bib-cite-fontify-help-as-bibtex" function nil nil [54714 55390])
            ("bib-cite-fontify-help-as-latex" function nil nil [55392 56787])
            ("bib-document-TeX-files-warnings" variable nil nil [56789 56865])
            ("bib-etags" function
               (:user-visible-flag t
                :arguments ("masterdir"))
                nil [56867 59190])
            ("bib-Is-hidden" function nil nil [59192 59540])
            ("bib-highlight-mouse" function (:user-visible-flag t) nil [59542 62469])
            ("bib-toggle-highlight" function (:user-visible-flag t) nil [62471 63154])
            ("bib-label-help-echo" function (:arguments ("object")) nil [63156 63283])
            ("bib-label-help" function (:arguments ("object" "format")) nil [63410 63914])
            ("bib-display-citation" function nil nil [64053 65114])
            ("bib-edit-citation" function nil nil [65116 66517])
            ("bib-apropos-keyword-at-point" function nil nil [66625 67078])
            ("bib-display-label" function nil nil [67231 67707])
            ("bib-find-label" function nil nil [67709 68690])
            ("bib-display-or-find-label" function (:arguments ("the-regexp" "displayf")) nil [68843 71126])
            ("bib-label-prompt-map" variable nil nil [71128 71161])
            ("if" code nil nil [71162 71331])
            ("bib-guess-or-prompt-for-label" function nil nil [71333 73169])
            ("bib-display-this-ref" function nil nil [73171 74222])
            ("bib-display-this-environment" function nil nil [74224 76713])
            ("LaTeX-find-label-hist-alist" variable nil nil [76715 76792])
            ("LaTeX-label-list" variable nil nil [76793 76861])
            ("create-alist-from-list" function (:arguments ("the-list")) nil [76864 77184])
            ("bib-cite-mh-list-to-string" function (:arguments ("l")) nil [77334 77496])
            ("bib-cite-mh-list-to-string-1" function (:arguments ("l")) nil [77498 78078])
            ("bib-get-citations" function (:arguments ("keys-obarray" "bib-buffer" "new-buffer" "substitute")) nil [78316 83800])
            ("member-cis" function (:arguments ("ELT" "LIST")) nil [83998 84512])
            ("bib-get-citekeys-obarray" function nil nil [84514 85863])
            ("bib-buffer-citekeys-obarray" function nil nil [85865 86827])
            ("bib-master-directory" function nil nil [87983 88265])
            ("bib-master-file" function nil nil [88267 89363])
            ("bib-document-TeX-files" function nil nil [90427 92359])
            ("bib-document-citekeys-obarray" function nil nil [92361 95114])
            ("bib-return-aux-file-from-tex" function (:arguments ("texname" "ext")) nil [95116 95728])
            ("bib-etags-find-noselect" function (:arguments ("tag" "masterdir")) nil [95730 96699])
            ("bib-get-bibliography" function (:arguments ("include-filenames-f")) nil [96878 99772])
            ("bib-bibliography-list" function nil nil [99774 100640])
            ("bib-create-auto-file" function (:user-visible-flag t) nil [100698 101793])
            ("psg-checkfor-file-list" function (:arguments ("filename" "list")) nil [101938 103184])
            ("search-directory-tree" function (:arguments ("directories" "extension-regexp" "recurse" "first-file")) nil [103187 104505])
            ("or" code nil nil [105019 105562])
            ("and" code nil nil [105711 106599])
            ("bib-cite-file-directory-p" function (:arguments ("file")) nil [106601 106856])
            ("psg-list-env" function (:arguments ("env")) nil [106858 107722])
            ("bib-cite" package nil nil [107724 107743]))          
      :file "bib-cite.el"
      :pointmax 107770
      :fsize 107769
      :lastmodtime '(21542 62198 23758 891000)
      :unmatched-syntax '((close-paren 29734 . 29735) (symbol 29703 . 29720) (open-paren 29702 . 29703))))
  :file "!home!edgar!.emacs.d!el-get!auctex!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
