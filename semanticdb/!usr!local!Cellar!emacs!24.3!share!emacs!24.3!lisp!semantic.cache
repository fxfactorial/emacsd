;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables
  (list
    (semanticdb-table "cus-face.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [941 972])
            ("custom-declare-face" function (:arguments ("face" "spec" "doc" "args")) nil [997 2361])
            ("custom-face-attributes" variable
               (:constant-flag t
                :default-value (quote ((:family (string :tag "Font Family" :help-echo "Font family or fontset alias name.")) (:foundry (string :tag "Font Foundry" :help-echo "Font foundry name.")) (:width (choice :tag "Width" :help-echo "Font width." :value normal (const :tag "compressed" condensed) (const :tag "condensed" condensed) (const :tag "demiexpanded" semi-expanded) (const :tag "expanded" expanded) (const :tag "extracondensed" extra-condensed) (const :tag "extraexpanded" extra-expanded) (const :tag "medium" normal) (const :tag "narrow" condensed) (const :tag "normal" normal) (const :tag "regular" normal) (const :tag "semicondensed" semi-condensed) (const :tag "semiexpanded" semi-expanded) (const :tag "ultracondensed" ultra-condensed) (const :tag "ultraexpanded" ultra-expanded) (const :tag "wide" extra-expanded))) (:height (choice :tag "Height" :help-echo "Face's font height." :value 1.0 (integer :tag "Height in 1/10 pt") (number :tag "Scale" 1.0))) (:weight (choice :tag "Weight" :help-echo "Font weight." :value normal (const :tag "black" ultra-bold) (const :tag "bold" bold) (const :tag "book" semi-light) (const :tag "demibold" semi-bold) (const :tag "extralight" extra-light) (const :tag "extrabold" extra-bold) (const :tag "heavy" extra-bold) (const :tag "light" light) (const :tag "medium" normal) (const :tag "normal" normal) (const :tag "regular" normal) (const :tag "semibold" semi-bold) (const :tag "semilight" semi-light) (const :tag "ultralight" ultra-light) (const :tag "ultrabold" ultra-bold) (const :tag "thin" thin))) (:slant (choice :tag "Slant" :help-echo "Font slant." :value normal (const :tag "italic" italic) (const :tag "oblique" oblique) (const :tag "normal" normal) (const :tag "roman" roman))) (:underline (choice :tag "Underline" :help-echo "Control text underlining." (const :tag "Off" nil) (list :tag "On" :value (:color foreground-color :style line) (const :format "" :value :color) (choice :tag "Color" (const :tag "Foreground Color" foreground-color) color) (const :format "" :value :style) (choice :tag "Style" (const :tag "Line" line) (const :tag "Wave" wave)))) (lambda (real-value) (and real-value (let ((color (or (and (consp real-value) (plist-get real-value :color)) (and (stringp real-value) real-value) (quote foreground-color))) (style (or (and (consp real-value) (plist-get real-value :style)) (quote line)))) (list :color color :style style)))) (lambda (cus-value) (and cus-value (let ((color (plist-get cus-value :color)) (style (plist-get cus-value :style))) (cond ((eq style (quote line)) (if (eq color (quote foreground-color)) t color)) (t (\` (:color (\, color) :style (\, style))))))))) (:overline (choice :tag "Overline" :help-echo "Control text overlining." (const :tag "Off" nil) (const :tag "On" t) (color :tag "Colored"))) (:strike-through (choice :tag "Strike-through" :help-echo "Control text strike-through." (const :tag "Off" nil) (const :tag "On" t) (color :tag "Colored"))) (:box (choice :tag "Box around text" :help-echo "Control box around text." (const :tag "Off" nil) (list :tag "Box" :value (:line-width 2 :color "grey75" :style released-button) (const :format "" :value :line-width) (integer :tag "Width") (const :format "" :value :color) (choice :tag "Color" (const :tag "*" nil) color) (const :format "" :value :style) (choice :tag "Style" (const :tag "Raised" released-button) (const :tag "Sunken" pressed-button) (const :tag "None" nil)))) (lambda (real-value) (and real-value (let ((lwidth (or (and (consp real-value) (plist-get real-value :line-width)) (and (integerp real-value) real-value) 1)) (color (or (and (consp real-value) (plist-get real-value :color)) (and (stringp real-value) real-value) nil)) (style (and (consp real-value) (plist-get real-value :style)))) (list :line-width lwidth :color color :style style)))) (lambda (cus-value) (and cus-value (let ((lwidth (plist-get cus-value :line-width)) (color (plist-get cus-value :color)) (style (plist-get cus-value :style))) (cond ((and (null color) (null style)) lwidth) ((and (null lwidth) (null style)) color) (t (nconc (and lwidth (\` (:line-width (\, lwidth)))) (and color (\` (:color (\, color)))) (and style (\` (:style (\, style))))))))))) (:inverse-video (choice :tag "Inverse-video" :help-echo "Control whether text should be in inverse-video." (const :tag "Off" nil) (const :tag "On" t))) (:foreground (color :tag "Foreground" :help-echo "Set foreground color (name or #RRGGBB hex spec).")) (:background (color :tag "Background" :help-echo "Set background color (name or #RRGGBB hex spec).")) (:stipple (choice :tag "Stipple" :help-echo "Background bit-mask" (const :tag "None" nil) (file :tag "File" :help-echo "Name of bitmap file." :must-match t))) (:inherit (repeat :tag "Inherit" :help-echo "List of faces to inherit attributes from." (face :Tag "Face" default)) (lambda (real-value) (cond ((or (null real-value) (eq real-value (quote unspecified))) nil) ((symbolp real-value) (list real-value)) (t real-value))) (lambda (cus-value) (if (and (consp cus-value) (null (cdr cus-value))) (car cus-value) cus-value))))))
                nil [2385 9741])
            ("custom-face-attributes-get" function (:arguments ("face" "frame")) nil [9743 10378])
            ("custom-set-faces" function (:arguments ("args")) nil [10399 11140])
            ("custom-theme-set-faces" function (:arguments ("theme" "args")) nil [11142 13589])
            ("custom-theme-reset-faces" function (:arguments ("theme" "args")) nil [13751 14107])
            ("custom-reset-faces" function (:arguments ("args")) nil [14109 14425])
            ("cus-face" package nil nil [14441 14460]))          
      :file "cus-face.el.gz"
      :pointmax 14488
      :fsize 4248
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "subr.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("custom-declare-variable-list" variable nil nil [1076 1270])
            ("custom-declare-variable-early" function (:arguments ("arguments")) nil [1363 1503])
            ("declare-function" function (:arguments ("fn" "file" "arglist" "fileonly")) nil [1505 3022])
            ("defalias" code nil nil [3051 3072])
            ("noreturn" function (:arguments ("form")) nil [3074 3278])
            ("1value" function (:arguments ("form")) nil [3280 3518])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3520 3980])
            ("lambda" function (:arguments ("cdr")) nil [3982 5140])
            ("setq-local" function (:arguments ("var" "val")) nil [5142 5354])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [5356 5797])
            ("apply-partially" function (:arguments ("fun" "args")) nil [5799 6214])
            ("push" function (:arguments ("newelt" "place")) nil [6216 6810])
            ("pop" function (:arguments ("place")) nil [6812 7376])
            ("when" function (:arguments ("cond" "body")) nil [7378 7666])
            ("unless" function (:arguments ("cond" "body")) nil [7668 7954])
            ("if" code nil nil [7956 11547])
            ("ignore-errors" function (:arguments ("body")) nil [11549 11856])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [11887 12035])
            ("error" function (:arguments ("args")) nil [12092 12421])
            ("set-advertised-calling-convention" code nil nil [12422 12492])
            ("user-error" function (:arguments ("format" "args")) nil [12494 13034])
            ("frame-configuration-p" function (:arguments ("object")) nil [13148 13403])
            ("caar" function (:arguments ("x")) nil [13428 13499])
            ("cadr" function (:arguments ("x")) nil [13501 13572])
            ("cdar" function (:arguments ("x")) nil [13574 13645])
            ("cddr" function (:arguments ("x")) nil [13647 13718])
            ("last" function (:arguments ("list" "n")) nil [13720 14137])
            ("butlast" function (:arguments ("list" "n")) nil [14139 14300])
            ("nbutlast" function (:arguments ("list" "n")) nil [14302 14530])
            ("delete-dups" function (:arguments ("list")) nil [14532 14885])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [14887 16711])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [16713 17462])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [17502 18302])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [18304 18626])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [18628 18896])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [18898 19333])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [19335 19819])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [19821 20314])
            ("remove" function (:arguments ("elt" "seq")) nil [20316 20669])
            ("remq" function (:arguments ("elt" "list")) nil [20671 21002])
            ("kbd" function (:arguments ("keys")) nil [21027 21337])
            ("put" code nil nil [21338 21356])
            ("undefined" function (:user-visible-flag t) nil [21358 21456])
            ("put" code nil nil [21551 21586])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [21588 22152])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [22154 22806])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [22808 24869])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [24871 25551])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [25553 26023])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [26077 26677])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [26679 27145])
            ("keymap-canonicalize" function (:arguments ("map")) nil [27147 29016])
            ("put" code nil nil [29018 29075])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [29077 29452])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [29483 30229])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [30231 31035])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [31037 31233])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [31235 31464])
            ("key-substitution-in-progress" variable nil nil [31520 31613])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [31615 33000])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [33002 34667])
            ("global-map" variable nil nil [34816 34990])
            ("esc-map" variable nil nil [34992 35132])
            ("ctl-x-map" variable nil nil [35134 35269])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [35271 35349])
            ("defalias" code nil nil [35350 35388])
            ("define-key" code nil nil [35389 35431])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [35433 35505])
            ("defalias" code nil nil [35506 35544])
            ("define-key" code nil nil [35545 35587])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [35627 35682])
            ("listify-key-sequence" function (:arguments ("key")) nil [35684 35922])
            ("eventp" function (:arguments ("obj")) nil [35924 36125])
            ("event-modifiers" function (:arguments ("event")) nil [36127 37421])
            ("event-basic-type" function (:arguments ("event")) nil [37423 38191])
            ("mouse-movement-p" function (:arguments ("object")) nil [38193 38326])
            ("mouse-event-p" function (:arguments ("object")) nil [38328 38546])
            ("event-start" function (:arguments ("event")) nil [38548 39279])
            ("event-end" function (:arguments ("event")) nil [39281 40121])
            ("event-click-count" function (:arguments ("event")) nil [40123 40333])
            ("posnp" function (:arguments ("obj")) nil [40390 40690])
            ("posn-window" function (:arguments ("position")) nil [40724 40906])
            ("posn-area" function (:arguments ("position")) nil [40908 41232])
            ("posn-point" function (:arguments ("position")) nil [41234 41509])
            ("posn-set-point" function (:arguments ("position")) nil [41511 41831])
            ("posn-x-y" function (:arguments ("position")) nil [41833 42086])
            ("declare-function" code nil nil [42088 42154])
            ("posn-col-row" function (:arguments ("position")) nil [42156 43702])
            ("posn-actual-col-row" function (:arguments ("position")) nil [43704 44138])
            ("posn-timestamp" function (:arguments ("position")) nil [44140 44328])
            ("posn-string" function (:arguments ("position")) nil [44330 44582])
            ("posn-image" function (:arguments ("position")) nil [44584 44824])
            ("posn-object" function (:arguments ("position")) nil [44826 45195])
            ("posn-object-x-y" function (:arguments ("position")) nil [45197 45484])
            ("posn-object-width-height" function (:arguments ("position")) nil [45486 45746])
            ("define-obsolete-function-alias" code nil nil [45789 45854])
            ("define-obsolete-function-alias" code nil nil [45855 45928])
            ("define-obsolete-function-alias" code nil nil [45929 45993])
            ("define-obsolete-function-alias" code nil nil [45994 46065])
            ("define-obsolete-function-alias" code nil nil [46066 46139])
            ("define-obsolete-function-alias" code nil nil [46140 46212])
            ("make-obsolete" code nil nil [46214 46280])
            ("make-obsolete" code nil nil [46281 46330])
            ("insert-string" function (:arguments ("args")) nil [46332 46650])
            ("makehash" function (:arguments ("test")) nil [46652 46772])
            ("defalias" code nil nil [46820 46854])
            ("make-obsolete" code nil nil [46855 46909])
            ("defalias" code nil nil [46910 46946])
            ("make-obsolete" code nil nil [46947 47003])
            ("make-obsolete" code nil nil [47004 47111])
            ("make-obsolete" code nil nil [47112 47173])
            ("set-advertised-calling-convention" code nil nil [47174 47248])
            ("set-advertised-calling-convention" code nil nil [47249 47350])
            ("set-advertised-calling-convention" code nil nil [47351 47419])
            ("set-advertised-calling-convention" code nil nil [47420 47505])
            ("make-obsolete-variable" code nil nil [47910 47985])
            ("make-obsolete-variable" code nil nil [47986 48065])
            ("make-obsolete-variable" code nil nil [48066 48133])
            ("make-obsolete-variable" code nil nil [48134 48199])
            ("make-obsolete-variable" code nil nil [48200 48261])
            ("make-obsolete-variable" code nil nil [48262 48333])
            ("make-obsolete-variable" code nil nil [48334 48399])
            ("make-obsolete-variable" code nil nil [48400 48461])
            ("make-obsolete-variable" code nil nil [48462 48537])
            ("make-obsolete-variable" code nil nil [48538 48615])
            ("make-obsolete-variable" code nil nil [48616 48695])
            ("make-obsolete-variable" code nil nil [48696 48773])
            ("make-obsolete-variable" code nil nil [48774 48853])
            ("make-obsolete-variable" code nil nil [48854 48943])
            ("make-obsolete-variable" code nil nil [48944 49019])
            ("make-obsolete-variable" code nil nil [49020 49101])
            ("make-obsolete-variable" code nil nil [49102 49185])
            ("make-obsolete-variable" code nil nil [49186 49281])
            ("make-obsolete-variable" code nil nil [49282 49369])
            ("make-obsolete-variable" code nil nil [49370 49451])
            ("make-obsolete-variable" code nil nil [49452 49539])
            ("make-obsolete-variable" code nil nil [49540 49631])
            ("make-obsolete-variable" code nil nil [49632 49697])
            ("make-obsolete-variable" code nil nil [49698 49763])
            ("make-obsolete-variable" code nil nil [49764 49839])
            ("make-obsolete-variable" code nil nil [49840 49943])
            ("make-obsolete-variable" code nil nil [49944 50037])
            ("make-obsolete-variable" code nil nil [50038 50101])
            ("make-obsolete-variable" code nil nil [50102 50242])
            ("make-obsolete-variable" code nil nil [50244 50308])
            ("make-obsolete-variable" code nil nil [50309 50392])
            ("make-obsolete-variable" code nil nil [50393 50465])
            ("make-obsolete-variable" code nil nil [50466 50542])
            ("make-obsolete" code nil nil [50543 50599])
            ("make-obsolete" code nil nil [50600 50660])
            ("make-obsolete" code nil nil [50662 50716])
            ("make-obsolete" code nil nil [50717 50773])
            ("define-obsolete-variable-alias" code nil nil [50812 50899])
            ("define-obsolete-variable-alias" code nil nil [50901 50994])
            ("define-obsolete-variable-alias" code nil nil [50995 51088])
            ("make-obsolete-variable" code nil nil [51334 51398])
            ("defvaralias" code nil nil [51400 51457])
            ("defalias" code nil nil [51530 51574])
            ("defalias" code nil nil [51575 51619])
            ("defalias" code nil nil [51620 51653])
            ("defalias" code nil nil [51654 51687])
            ("defalias" code nil nil [51688 51723])
            ("defalias" code nil nil [51724 51750])
            ("defalias" code nil nil [51751 51777])
            ("defalias" code nil nil [51778 51800])
            ("defalias" code nil nil [51826 51865])
            ("defalias" code nil nil [51866 51920])
            ("defalias" code nil nil [51921 51991])
            ("defalias" code nil nil [51992 52064])
            ("defalias" code nil nil [52065 52108])
            ("defalias" code nil nil [52109 52153])
            ("defalias" code nil nil [52154 52187])
            ("defalias" code nil nil [52188 52221])
            ("defalias" code nil nil [52253 52296])
            ("defalias" code nil nil [52297 52346])
            ("defalias" code nil nil [52348 52401])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [52440 54576])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [54578 56246])
            ("letrec" function (:arguments ("binders" "body")) nil [56248 56877])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [56879 59822])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [59824 61127])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [61130 62449])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [62451 63663])
            ("delay-mode-hooks" variable nil nil [63685 63779])
            ("delayed-mode-hooks" variable nil nil [63780 63861])
            ("make-variable-buffer-local" code nil nil [63862 63910])
            ("put" code nil nil [63911 63953])
            ("change-major-mode-after-body-hook" variable nil nil [63955 64069])
            ("after-change-major-mode-hook" variable nil nil [64071 64173])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [64175 65058])
            ("delay-mode-hooks" function (:arguments ("body")) nil [65060 65461])
            ("derived-mode-p" function (:arguments ("modes")) nil [65522 65835])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [66026 66219])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [66221 68906])
            ("autoloadp" function (:arguments ("object")) nil [68927 69029])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [69513 70737])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [70739 72145])
            ("load-history-regexp" function (:arguments ("file")) nil [72186 72822])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [72824 73260])
            ("put" code nil nil [73262 73308])
            ("eval-after-load" function (:arguments ("file" "form")) nil [73309 76250])
            ("after-load-functions" variable nil nil [76252 76425])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [76427 77427])
            ("eval-next-after-load" function (:arguments ("file")) nil [77429 77729])
            ("display-delayed-warnings" function nil nil [77731 77998])
            ("collapse-delayed-warnings" function nil nil [78000 78679])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [78809 79149])
            ("process-lines" function (:arguments ("program" "args")) nil [79174 79779])
            ("process-live-p" function (:arguments ("process")) nil [79781 80021])
            ("make-obsolete" code nil nil [80041 80166])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [80167 80511])
            ("process-kill-buffer-query-function" function nil nil [80513 80932])
            ("add-hook" code nil nil [80934 81009])
            ("process-get" function (:arguments ("process" "propname")) nil [81040 81252])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [81254 81493])
            ("read-quoted-char-radix" variable (:default-value 8) nil [81533 81678])
            ("custom-declare-variable-early" code nil nil [81680 81923])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [81925 81975])
            ("read-key-delay" variable (:default-value 0.01) nil [81977 82005])
            ("read-key" function (:arguments ("prompt")) nil [82054 84760])
            ("read-quoted-char" function (:arguments ("prompt")) nil [84762 87357])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (function delete-minibuffer-contents)) map)) nil [87359 87696])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [87698 90154])
            ("read-number" function (:arguments ("prompt" "default")) nil [90218 91240])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [91242 92981])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [92983 94490])
            ("set-advertised-calling-convention" code nil nil [94491 94570])
            ("y-or-n-p" function (:arguments ("prompt")) nil [94572 98231])
            ("atomic-change-group" function (:arguments ("body")) nil [98262 99468])
            ("prepare-change-group" function (:arguments ("buffer")) nil [99470 100946])
            ("activate-change-group" function (:arguments ("handle")) nil [100948 101186])
            ("accept-change-group" function (:arguments ("handle")) nil [101188 101479])
            ("cancel-change-group" function (:arguments ("handle")) nil [101481 102652])
            ("define-obsolete-function-alias" code nil nil [102710 102792])
            ("force-mode-line-update" function (:arguments ("all")) nil [102794 103168])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [103170 104623])
            ("copy-overlay" function (:arguments ("o")) nil [104652 105226])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [105228 106236])
            ("suspend-hook" variable nil nil [106258 106342])
            ("suspend-resume-hook" variable nil nil [106344 106442])
            ("temp-buffer-show-hook" variable nil nil [106444 106660])
            ("temp-buffer-setup-hook" variable nil nil [106662 106893])
            ("defvar-local" code nil nil [106895 107234])
            ("put" code nil nil [107343 107396])
            ("put" code nil nil [107397 107468])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [107470 107845])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [107847 108839])
            ("buffer-narrowed-p" function nil nil [108872 109006])
            ("find-tag-default" function nil nil [109008 109958])
            ("play-sound" function (:arguments ("sound")) nil [109960 110779])
            ("declare-function" code nil nil [110781 110837])
            ("shell-quote-argument" function (:arguments ("argument")) nil [110839 112984])
            ("string-or-null-p" function (:arguments ("object")) nil [112986 113123])
            ("booleanp" function (:arguments ("object")) nil [113125 113283])
            ("field-at-pos" function (:arguments ("pos")) nil [113285 113555])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [113557 113920])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [113922 114732])
            ("yank-handled-properties" variable nil nil [114782 114814])
            ("yank-excluded-properties" variable nil nil [114815 114848])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [114850 115639])
            ("yank-undo-function" variable nil nil [115641 115668])
            ("insert-for-yank" function (:arguments ("string")) nil [115670 116029])
            ("insert-for-yank-1" function (:arguments ("string")) nil [116031 118381])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [118383 118868])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [118870 119556])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [119558 119870])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [120009 120447])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [120485 121398])
            ("set-advertised-calling-convention" code nil nil [121399 121528])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [121530 121949])
            ("set-advertised-calling-convention" code nil nil [121950 122084])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [122086 123531])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [123533 123977])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [124032 124420])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [124422 124942])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [124944 125504])
            ("with-selected-window" function (:arguments ("window" "body")) nil [125506 126644])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [126646 127387])
            ("save-window-excursion" function (:arguments ("body")) nil [127389 128208])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [128210 129605])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [129658 131858])
            ("with-temp-file" function (:arguments ("file" "body")) nil [131860 132555])
            ("with-temp-message" function (:arguments ("message" "body")) nil [132557 133484])
            ("with-temp-buffer" function (:arguments ("body")) nil [133486 134045])
            ("with-silent-modifications" function (:arguments ("body")) nil [134047 135243])
            ("with-output-to-string" function (:arguments ("body")) nil [135245 135690])
            ("with-local-quit" function (:arguments ("body")) nil [135692 136447])
            ("while-no-input" function (:arguments ("body")) nil [136449 136949])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [136951 137456])
            ("define-obsolete-function-alias" code nil nil [137458 137553])
            ("with-demoted-errors" function (:arguments ("body")) nil [137555 138051])
            ("combine-after-change-calls" function (:arguments ("body")) nil [138053 138748])
            ("with-case-table" function (:arguments ("table" "body")) nil [138750 139271])
            ("save-match-data-internal" variable nil nil [139304 139337])
            ("save-match-data" function (:arguments ("body")) nil [139595 140275])
            ("match-string" function (:arguments ("num" "string")) nil [140277 140922])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [140924 141648])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [141651 142300])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [142303 143387])
            ("looking-at-p" function (:arguments ("regexp")) nil [143389 143567])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [143569 143789])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [143791 145701])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [145723 146076])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls")) nil [146338 148239])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [148241 148802])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [148804 149440])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [149474 149878])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [149880 152459])
            ("string-prefix-p" function (:arguments ("str1" "str2" "ignore-case")) nil [152462 152761])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [152763 153546])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [153574 153917])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [153919 154143])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [154167 154803])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [154805 155125])
            ("syntax-after" function (:arguments ("pos")) nil [155127 155500])
            ("syntax-class" function (:arguments ("syntax")) nil [155502 155854])
            ("text-clone-maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [155875 157905])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [157907 160094])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [160202 161780])
            ("set-temporary-overlay-map" function (:arguments ("map" "keep-pred")) nil [161783 163454])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [164037 164804])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [164806 166651])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [166653 167152])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [167154 167271])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [167273 168979])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [168981 169136])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [169138 170242])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [170279 170438])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-_+ ]?alpha$" . -3) ("^[-_+]$" . -3) ("^[-_+ ]cvs$" . -3) ("^[-_+ ]?beta$" . -2) ("^[-_+ ]?\\(pre\\|rcc\\)$" . -1))))
                nil [170441 171666])
            ("version-to-list" function (:arguments ("ver")) nil [171669 174007])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [174010 174841])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [174844 175643])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [175646 176431])
            ("version-list-not-zero" function (:arguments ("lst")) nil [176433 176743])
            ("version<" function (:arguments ("v1" "v2")) nil [176746 177202])
            ("version<=" function (:arguments ("v1" "v2")) nil [177205 177675])
            ("version=" function (:arguments ("v1" "v2")) nil [177677 178123])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [178137 178199])
            ("when" code nil nil [178361 178486]))          
      :file "subr.el.gz"
      :pointmax 178510
      :fsize 53250
      :lastmodtime '(20708 57451 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "files.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("font-lock-keywords" variable nil nil [1074 1101])
            ("backup" customgroup (:user-visible-flag t) nil [1103 1174])
            ("find-file" customgroup (:user-visible-flag t) nil [1176 1235])
            ("delete-auto-save-files" variable (:default-value t) nil [1238 1488])
            ("directory-abbrev-alist" variable nil nil [1490 2455])
            ("make-backup-files" variable (:default-value t) nil [2457 3380])
            ("backup-inhibited" variable nil nil [3481 3694])
            ("put" code nil nil [3695 3737])
            ("backup-by-copying" variable nil nil [3739 3917])
            ("backup-by-copying-when-linked" variable nil nil [3919 4212])
            ("backup-by-copying-when-mismatch" variable (:default-value t) nil [4214 4702])
            ("put" code nil nil [4703 4760])
            ("backup-by-copying-when-privileged-mismatch" variable (:default-value 200) nil [4762 5385])
            ("backup-enable-predicate" variable (:default-value (quote normal-backup-enable-predicate)) nil [5387 5606])
            ("buffer-offer-save" variable nil nil [5608 5827])
            ("make-variable-buffer-local" code nil nil [5828 5875])
            ("put" code nil nil [5876 5919])
            ("find-file-existing-other-name" variable (:default-value t) nil [5921 6214])
            ("find-file-visit-truename" variable nil nil [6216 6469])
            ("put" code nil nil [6470 6532])
            ("revert-without-query" variable nil nil [6534 6899])
            ("buffer-file-number" variable nil nil [6901 7170])
            ("make-variable-buffer-local" code nil nil [7171 7219])
            ("put" code nil nil [7220 7264])
            ("buffer-file-numbers-unique" variable (:default-value (not (memq system-type (quote (windows-nt))))) nil [7266 7411])
            ("buffer-file-read-only" variable nil nil [7413 7503])
            ("make-variable-buffer-local" code nil nil [7504 7555])
            ("small-temporary-file-directory" variable (:default-value (if (eq system-type (quote ms-dos)) (getenv "TMPDIR"))) nil [7557 8001])
            ("null-device" variable (:default-value (purecopy "/dev/null")) nil [8069 8138])
            ("declare-function" code nil nil [8140 8190])
            ("declare-function" code nil nil [8191 8240])
            ("declare-function" code nil nil [8241 8327])
            ("declare-function" code nil nil [8328 8373])
            ("declare-function" code nil nil [8374 8446])
            ("declare-function" code nil nil [8447 8503])
            ("declare-function" code nil nil [8504 8550])
            ("declare-function" code nil nil [8551 8610])
            ("file-name-invalid-regexp" variable (:default-value (cond ((and (eq system-type (quote ms-dos)) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type (quote (ms-dos windows-nt cygwin))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]")))) nil [8612 9285])
            ("file-precious-flag" variable nil nil [9287 10127])
            ("break-hardlink-on-save" variable nil nil [10129 10826])
            ("version-control" variable nil nil [10828 11198])
            ("put" code nil nil [11199 11295])
            ("dired-kept-versions" variable (:default-value 2) nil [11297 11437])
            ("delete-old-versions" variable nil nil [11439 11705])
            ("kept-old-versions" variable (:default-value 2) nil [11707 11846])
            ("put" code nil nil [11847 11902])
            ("kept-new-versions" variable (:default-value 2) nil [11904 12081])
            ("put" code nil nil [12082 12137])
            ("require-final-newline" variable nil nil [12139 12892])
            ("mode-require-final-newline" variable (:default-value t) nil [12894 14029])
            ("auto-save-default" variable (:default-value t) nil [14031 14173])
            ("auto-save-file-name-transforms" variable (:default-value (\` (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" (\, (concat temporary-file-directory "\\2")) t)))) nil [14175 15603])
            ("save-abbrevs" variable (:default-value t) nil [15605 15816])
            ("find-file-run-dired" variable (:default-value t) nil [15818 16015])
            ("find-directory-functions" variable (:default-value (quote (cvs-dired-noselect dired-noselect))) nil [16017 16345])
            ("file-name-at-point-functions" variable (:default-value (quote (ffap-guess-file-name-at-point))) nil [16406 16734])
            ("define-obsolete-variable-alias" code nil nil [16842 16943])
            ("find-file-not-found-functions" variable nil nil [16944 17245])
            ("define-obsolete-variable-alias" code nil nil [17343 17415])
            ("find-file-hook" variable nil nil [17416 17693])
            ("define-obsolete-variable-alias" code nil nil [17695 17774])
            ("write-file-functions" variable nil nil [17775 18556])
            ("put" code nil nil [18557 18603])
            ("local-write-file-hooks" variable nil nil [18605 18640])
            ("make-variable-buffer-local" code nil nil [18641 18693])
            ("put" code nil nil [18694 18742])
            ("make-obsolete-variable" code nil nil [18743 18820])
            ("define-obsolete-variable-alias" code nil nil [18822 18913])
            ("write-contents-functions" variable nil nil [18914 19670])
            ("make-variable-buffer-local" code nil nil [19671 19725])
            ("enable-local-variables" variable (:default-value t) nil [19727 20979])
            ("local-enable-local-variables" variable (:default-value t) nil [22342 22727])
            ("enable-local-eval" variable (:default-value (quote maybe)) nil [22729 23120])
            ("or" code nil nil [23185 23248])
            ("or" code nil nil [23249 23316])
            ("or" code nil nil [23317 23384])
            ("view-read-only" variable nil nil [23386 23738])
            ("file-name-history" variable nil nil [23740 23923])
            ("put" code nil nil [23926 23980])
            ("ange-ftp-completion-hook-function" function (:arguments ("op" "args")) nil [23981 24587])
            ("declare-function" code nil nil [24589 24661])
            ("declare-function" code nil nil [24662 24734])
            ("convert-standard-filename" function (:arguments ("filename")) nil [24736 25989])
            ("read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [25991 27112])
            ("pwd" function (:user-visible-flag t) nil [27116 27235])
            ("cd-path" variable nil nil [27237 27367])
            ("parse-colon-path" function (:arguments ("search-path")) nil [27369 27988])
            ("cd-absolute" function (:arguments ("dir")) nil [27990 28885])
            ("cd" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [28887 30777])
            ("load-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [30779 31090])
            ("locate-file" function (:arguments ("filename" "path" "suffixes" "predicate")) nil [31092 32490])
            ("locate-file-completion-table" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [32492 35454])
            ("locate-file-completion" function (:arguments ("string" "path-and-suffixes" "action")) nil [35456 35864])
            ("locate-dominating-stop-dir-regexp" variable (:default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'")) nil [35866 36470])
            ("locate-dominating-file" function (:arguments ("file" "name")) nil [38023 40212])
            ("executable-find" function (:arguments ("command")) nil [40215 40523])
            ("load-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [40525 41122])
            ("file-remote-p" function (:arguments ("file" "identification" "connected")) nil [41124 42878])
            ("remote-shell-program" variable (:default-value (purecopy (let ((list (quote ("ssh" "remsh" "rcmd" "rsh")))) (while (and list (not (executable-find (car list))) (setq list (cdr list)))) (or (car list) "ssh")))) nil [43177 43896])
            ("remote-file-name-inhibit-cache" variable (:default-value 10) nil [43898 45123])
            ("file-local-copy" function (:arguments ("file")) nil [45125 45514])
            ("file-truename" function (:arguments ("filename" "counter" "prev-dirs")) nil [45516 50407])
            ("file-chase-links" function (:arguments ("filename" "limit")) nil [50409 51812])
            ("file-size-human-readable" function (:arguments ("file-size" "flavor")) nil [51944 53061])
            ("make-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [53063 54654])
            ("recode-file-name" function
               (:user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [54656 56893])
            ("confirm-nonexistent-file-or-buffer" variable (:default-value (quote after-completion)) nil [56896 57509])
            ("confirm-nonexistent-file-or-buffer" function nil nil [57511 57952])
            ("minibuffer-with-setup-hook" function (:arguments ("fun" "body")) nil [57954 58780])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [58782 58896])
            ("find-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [58898 60142])
            ("find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [60144 61074])
            ("find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [61076 62000])
            ("find-file-existing" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [62002 62437])
            ("find-file--read-only" function (:arguments ("fun" "filename" "wildcards")) nil [62439 62866])
            ("find-file-read-only" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [62868 63251])
            ("find-file-read-only-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [63253 63706])
            ("find-file-read-only-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [63708 64156])
            ("find-alternate-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [64158 65107])
            ("kill-buffer-hook" variable nil nil [65168 65316])
            ("find-alternate-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [65318 68287])
            ("create-file-buffer" function (:arguments ("filename")) nil [68290 68832])
            ("generate-new-buffer" function (:arguments ("name")) nil [68834 69039])
            ("automount-dir-prefix" variable (:default-value (purecopy "^/tmp_mnt/")) nil [69041 69193])
            ("make-obsolete-variable" code nil nil [69194 69271])
            ("abbreviated-home-dir" variable nil nil [69273 69380])
            ("abbreviate-file-name" function (:arguments ("filename")) nil [69382 71733])
            ("find-buffer-visiting" function (:arguments ("filename" "predicate")) nil [71735 73662])
            ("find-file-wildcards" variable (:default-value t) nil [73665 73912])
            ("find-file-suppress-same-file-warnings" variable nil nil [73914 74240])
            ("large-file-warning-threshold" variable (:default-value 10000000) nil [74242 74521])
            ("abort-if-file-too-large" function (:arguments ("size" "op-type" "filename")) nil [74523 75010])
            ("find-file-noselect" function (:arguments ("filename" "nowarn" "rawfile" "wildcards")) nil [75012 81971])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [81973 84509])
            ("file-name-buffer-file-type-alist" variable nil nil [84512 84553])
            ("insert-file-contents-literally" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [84573 85573])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [85575 86272])
            ("insert-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [86274 86695])
            ("find-file-literally" variable nil nil [86697 86904])
            ("put" code nil nil [86905 86950])
            ("find-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [86952 88046])
            ("after-find-file" function (:arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes")) nil [88049 91394])
            ("report-errors" function (:arguments ("format" "body")) nil [91396 91876])
            ("normal-mode" function
               (:user-visible-flag t
                :arguments ("find-file"))
                nil [91878 93529])
            ("auto-mode-case-fold" variable (:default-value t) nil [93531 93969])
            ("auto-mode-alist" variable (:default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) (\` (("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . html-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs].dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) (\,@ (if (memq system-type (quote (berkeley-unix darwin))) (quote (("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode))) (quote (("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ck]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_profile\\|z?login\\|bash_login\\|z?logout\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_logout\\|shrc\\|[kz]shrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|7Z\\)\\'" . archive-mode) ("\\.\\(sx[dmicw]\\|od[fgpst]\\|oxt\\)\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.js\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.[ds]?vh?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[]>:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX?\\|XLSX?\\|PPTX?\\|pdf\\|dvi\\|od[fgpst]\\|docx?\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.\\(?:desktop\\|la\\)\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gnokiirc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:enigma\\|gltron\\|gtk\\|hxplayer\\|net\\|neverball\\|qt/.+\\|realplayer\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode))))) nil [93971 105125])
            ("put" code nil nil [105126 105172])
            ("conf-mode-maybe" function nil nil [105174 105424])
            ("interpreter-mode-alist" variable (:default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) (quote (("perl" . perl-mode) ("perl5" . perl-mode) ("miniperl" . perl-mode) ("wish" . tcl-mode) ("wishx" . tcl-mode) ("tcl" . tcl-mode) ("tclsh" . tcl-mode) ("scm" . scheme-mode) ("ash" . sh-mode) ("bash" . sh-mode) ("bash2" . sh-mode) ("csh" . sh-mode) ("dtksh" . sh-mode) ("es" . sh-mode) ("itcsh" . sh-mode) ("jsh" . sh-mode) ("ksh" . sh-mode) ("oash" . sh-mode) ("pdksh" . sh-mode) ("rbash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh" . sh-mode) ("sh5" . sh-mode) ("tcsh" . sh-mode) ("wksh" . sh-mode) ("wsh" . sh-mode) ("zsh" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode))))) nil [105426 107007])
            ("define-obsolete-variable-alias" code nil nil [107009 107122])
            ("inhibit-local-variables-regexps" variable (:default-value (mapcar (quote purecopy) (quote ("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'")))) nil [107321 108139])
            ("define-obsolete-variable-alias" code nil nil [108141 108251])
            ("inhibit-local-variables-suffixes" variable nil nil [108253 108503])
            ("inhibit-local-variables-p" function nil nil [108548 109229])
            ("auto-mode-interpreter-regexp" variable (:default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)")) nil [109231 109749])
            ("magic-mode-alist" variable nil nil [109751 110285])
            ("put" code nil nil [110286 110333])
            ("magic-fallback-mode-alist" variable (:default-value (purecopy (\` ((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]"))) . html-mode) ("<!DOCTYPE[ 	
]+[Hh][Tt][Mm][Ll]" . html-mode) ("<\\?xml " . xml-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE "))) . sgml-mode) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode))))) nil [110335 111876])
            ("put" code nil nil [111877 111933])
            ("magic-mode-regexp-match-limit" variable (:default-value 4000) nil [111935 112077])
            ("set-auto-mode" function (:arguments ("keep-mode-if-same")) nil [112079 118269])
            ("set-auto-mode-0" function (:arguments ("mode" "keep-mode-if-same")) nil [118522 118929])
            ("file-auto-mode-skip" variable (:default-value "^\\(#!\\|'\\\\\"\\)") nil [118931 119197])
            ("set-auto-mode-1" function nil nil [119199 120704])
            ("ignored-local-variables" variable (:default-value (quote (ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist))) nil [120742 120948])
            ("put" code nil nil [120949 121003])
            ("hack-local-variables-hook" variable nil nil [121005 121238])
            ("safe-local-variable-values" variable nil nil [121240 121500])
            ("safe-local-eval-forms" variable (:default-value (quote ((add-hook (quote write-file-hooks) (quote time-stamp)) (add-hook (quote write-file-functions) (quote time-stamp)) (add-hook (quote before-save-hook) (quote time-stamp) nil t) (add-hook (quote before-save-hook) (quote delete-trailing-whitespace) nil t)))) nil [121502 122164])
            ("mapc" code nil nil [122192 122809])
            ("dolist" code nil nil [123451 124139])
            ("put" code nil nil [124141 124255])
            ("put" code nil nil [124257 124303])
            ("file-local-variables-alist" variable nil nil [124305 124660])
            ("make-variable-buffer-local" code nil nil [124661 124717])
            ("put" code nil nil [124718 124770])
            ("dir-local-variables-alist" variable nil nil [124772 125154])
            ("make-variable-buffer-local" code nil nil [125155 125210])
            ("before-hack-local-variables-hook" variable nil nil [125212 125630])
            ("hack-local-variables-confirm" function (:arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name")) nil [125632 128502])
            ("hack-local-variables-prop-line" function (:arguments ("mode-only")) nil [128504 130882])
            ("hack-local-variables-filter" function (:arguments ("variables" "dir-name")) nil [130884 133370])
            ("hack-local-variables" function (:arguments ("mode-only")) nil [133372 138827])
            ("hack-local-variables-apply" function nil nil [138829 139630])
            ("safe-local-variable-p" function (:arguments ("sym" "val")) nil [139632 140320])
            ("risky-local-variable-p" function (:arguments ("sym" "_ignored")) nil [140322 141225])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [141227 141331])
            ("hack-one-local-variable-constantp" function (:arguments ("exp")) nil [141333 141521])
            ("hack-one-local-variable-eval-safep" function (:arguments ("exp")) nil [141523 143343])
            ("hack-one-local-variable" function (:arguments ("var" "val")) nil [143345 144317])
            ("dir-locals-class-alist" variable (:default-value (quote nil)) nil [144383 144498])
            ("dir-locals-directory-cache" variable (:default-value (quote nil)) nil [144500 145076])
            ("dir-locals-get-class-variables" function (:arguments ("class")) nil [145078 145211])
            ("dir-locals-collect-mode-variables" function (:arguments ("mode-variables" "variables")) nil [145213 145858])
            ("dir-locals-collect-variables" function (:arguments ("class-variables" "root" "variables")) nil [145860 147871])
            ("dir-locals-set-directory-class" function (:arguments ("directory" "class" "mtime")) nil [147873 148637])
            ("dir-locals-set-class-variables" function (:arguments ("class" "variables")) nil [148639 150102])
            ("dir-locals-file" variable
               (:constant-flag t
                :default-value ".dir-locals.el")
                nil [150104 150286])
            ("dir-locals-find-file" function (:arguments ("file")) nil [150288 153352])
            ("dir-locals-read-from-file" function (:arguments ("file")) nil [153354 154250])
            ("enable-remote-dir-locals" variable nil nil [154252 154418])
            ("hack-dir-local-variables" function nil nil [154420 155665])
            ("hack-dir-local-variables-non-file-buffer" function nil nil [155667 155973])
            ("change-major-mode-with-file-name" variable (:default-value t) nil [155977 156414])
            ("set-visited-file-name" function
               (:user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [156416 161393])
            ("write-file" function
               (:user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [161395 163272])
            ("backup-buffer" function nil nil [163275 167201])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "context")) nil [167203 168328])
            ("file-name-version-regexp" variable (:default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)") nil [168330 168623])
            ("file-name-sans-versions" function (:arguments ("name" "keep-backup-version")) nil [168625 169324])
            ("file-ownership-preserved-p" function (:arguments ("file")) nil [169326 170125])
            ("file-name-sans-extension" function (:arguments ("filename")) nil [170127 170822])
            ("file-name-extension" function (:arguments ("filename" "period")) nil [170824 171641])
            ("file-name-base" function (:arguments ("filename")) nil [171643 171887])
            ("make-backup-file-name-function" variable nil nil [171889 172375])
            ("backup-directory-alist" variable nil nil [172377 173414])
            ("normal-backup-enable-predicate" function (:arguments ("name")) nil [173416 174284])
            ("make-backup-file-name" function (:arguments ("file")) nil [174286 175303])
            ("make-backup-file-name-1" function (:arguments ("file")) nil [175305 177369])
            ("backup-file-name-p" function (:arguments ("file")) nil [177371 177632])
            ("backup-extract-version-start" variable nil nil [177634 177671])
            ("backup-extract-version" function (:arguments ("fn")) nil [177846 178298])
            ("find-backup-file-name" function (:arguments ("fn")) nil [178300 180421])
            ("file-nlinks" function (:arguments ("filename")) nil [180423 180540])
            ("file-relative-name" function (:arguments ("filename" "directory")) nil [182516 185321])
            ("save-buffer" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [185324 187724])
            ("delete-auto-save-file-if-necessary" function (:arguments ("force")) nil [187726 188297])
            ("auto-save-hook" variable nil nil [188299 188371])
            ("before-save-hook" variable nil nil [188373 188543])
            ("after-save-hook" variable nil nil [188545 188736])
            ("save-buffer-coding-system" variable nil nil [188738 189110])
            ("make-variable-buffer-local" code nil nil [189112 189167])
            ("put" code nil nil [189168 189219])
            ("basic-save-buffer" function (:user-visible-flag t) nil [189221 193046])
            ("basic-save-buffer-1" function nil nil [193320 193711])
            ("basic-save-buffer-2" function nil nil [193792 198262])
            ("declare-function" code nil nil [198264 198350])
            ("save-some-buffers-action-alist" variable (:default-value (\` ((18 (\, (lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil)) (\, (purecopy "view this buffer"))) (100 (\, (lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require (quote diff)) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil (quote noasync)))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil)) (\, (purecopy "view changes in this buffer")))))) nil [198352 199518])
            ("put" code nil nil [199519 199580])
            ("buffer-save-without-query" variable nil nil [199582 199698])
            ("make-variable-buffer-local" code nil nil [199699 199754])
            ("save-some-buffers" function
               (:user-visible-flag t
                :arguments ("arg" "pred"))
                nil [199756 203214])
            ("not-modified" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [203217 203668])
            ("toggle-read-only" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [203670 203911])
            ("insert-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [203913 204309])
            ("append-to-file" function
               (:user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [204311 204922])
            ("file-newest-backup" function (:arguments ("filename")) nil [204924 205847])
            ("rename-uniquely" function (:user-visible-flag t) nil [205849 206865])
            ("make-directory" function
               (:user-visible-flag t
                :arguments ("dir" "parents"))
                nil [206867 208439])
            ("directory-files-no-dot-files-regexp" variable
               (:constant-flag t
                :default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*")
                nil [208441 208587])
            ("delete-directory" function
               (:user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [208589 211050])
            ("file-equal-p" function (:arguments ("file1" "file2")) nil [211052 211612])
            ("file-in-directory-p" function (:arguments ("file" "dir")) nil [211614 212552])
            ("copy-directory" function
               (:user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [212554 215741])
            ("prune-directory-list" function (:arguments ("dirs" "keep" "reject")) nil [215789 216351])
            ("put" code nil nil [216355 216403])
            ("revert-buffer-function" variable nil nil [216404 216626])
            ("put" code nil nil [216628 216697])
            ("revert-buffer-insert-file-contents-function" variable nil nil [216698 216994])
            ("buffer-stale-function" variable nil nil [216996 217784])
            ("before-revert-hook" variable nil nil [217786 217978])
            ("after-revert-hook" variable nil nil [217980 218324])
            ("revert-buffer-in-progress-p" variable nil nil [218326 218503])
            ("revert-buffer-internal-hook" variable nil nil [218505 218541])
            ("revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [218543 224823])
            ("recover-this-file" function (:user-visible-flag t) nil [224825 224976])
            ("recover-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [224978 227062])
            ("recover-session" function (:user-visible-flag t) nil [227064 228592])
            ("recover-session-finish" function (:user-visible-flag t) nil [228594 230997])
            ("kill-buffer-ask" function (:arguments ("buffer")) nil [230999 231250])
            ("kill-some-buffers" function
               (:user-visible-flag t
                :arguments ("list"))
                nil [231252 231855])
            ("kill-matching-buffers" function
               (:user-visible-flag t
                :arguments ("regexp" "internal-too"))
                nil [231857 232385])
            ("rename-auto-save-file" function nil nil [232389 232953])
            ("make-auto-save-file-name" function nil nil [232955 237184])
            ("auto-save-file-name-p" function (:arguments ("filename")) nil [237186 237410])
            ("wildcard-to-regexp" function (:arguments ("wildcard")) nil [237413 239596])
            ("list-directory-brief-switches" variable (:default-value (purecopy "-CF")) nil [239599 239760])
            ("list-directory-verbose-switches" variable (:default-value (purecopy "-l")) nil [239762 239928])
            ("file-expand-wildcards" function (:arguments ("pattern" "full")) nil [239930 241651])
            ("files" package nil nil [241725 241761])
            ("list-directory" function
               (:user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [241763 243109])
            ("shell-quote-wildcard-pattern" function (:arguments ("pattern")) nil [243111 244939])
            ("insert-directory-program" variable (:default-value (purecopy "ls")) nil [244942 245069])
            ("directory-free-space-program" variable (:default-value (purecopy "df")) nil [245071 245608])
            ("directory-free-space-args" variable (:default-value (purecopy (if (eq system-type (quote darwin)) "-k" "-Pk"))) nil [245610 245797])
            ("get-free-disk-space" function (:arguments ("dir")) nil [245799 247550])
            ("directory-listing-before-filename-regexp" variable (:default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" east-asian "\\)" "\\) +")))) nil [247622 250011])
            ("insert-directory-ls-version" variable (:default-value (quote unknown)) nil [250013 250058])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [251132 261160])
            ("insert-directory-adj-pos" function (:arguments ("pos" "error-lines")) nil [261162 261728])
            ("insert-directory-safely" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [261730 262214])
            ("kill-emacs-query-functions" variable nil nil [262216 262522])
            ("confirm-kill-emacs" variable nil nil [262524 262919])
            ("save-buffers-kill-emacs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [262921 264565])
            ("save-buffers-kill-terminal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [264567 265068])
            ("setq" code nil nil [265178 265299])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [265500 268124])
            ("file-modes-char-to-who" function (:arguments ("char")) nil [268167 268634])
            ("file-modes-char-to-right" function (:arguments ("char" "from")) nil [268636 269485])
            ("file-modes-rights-to-number" function (:arguments ("rights" "who-mask" "from")) nil [269487 270641])
            ("file-modes-symbolic-to-number" function (:arguments ("modes" "from")) nil [270643 271710])
            ("read-file-modes" function (:arguments ("prompt" "orig-file")) nil [271712 272777])
            ("trash-directory" variable nil nil [272803 273206])
            ("trash--hexify-table" variable nil nil [273208 273236])
            ("declare-function" code nil nil [273238 273304])
            ("move-file-to-trash" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [273306 278726])
            ("define-key" code nil nil [278730 278770])
            ("define-key" code nil nil [278771 278821])
            ("define-key" code nil nil [278822 278872])
            ("define-key" code nil nil [278873 278915])
            ("define-key" code nil nil [278916 278961])
            ("define-key" code nil nil [278962 279003])
            ("define-key" code nil nil [279004 279043])
            ("define-key" code nil nil [279044 279082])
            ("define-key" code nil nil [279083 279128])
            ("define-key" code nil nil [279129 279186])
            ("define-key" code nil nil [279187 279232])
            ("define-key" code nil nil [279234 279286])
            ("define-key" code nil nil [279287 279349])
            ("define-key" code nil nil [279350 279405])
            ("define-key" code nil nil [279406 279465])
            ("define-key" code nil nil [279466 279513])
            ("define-key" code nil nil [279515 279573])
            ("define-key" code nil nil [279574 279625])
            ("define-key" code nil nil [279626 279680])
            ("define-key" code nil nil [279681 279742])
            ("define-key" code nil nil [279743 279802]))          
      :file "files.el.gz"
      :pointmax 279827
      :fsize 81404
      :lastmodtime '(20740 34434 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "custom.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("widget" include nil nil [1232 1249])
            ("custom-define-hook" variable nil nil [1251 1400])
            ("custom-dont-initialize" variable nil nil [1402 1585])
            ("custom-current-group-alist" variable nil nil [1587 1700])
            ("custom-initialize-default" function (:arguments ("symbol" "value")) nil [1730 2238])
            ("custom-initialize-set" function (:arguments ("symbol" "value")) nil [2240 2768])
            ("custom-initialize-reset" function (:arguments ("symbol" "value")) nil [2770 3491])
            ("custom-initialize-changed" function (:arguments ("symbol" "value")) nil [3493 4072])
            ("custom-delayed-init-variables" variable nil nil [4074 4171])
            ("custom-initialize-delay" function (:arguments ("symbol" "_value")) nil [4173 5297])
            ("custom-declare-variable" function (:arguments ("symbol" "default" "doc" "args")) nil [5299 7898])
            ("defcustom" function (:arguments ("symbol" "standard" "doc" "args")) nil [7900 13974])
            ("defface" function (:arguments ("face" "spec" "doc" "args")) nil [14002 16913])
            ("custom-current-group" function nil nil [16942 17031])
            ("custom-declare-group" function (:arguments ("symbol" "members" "doc" "args")) nil [17033 18094])
            ("defgroup" function (:arguments ("symbol" "members" "doc" "args")) nil [18096 19256])
            ("custom-add-to-group" function (:arguments ("group" "option" "widget")) nil [19258 19604])
            ("custom-group-of-mode" function (:arguments ("mode")) nil [19606 20008])
            ("custom-handle-all-keywords" function (:arguments ("symbol" "args" "type")) nil [20027 20617])
            ("custom-handle-keyword" function (:arguments ("symbol" "keyword" "value" "type")) nil [20619 21330])
            ("custom-add-dependencies" function (:arguments ("symbol" "value")) nil [21332 22085])
            ("custom-add-option" function (:arguments ("symbol" "option")) nil [22087 22538])
            ("defalias" code nil nil [22539 22595])
            ("custom-add-link" function (:arguments ("symbol" "widget")) nil [22597 22833])
            ("custom-add-version" function (:arguments ("symbol" "version")) nil [22835 22985])
            ("custom-add-package-version" function (:arguments ("symbol" "version")) nil [22987 23161])
            ("custom-add-load" function (:arguments ("symbol" "load")) nil [23163 23459])
            ("custom-autoload" function (:arguments ("symbol" "load" "noset")) nil [23461 23747])
            ("custom-variable-p" function (:arguments ("variable")) nil [23749 24182])
            ("define-obsolete-function-alias" code nil nil [24184 24259])
            ("custom-note-var-changed" function (:arguments ("variable")) nil [24261 24556])
            ("custom-load-recursion" variable nil nil [24699 24775])
            ("custom-load-symbol" function (:arguments ("symbol")) nil [24777 26034])
            ("custom-local-buffer" variable nil nil [26037 26357])
            ("put" code nil nil [26358 26403])
            ("custom-set-default" function (:arguments ("variable" "value")) nil [26405 26786])
            ("custom-set-minor-mode" function (:arguments ("variable" "value")) nil [26788 27212])
            ("custom-quote" function (:arguments ("sexp")) nil [27214 27552])
            ("customize-mark-to-save" function (:arguments ("symbol")) nil [27554 28717])
            ("customize-mark-as-set" function (:arguments ("symbol")) nil [28719 29874])
            ("custom-reevaluate-setting" function (:arguments ("symbol")) nil [29876 30348])
            ("custom-known-themes" variable (:default-value (quote (user changed))) nil [32175 32563])
            ("custom-theme-p" function (:arguments ("theme")) nil [32565 32674])
            ("custom-check-theme" function (:arguments ("theme")) nil [32676 32854])
            ("custom-push-theme" function (:arguments ("prop" "symbol" "theme" "mode" "value")) nil [32856 35001])
            ("custom-fix-face-spec" function (:arguments ("spec")) nil [35003 35773])
            ("custom-set-variables" function (:arguments ("args")) nil [35776 36387])
            ("custom-theme-set-variables" function (:arguments ("theme" "args")) nil [36389 39862])
            ("deftheme" function (:arguments ("theme" "doc" "ignored")) nil [40458 41079])
            ("custom-declare-theme" function (:arguments ("theme" "feature" "doc" "ignored")) nil [41081 41569])
            ("custom-make-theme-feature" function (:arguments ("theme")) nil [41571 42076])
            ("custom-theme-directory" variable (:default-value user-emacs-directory) nil [42100 42447])
            ("custom-theme-load-path" variable (:default-value (list (quote custom-theme-directory) t)) nil [42449 43250])
            ("custom--inhibit-theme-enable" variable nil nil [43252 43538])
            ("provide-theme" function (:arguments ("theme")) nil [43540 43938])
            ("custom-safe-themes" variable (:default-value (quote (default))) nil [43940 44560])
            ("load-theme" function
               (:user-visible-flag t
                :arguments ("theme" "no-confirm" "no-enable"))
                nil [44562 47438])
            ("custom-theme-load-confirm" function (:arguments ("hash")) nil [47440 48190])
            ("custom-theme-name-valid-p" function (:arguments ("name")) nil [48192 48457])
            ("custom-available-themes" function nil nil [48459 48991])
            ("custom-theme--load-path" function nil nil [48993 49312])
            ("enable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [49359 50595])
            ("custom-enabled-themes" variable nil nil [50597 51907])
            ("custom-theme-enabled-p" function (:arguments ("theme")) nil [51909 52027])
            ("disable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [52029 53628])
            ("custom--frame-color-default" function (:arguments ("frame" "attribute" "resource-attr" "resource-class" "tty-default" "x-default")) nil [53630 53990])
            ("custom-variable-theme-value" function (:arguments ("variable")) nil [53992 54385])
            ("custom-theme-recalc-variable" function (:arguments ("variable")) nil [54387 54842])
            ("custom-theme-recalc-face" function (:arguments ("face")) nil [54844 55116])
            ("custom-theme-reset-variables" function (:arguments ("theme" "args")) nil [55333 55704])
            ("custom-reset-variables" function (:arguments ("args")) nil [55706 56047])
            ("while" code nil nil [56128 56307])
            ("custom" package nil nil [56309 56326]))          
      :file "custom.el.gz"
      :pointmax 56352
      :fsize 16432
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "electric.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("Electric-command-loop" function (:arguments ("return-tag" "prompt" "inhibit-quitting" "loop-function" "loop-state")) nil [2957 5232])
            ("Electric-pop-up-window" function (:arguments ("buffer" "max-height")) nil [5837 6516])
            ("electricity" customgroup (:user-visible-flag t) nil [6538 6628])
            ("electric--after-char-pos" function nil nil [6630 7237])
            ("electric-indent-chars" variable (:default-value (quote (10))) nil [7479 7574])
            ("electric-indent-functions" variable nil nil [7576 7884])
            ("electric-indent-post-self-insert-function" function nil nil [7886 10521])
            ("define-minor-mode" code nil nil [10538 11909])
            ("electric-pair-pairs" variable (:default-value (quote ((34 . 34)))) nil [11933 12131])
            ("electric-pair-skip-self" variable (:default-value t) nil [12133 12549])
            ("electric-pair-syntax" function (:arguments ("command-event")) nil [12551 12818])
            ("electric-pair-post-self-insert-function" function nil nil [12820 15123])
            ("electric-pair-will-use-region" function nil nil [15125 15259])
            ("define-minor-mode" code nil nil [15276 16208])
            ("electric-layout-rules" variable (:default-value (quote nil)) nil [16273 16612])
            ("electric-layout-post-self-insert-function" function nil nil [16614 17867])
            ("define-minor-mode" code nil nil [17884 18482])
            ("electric" package nil nil [18484 18503]))          
      :file "electric.el.gz"
      :pointmax 18531
      :fsize 6039
      :lastmodtime '(20707 18685 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!Cellar!emacs!24.3!share!emacs!24.3!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
