;; Object emacs-lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "emacs-lisp/"
  :tables
  (list
    (semanticdb-table "byte-run.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("macro-declaration-function" variable (:default-value (function macro-declaration-function)) nil [1223 1555])
            ("defalias" code nil nil [1557 2699])
            ("defun-declarations-alist" variable (:default-value (list (list (quote advertised-calling-convention) (function (lambda (f _args arglist when) (list (quote set-advertised-calling-convention) (list (quote quote) f) (list (quote quote) arglist) (list (quote quote) when))))) (list (quote obsolete) (function (lambda (f _args new-name when) (\` (make-obsolete (quote (\, f)) (quote (\, new-name)) (\, when)))))) (list (quote compiler-macro) (function (lambda (f _args compiler-function) (if (not (symbolp compiler-function)) (error "Only symbols are supported in `compiler-macro'") (\` (put (quote (\, f)) (quote compiler-macro) (function (\, compiler-function)))))))) (list (quote doc-string) (function (lambda (f _args pos) (list (quote put) (list (quote quote) f) (quote (quote doc-string-elt)) (list (quote quote) pos))))) (list (quote indent) (function (lambda (f _args val) (list (quote put) (list (quote quote) f) (quote (quote lisp-indent-function)) (list (quote quote) val))))))) nil [2896 4315])
            ("macro-declarations-alist" variable (:default-value (cons (list (quote debug) (function (lambda (name _args spec) (list (quote progn) :autoload-end (list (quote put) (list (quote quote) name) (quote (quote edebug-form-spec)) (list (quote quote) spec)))))) defun-declarations-alist)) nil [4317 4926])
            ("put" code nil nil [4928 4961])
            ("defalias" code nil nil [4962 6681])
            ("defun" function (:arguments ("name" "arglist" "docstring" "body")) nil [6730 9096])
            ("fset" code nil nil [9202 9223])
            ("defsubst" function (:arguments ("name" "arglist" "body")) nil [10234 10705])
            ("advertised-signature-table" variable (:default-value (make-hash-table :test (quote eq) :weakness (quote key))) nil [10707 10785])
            ("set-advertised-calling-convention" function (:arguments ("function" "signature" "_when")) nil [10787 11157])
            ("make-obsolete" function (:arguments ("obsolete-name" "current-name" "when")) nil [11159 12123])
            ("define-obsolete-function-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [12125 12942])
            ("make-obsolete-variable" function (:arguments ("obsolete-name" "current-name" "when" "access-type")) nil [12944 13775])
            ("define-obsolete-variable-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [13778 15473])
            ("define-obsolete-face-alias" function (:arguments ("obsolete-face" "current-face" "when")) nil [15803 16189])
            ("dont-compile" function (:arguments ("body")) nil [16191 16478])
            ("eval-when-compile" function (:arguments ("body")) nil [16721 17146])
            ("eval-and-compile" function (:arguments ("body")) nil [17148 17344])
            ("put" code nil nil [17346 17393])
            ("with-no-warnings" function (:arguments ("body")) nil [17394 17579])
            ("make-obsolete-variable" code nil nil [18874 18983])
            ("make-obsolete" code nil nil [18984 19075]))          
      :file "byte-run.el.gz"
      :pointmax 19103
      :fsize 5761
      :lastmodtime '(20708 57451 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!Cellar!emacs!24.3!share!emacs!24.3!lisp!emacs-lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
